// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

#line 2 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
//
// cs-parser.jay: The Parser for the C# compiler
//
// Authors: Miguel de Icaza (miguel@gnome.org)
//          Ravi Pratap     (ravi@ximian.com)
//          Marek Safar	    (marek.safar@gmail.com)
//
// Dual Licensed under the terms of the GNU GPL and the MIT X11 license
//
// (C) 2001 Ximian, Inc (http://www.ximian.com)
// (C) 2004-2011 Novell, Inc
// Copyright 2011-2012 Xamarin Inc.
//

using System.Text;
using System.IO;
using System;
using System.Collections.Generic;

//+COPPER
using Copper;

namespace Mono.CSharp
{
	/// <summary>
	///    The C# Parser
	/// </summary>
	public class CSharpParser
	{
		[Flags]
		enum ParameterModifierType
		{
			Ref		= 1 << 1,
			Out		= 1 << 2,
			This	= 1 << 3,
			Params	= 1 << 4,
			Arglist	= 1 << 5,
			DefaultValue = 1 << 6,
			
			All = Ref | Out | This | Params | Arglist | DefaultValue,
			PrimaryConstructor = Ref | Out | Params | DefaultValue
		}
		
		//ORIG
		//{
		static readonly object ModifierNone = 0;
	
		NamespaceContainer current_namespace;
		TypeContainer current_container;
		TypeDefinition current_type;
		PropertyBase current_property;
		EventProperty current_event;
		EventField current_event_field;
		FieldBase current_field;
	
		/// <summary>
		///   Current block is used to add statements as we find
		///   them.  
		/// </summary>
		Block      current_block;
		BlockVariable current_variable;
		Delegate   current_delegate;
		
		AnonymousMethodExpression current_anonymous_method;

		/// <summary>
		///   This is used by the unary_expression code to resolve
		///   a name against a parameter.  
		/// </summary>
		
		// FIXME: This is very ugly and it's very hard to reset it correctly
		// on all places, especially when some parameters are autogenerated.
		ParametersCompiled current_local_parameters;

		bool parsing_anonymous_method;
		
		bool async_block;

		///
		/// An out-of-band stack.
		///
		Stack<object> oob_stack;

		///
		/// Controls the verbosity of the errors produced by the parser
		///
		int yacc_verbose_flag;

		/// 
		/// Used by the interactive shell, flags whether EOF was reached
		/// and an error was produced
		///
		public bool UnexpectedEOF;

		///
		/// The current file.
		///
		readonly CompilationSourceFile file;

		///
		/// Temporary Xml documentation cache.
		/// For enum types, we need one more temporary store.
		///
		string tmpComment;
		string enumTypeComment;
	       		
		/// Current attribute target
		string current_attr_target;
		
		ParameterModifierType valid_param_mod;
		
		bool default_parameter_used;

		/// When using the interactive parser, this holds the
		/// resulting expression
		public Class InteractiveResult;

		//
		// Keeps track of global data changes to undo on parser error
		//
		public Undo undo;

		bool? interactive_async;
		
		Stack<Linq.QueryBlock> linq_clause_blocks;

		ModuleContainer module;
		
		readonly CompilerContext compiler;
		readonly LanguageVersion lang_version;
		readonly bool doc_support;
		readonly CompilerSettings settings;
		readonly Report report;
		
		//
		// Instead of allocating carrier array everytime we
		// share the bucket for very common constructs which can never
		// be recursive
		//
		List<Parameter> parameters_bucket;
		
		//
		// Full AST support members
		//
		LocationsBag lbag;
		List<Tuple<Modifiers, Location>> mod_locations;
		Stack<Location> location_stack;
		//}
		//~ORIG
		
		//+COPPER 
		//{
		Port.Direction last_port_dir = Port.Direction.None;
		Location last_port_loc; 
		bool port_is_static = false;
		bool port_is_readonly = false;
		bool port_is_multi = false;
		TypeSpec parent_type = null; //used by port and methods
		List<string> ports_to_construct = null;
		List<string> static_ports_to_construct = null;
		bool parsing_connection_with = false;
		
		//Semantic predicate for keeping track of when we are 
		//parsing in a port interface or port. We do not need a stack 
		//for this, since ports and port interfaces cannot have containers 
		//inside of them.
		bool parsing_port = false;
		bool parsing_port_interface = false;
		bool method_void = false;
		
		bool ParsingPortOrInterface { 
			get {
				return parsing_port || parsing_port_interface;
			}
		}
		
		private void StoreDirectionModifierOrDie(Port.Direction dir, Location loc) {
			if( !ParsingPortOrInterface ) {
				report.Error (99225, loc,
					"Direction modifiers are not allowed outside of ports or port interfaces." );
			}
		
			if( last_port_dir != Port.Direction.None )
				report.Error (99209, loc,
					"A direction modifier has already appeared (" + 
					last_port_dir.DirectionName() + " at " + last_port_loc );
			
			last_port_loc = loc;
			last_port_dir = dir;
		}
		
		private void BeginPortInterface() {
			parsing_port_interface = true;
		}
		
		private void EndPortInterface() {
			parsing_port_interface = false;
		}
		
		private void BeginPort() {
			parsing_port = true;
		}
		
		private void EndPort() {
			parsing_port = false;
		}
		
		void start_block (Location loc)
		{
			/*
			if( current_block != null ) {
				Console.WriteLine( !current_block.IsInWith );
				Console.WriteLine( parsing_connection_with );
				Console.WriteLine( current_block.Parent != null 
					&& current_block.Parent is ToplevelBlock );
				Console.WriteLine( "-=------------------------------=-");
			}
			*/
			if (current_block == null ) { //|| parsing_connection_with) 
				//old_current_block = current_block; //+COPPER
				current_block = new ToplevelBlock (compiler, current_local_parameters, loc);
				parsing_anonymous_method = false;
			} else if ( !current_block.IsInWith && 
						parsing_connection_with &&
						(current_block.Parent == null ||
						current_block.Parent is ToplevelBlock ||
						( current_block.Parent != null &&
						  !current_block.Parent.IsInWith ))
					  ) 
			{
				
				var par = current_block;
				current_block = new ToplevelBlock( compiler, current_local_parameters, loc);
				parsing_anonymous_method = false;
				current_block.IsInWith = true;
				current_block.Parent = par;
			} else if (parsing_anonymous_method) {
				current_block = new ParametersBlock (current_block, current_local_parameters, loc);
				parsing_anonymous_method = false;
			} else {
				current_block = new ExplicitBlock (current_block, loc, Location.Null);
			}
		}

		Block end_block (Location loc)
		{
			Block retval = current_block.Explicit;
			retval.SetEndLocation (loc);
			current_block = retval.Parent;
			
			return retval;
		}
		
		public int n_con_maps = 0;
		public string last_con_map_name;
		public string NewConMapName() {
			last_con_map_name = "ConMap_" + n_con_maps++;
			return last_con_map_name;
		}
		
		static Location no_loc = new Location();
		
		//}
		
		// } }
#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = System.Console.Out;

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }
#pragma warning disable 649
  /* An EOF token */
  public int eof_token;
#pragma warning restore 649
  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
  internal yydebug.yyDebug debug;

  protected const int yyFinal = 7;
 // Put this array into a separate class so it is only initialized if debugging is actually used
 // Use MarshalByRefObject to disable inlining
 class YYRules : MarshalByRefObject {
  public static readonly string [] yyRule = {
    "$accept : compilation_unit",
    "compilation_unit : outer_declaration opt_EOF",
    "$$1 :",
    "compilation_unit : interactive_parsing $$1 opt_EOF",
    "compilation_unit : documentation_parsing",
    "outer_declaration : opt_extern_alias_directives opt_using_directives",
    "outer_declaration : opt_extern_alias_directives opt_using_directives namespace_or_type_declarations opt_attributes",
    "outer_declaration : opt_extern_alias_directives opt_using_directives attribute_sections",
    "outer_declaration : error",
    "opt_EOF :",
    "opt_EOF : EOF",
    "extern_alias_directives : extern_alias_directive",
    "extern_alias_directives : extern_alias_directives extern_alias_directive",
    "extern_alias_directive : EXTERN_ALIAS IDENTIFIER IDENTIFIER SEMICOLON",
    "extern_alias_directive : EXTERN_ALIAS error",
    "using_directives : using_directive",
    "using_directives : using_directives using_directive",
    "using_directive : using_namespace",
    "using_namespace : USING opt_static namespace_or_type_expr SEMICOLON",
    "using_namespace : USING opt_static IDENTIFIER ASSIGN namespace_or_type_expr SEMICOLON",
    "using_namespace : USING error",
    "opt_static :",
    "opt_static : STATIC",
    "$$2 :",
    "$$3 :",
    "namespace_declaration : opt_attributes NAMESPACE namespace_name $$2 OPEN_BRACE $$3 opt_extern_alias_directives opt_using_directives opt_namespace_or_type_declarations CLOSE_BRACE opt_semicolon_error",
    "namespace_declaration : opt_attributes NAMESPACE namespace_name",
    "opt_semicolon_error :",
    "opt_semicolon_error : SEMICOLON",
    "opt_semicolon_error : error",
    "namespace_name : IDENTIFIER",
    "namespace_name : namespace_name DOT IDENTIFIER",
    "namespace_name : error",
    "opt_semicolon :",
    "opt_semicolon : SEMICOLON",
    "opt_comma :",
    "opt_comma : COMMA",
    "opt_using_directives :",
    "opt_using_directives : using_directives",
    "opt_extern_alias_directives :",
    "opt_extern_alias_directives : extern_alias_directives",
    "opt_namespace_or_type_declarations :",
    "opt_namespace_or_type_declarations : namespace_or_type_declarations",
    "namespace_or_type_declarations : namespace_or_type_declaration",
    "namespace_or_type_declarations : namespace_or_type_declarations namespace_or_type_declaration",
    "namespace_or_type_declaration : type_declaration",
    "namespace_or_type_declaration : namespace_declaration",
    "namespace_or_type_declaration : attribute_sections CLOSE_BRACE",
    "type_declaration : class_declaration",
    "type_declaration : struct_declaration",
    "type_declaration : interface_declaration",
    "type_declaration : enum_declaration",
    "type_declaration : delegate_declaration",
    "type_declaration : port_interface_declaration",
    "type_declaration : port_declaration",
    "port_or_multiport : PORT",
    "port_or_multiport : MULTIPORT",
    "$$4 :",
    "$$5 :",
    "$$6 :",
    "$$7 :",
    "port_declaration : opt_attributes opt_modifiers opt_partial port_or_multiport $$4 type_declaration_name $$5 opt_primary_parameters_with_class_base opt_type_parameter_constraints_clauses $$6 OPEN_BRACE opt_port_member_declarations CLOSE_BRACE $$7 opt_semicolon",
    "opt_port_member_declarations :",
    "opt_port_member_declarations : port_member_declarations",
    "port_member_declarations : port_member_declaration",
    "port_member_declarations : port_member_declarations port_member_declaration",
    "port_member_declaration : constant_declaration",
    "port_member_declaration : field_declaration",
    "port_member_declaration : method_declaration",
    "port_member_declaration : property_declaration",
    "port_member_declaration : event_declaration",
    "port_member_declaration : indexer_declaration",
    "port_member_declaration : operator_declaration",
    "port_member_declaration : constructor_declaration",
    "port_member_declaration : primary_constructor_body",
    "port_member_declaration : destructor_declaration",
    "port_member_declaration : type_declaration",
    "port_member_declaration : attributes_without_members",
    "port_member_declaration : incomplete_member",
    "port_member_declaration : error",
    "port_interface_token : PORT INTERFACE",
    "$$8 :",
    "$$9 :",
    "$$10 :",
    "$$11 :",
    "$$12 :",
    "port_interface_declaration : opt_attributes opt_modifiers opt_partial port_interface_token $$8 type_declaration_name $$9 opt_class_base $$10 opt_type_parameter_constraints_clauses $$11 OPEN_BRACE opt_port_interface_member_declarations CLOSE_BRACE $$12 opt_semicolon",
    "port_interface_declaration : opt_attributes opt_modifiers opt_partial port_interface_token error",
    "port_interface_member_declarations : port_interface_member_declaration",
    "port_interface_member_declarations : port_interface_member_declarations port_interface_member_declaration",
    "opt_port_interface_member_declarations :",
    "opt_port_interface_member_declarations : port_interface_member_declarations",
    "port_interface_member_declaration : constant_declaration",
    "port_interface_member_declaration : method_declaration",
    "$$13 :",
    "connection_with_block : WITH OPEN_BRACE $$13 opt_connection_with_elems CLOSE_BRACE",
    "opt_param_list : formal_parameter_list",
    "opt_param_list :",
    "connection_with_elem : IDENTIFIER OPEN_PARENS opt_param_list CLOSE_PARENS ARROW expression SEMICOLON",
    "connection_with_elem : method_declaration",
    "connection_with_elems : connection_with_elem",
    "connection_with_elems : connection_with_elems connection_with_elem",
    "opt_connection_with_elems :",
    "opt_connection_with_elems : connection_with_elems",
    "opt_with_block :",
    "opt_with_block : connection_with_block",
    "connect_statement : CONNECT argument_list opt_with_block SEMICOLON",
    "disconnect_statement : DISCONNECT argument_list SEMICOLON",
    "attach_statement : ATTACH argument_list opt_with_block SEMICOLON",
    "detach_statement : DETACH argument_list SEMICOLON",
    "embed_statement : EMBED argument_list SEMICOLON",
    "opt_attributes :",
    "opt_attributes : attribute_sections",
    "attribute_sections : attribute_section",
    "attribute_sections : attribute_sections attribute_section",
    "$$14 :",
    "attribute_section : OPEN_BRACKET $$14 attribute_section_cont",
    "$$15 :",
    "attribute_section_cont : attribute_target COLON $$15 attribute_list opt_comma CLOSE_BRACKET",
    "attribute_section_cont : attribute_list opt_comma CLOSE_BRACKET",
    "attribute_section_cont : IDENTIFIER error",
    "attribute_section_cont : error",
    "attribute_target : IDENTIFIER",
    "attribute_target : EVENT",
    "attribute_target : RETURN",
    "attribute_list : attribute",
    "attribute_list : attribute_list COMMA attribute",
    "$$16 :",
    "attribute : attribute_name $$16 opt_attribute_arguments",
    "attribute_name : namespace_or_type_expr",
    "opt_attribute_arguments :",
    "opt_attribute_arguments : OPEN_PARENS attribute_arguments CLOSE_PARENS",
    "attribute_arguments :",
    "attribute_arguments : positional_or_named_argument",
    "attribute_arguments : named_attribute_argument",
    "attribute_arguments : attribute_arguments COMMA positional_or_named_argument",
    "attribute_arguments : attribute_arguments COMMA named_attribute_argument",
    "positional_or_named_argument : expression",
    "positional_or_named_argument : named_argument",
    "positional_or_named_argument : error",
    "$$17 :",
    "named_attribute_argument : IDENTIFIER ASSIGN $$17 expression",
    "named_argument : identifier_inside_body COLON opt_named_modifier named_argument_expr",
    "named_argument_expr : expression_or_error",
    "opt_named_modifier :",
    "opt_named_modifier : REF",
    "opt_named_modifier : OUT",
    "opt_class_member_declarations :",
    "opt_class_member_declarations : class_member_declarations",
    "class_member_declarations : class_member_declaration",
    "class_member_declarations : class_member_declarations class_member_declaration",
    "class_member_declaration : constant_declaration",
    "class_member_declaration : field_declaration",
    "class_member_declaration : method_declaration",
    "class_member_declaration : property_declaration",
    "class_member_declaration : event_declaration",
    "class_member_declaration : indexer_declaration",
    "class_member_declaration : operator_declaration",
    "class_member_declaration : constructor_declaration",
    "class_member_declaration : primary_constructor_body",
    "class_member_declaration : destructor_declaration",
    "class_member_declaration : type_declaration",
    "class_member_declaration : attributes_without_members",
    "class_member_declaration : incomplete_member",
    "class_member_declaration : error",
    "$$18 :",
    "primary_constructor_body : OPEN_BRACE $$18 opt_statement_list block_end",
    "$$19 :",
    "$$20 :",
    "$$21 :",
    "$$22 :",
    "$$23 :",
    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT $$19 type_declaration_name $$20 opt_primary_parameters opt_class_base opt_type_parameter_constraints_clauses $$21 OPEN_BRACE $$22 opt_class_member_declarations CLOSE_BRACE $$23 opt_semicolon",
    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT error",
    "$$24 :",
    "constant_declaration : opt_attributes opt_modifiers CONST type IDENTIFIER $$24 constant_initializer opt_constant_declarators SEMICOLON",
    "constant_declaration : opt_attributes opt_modifiers CONST type error",
    "opt_constant_declarators :",
    "opt_constant_declarators : constant_declarators",
    "constant_declarators : constant_declarator",
    "constant_declarators : constant_declarators constant_declarator",
    "constant_declarator : COMMA IDENTIFIER constant_initializer",
    "$$25 :",
    "constant_initializer : ASSIGN $$25 constant_initializer_expr",
    "constant_initializer : error",
    "constant_initializer_expr : constant_expression",
    "constant_initializer_expr : array_initializer",
    "$$26 :",
    "field_declaration : opt_attributes opt_modifiers member_type IDENTIFIER $$26 opt_field_initializer opt_field_declarators SEMICOLON",
    "$$27 :",
    "field_declaration : opt_attributes opt_modifiers FIXED simple_type IDENTIFIER $$27 fixed_field_size opt_fixed_field_declarators SEMICOLON",
    "field_declaration : opt_attributes opt_modifiers FIXED simple_type error SEMICOLON",
    "opt_field_initializer :",
    "$$28 :",
    "opt_field_initializer : ASSIGN $$28 variable_initializer",
    "opt_field_declarators :",
    "opt_field_declarators : field_declarators",
    "field_declarators : field_declarator",
    "field_declarators : field_declarators field_declarator",
    "field_declarator : COMMA IDENTIFIER",
    "$$29 :",
    "field_declarator : COMMA IDENTIFIER ASSIGN $$29 variable_initializer",
    "opt_fixed_field_declarators :",
    "opt_fixed_field_declarators : fixed_field_declarators",
    "fixed_field_declarators : fixed_field_declarator",
    "fixed_field_declarators : fixed_field_declarators fixed_field_declarator",
    "fixed_field_declarator : COMMA IDENTIFIER fixed_field_size",
    "$$30 :",
    "fixed_field_size : OPEN_BRACKET $$30 expression CLOSE_BRACKET",
    "fixed_field_size : OPEN_BRACKET error",
    "variable_initializer : expression",
    "variable_initializer : array_initializer",
    "variable_initializer : error",
    "$$31 :",
    "method_declaration : method_header $$31 method_body_expression_block",
    "$$32 :",
    "$$33 :",
    "method_header : opt_attributes opt_modifiers member_type method_declaration_name OPEN_PARENS $$32 opt_formal_parameter_list CLOSE_PARENS $$33 opt_type_parameter_constraints_clauses",
    "$$34 :",
    "$$35 :",
    "$$36 :",
    "method_header : opt_attributes opt_modifiers PARTIAL VOID $$34 method_declaration_name OPEN_PARENS $$35 opt_formal_parameter_list CLOSE_PARENS $$36 opt_type_parameter_constraints_clauses",
    "method_header : opt_attributes opt_modifiers member_type modifiers method_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
    "method_header : opt_attributes opt_modifiers member_type method_declaration_name error",
    "method_body_expression_block : method_body",
    "method_body_expression_block : expression_block",
    "method_body : block",
    "method_body : SEMICOLON",
    "$$37 :",
    "expression_block : ARROW $$37 expression SEMICOLON",
    "opt_formal_parameter_list :",
    "opt_formal_parameter_list : formal_parameter_list",
    "formal_parameter_list : fixed_parameters",
    "formal_parameter_list : fixed_parameters COMMA parameter_array",
    "formal_parameter_list : fixed_parameters COMMA arglist_modifier",
    "formal_parameter_list : parameter_array COMMA error",
    "formal_parameter_list : fixed_parameters COMMA parameter_array COMMA error",
    "formal_parameter_list : arglist_modifier COMMA error",
    "formal_parameter_list : fixed_parameters COMMA ARGLIST COMMA error",
    "formal_parameter_list : parameter_array",
    "formal_parameter_list : arglist_modifier",
    "formal_parameter_list : error",
    "fixed_parameters : fixed_parameter",
    "fixed_parameters : fixed_parameters COMMA fixed_parameter",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type identifier_inside_body",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type identifier_inside_body OPEN_BRACKET CLOSE_BRACKET",
    "fixed_parameter : attribute_sections error",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type error",
    "$$38 :",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type identifier_inside_body ASSIGN $$38 constant_expression",
    "opt_parameter_modifier :",
    "opt_parameter_modifier : parameter_modifiers",
    "parameter_modifiers : parameter_modifier",
    "parameter_modifiers : parameter_modifiers parameter_modifier",
    "parameter_modifier : REF",
    "parameter_modifier : OUT",
    "parameter_modifier : THIS",
    "parameter_array : opt_attributes params_modifier type IDENTIFIER",
    "parameter_array : opt_attributes params_modifier type IDENTIFIER ASSIGN constant_expression",
    "parameter_array : opt_attributes params_modifier type error",
    "params_modifier : PARAMS",
    "params_modifier : PARAMS parameter_modifier",
    "params_modifier : PARAMS params_modifier",
    "arglist_modifier : ARGLIST",
    "$$39 :",
    "$$40 :",
    "$$41 :",
    "$$42 :",
    "property_declaration : opt_attributes opt_modifiers member_type member_declaration_name $$39 OPEN_BRACE $$40 accessor_declarations $$41 CLOSE_BRACE $$42 opt_property_initializer",
    "$$43 :",
    "property_declaration : opt_attributes opt_modifiers member_type member_declaration_name $$43 expression_block",
    "opt_property_initializer :",
    "$$44 :",
    "opt_property_initializer : ASSIGN $$44 property_initializer SEMICOLON",
    "property_initializer : expression",
    "property_initializer : array_initializer",
    "$$45 :",
    "$$46 :",
    "indexer_declaration : opt_attributes opt_modifiers member_type indexer_declaration_name OPEN_BRACKET $$45 opt_formal_parameter_list CLOSE_BRACKET $$46 indexer_body",
    "indexer_body : OPEN_BRACE accessor_declarations CLOSE_BRACE",
    "indexer_body : expression_block",
    "accessor_declarations : get_accessor_declaration",
    "accessor_declarations : get_accessor_declaration accessor_declarations",
    "accessor_declarations : set_accessor_declaration",
    "accessor_declarations : set_accessor_declaration accessor_declarations",
    "accessor_declarations : error",
    "$$47 :",
    "get_accessor_declaration : opt_attributes opt_modifiers GET $$47 accessor_body",
    "$$48 :",
    "set_accessor_declaration : opt_attributes opt_modifiers SET $$48 accessor_body",
    "accessor_body : block",
    "accessor_body : SEMICOLON",
    "accessor_body : error",
    "$$49 :",
    "$$50 :",
    "$$51 :",
    "$$52 :",
    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE $$49 type_declaration_name $$50 opt_class_base opt_type_parameter_constraints_clauses $$51 OPEN_BRACE opt_interface_member_declarations CLOSE_BRACE $$52 opt_semicolon",
    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE error",
    "opt_interface_member_declarations :",
    "opt_interface_member_declarations : interface_member_declarations",
    "interface_member_declarations : interface_member_declaration",
    "interface_member_declarations : interface_member_declarations interface_member_declaration",
    "interface_member_declaration : constant_declaration",
    "interface_member_declaration : field_declaration",
    "interface_member_declaration : method_declaration",
    "interface_member_declaration : property_declaration",
    "interface_member_declaration : event_declaration",
    "interface_member_declaration : indexer_declaration",
    "interface_member_declaration : operator_declaration",
    "interface_member_declaration : constructor_declaration",
    "interface_member_declaration : type_declaration",
    "$$53 :",
    "operator_declaration : opt_attributes opt_modifiers operator_declarator $$53 method_body_expression_block",
    "operator_type : type_expression_or_array",
    "operator_type : VOID",
    "$$54 :",
    "operator_declarator : operator_type OPERATOR overloadable_operator OPEN_PARENS $$54 opt_formal_parameter_list CLOSE_PARENS",
    "operator_declarator : conversion_operator_declarator",
    "overloadable_operator : BANG",
    "overloadable_operator : TILDE",
    "overloadable_operator : OP_INC",
    "overloadable_operator : OP_DEC",
    "overloadable_operator : TRUE",
    "overloadable_operator : FALSE",
    "overloadable_operator : PLUS",
    "overloadable_operator : MINUS",
    "overloadable_operator : STAR",
    "overloadable_operator : DIV",
    "overloadable_operator : PERCENT",
    "overloadable_operator : BITWISE_AND",
    "overloadable_operator : BITWISE_OR",
    "overloadable_operator : CARRET",
    "overloadable_operator : OP_SHIFT_LEFT",
    "overloadable_operator : OP_SHIFT_RIGHT",
    "overloadable_operator : OP_EQ",
    "overloadable_operator : OP_NE",
    "overloadable_operator : OP_GT",
    "overloadable_operator : OP_LT",
    "overloadable_operator : OP_GE",
    "overloadable_operator : OP_LE",
    "overloadable_operator : IS",
    "$$55 :",
    "conversion_operator_declarator : IMPLICIT OPERATOR type OPEN_PARENS $$55 opt_formal_parameter_list CLOSE_PARENS",
    "$$56 :",
    "conversion_operator_declarator : EXPLICIT OPERATOR type OPEN_PARENS $$56 opt_formal_parameter_list CLOSE_PARENS",
    "conversion_operator_declarator : IMPLICIT error",
    "conversion_operator_declarator : EXPLICIT error",
    "constructor_declaration : constructor_declarator constructor_body",
    "$$57 :",
    "$$58 :",
    "constructor_declarator : opt_attributes opt_modifiers IDENTIFIER $$57 OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS $$58 opt_constructor_initializer",
    "constructor_body : block_prepared",
    "constructor_body : SEMICOLON",
    "opt_constructor_initializer :",
    "opt_constructor_initializer : constructor_initializer",
    "$$59 :",
    "constructor_initializer : COLON BASE OPEN_PARENS $$59 opt_argument_list CLOSE_PARENS",
    "$$60 :",
    "constructor_initializer : COLON THIS OPEN_PARENS $$60 opt_argument_list CLOSE_PARENS",
    "constructor_initializer : COLON error",
    "constructor_initializer : error",
    "$$61 :",
    "destructor_declaration : opt_attributes opt_modifiers TILDE $$61 IDENTIFIER OPEN_PARENS CLOSE_PARENS method_body",
    "$$62 :",
    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name $$62 opt_event_initializer opt_event_declarators SEMICOLON",
    "$$63 :",
    "$$64 :",
    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name OPEN_BRACE $$63 event_accessor_declarations $$64 CLOSE_BRACE",
    "event_declaration : opt_attributes opt_modifiers EVENT type error",
    "opt_event_initializer :",
    "$$65 :",
    "opt_event_initializer : ASSIGN $$65 event_variable_initializer",
    "opt_event_declarators :",
    "opt_event_declarators : event_declarators",
    "event_declarators : event_declarator",
    "event_declarators : event_declarators event_declarator",
    "event_declarator : COMMA IDENTIFIER",
    "$$66 :",
    "event_declarator : COMMA IDENTIFIER ASSIGN $$66 event_variable_initializer",
    "$$67 :",
    "event_variable_initializer : $$67 variable_initializer",
    "event_accessor_declarations : add_accessor_declaration remove_accessor_declaration",
    "event_accessor_declarations : remove_accessor_declaration add_accessor_declaration",
    "event_accessor_declarations : add_accessor_declaration",
    "event_accessor_declarations : remove_accessor_declaration",
    "event_accessor_declarations : error",
    "$$68 :",
    "add_accessor_declaration : opt_attributes opt_modifiers ADD $$68 event_accessor_block",
    "$$69 :",
    "remove_accessor_declaration : opt_attributes opt_modifiers REMOVE $$69 event_accessor_block",
    "event_accessor_block : opt_semicolon",
    "event_accessor_block : block",
    "attributes_without_members : attribute_sections CLOSE_BRACE",
    "incomplete_member : opt_attributes opt_modifiers member_type CLOSE_BRACE",
    "$$70 :",
    "$$71 :",
    "$$72 :",
    "enum_declaration : opt_attributes opt_modifiers ENUM type_declaration_name opt_enum_base $$70 OPEN_BRACE $$71 opt_enum_member_declarations $$72 CLOSE_BRACE opt_semicolon",
    "opt_enum_base :",
    "opt_enum_base : COLON type",
    "opt_enum_base : COLON error",
    "opt_enum_member_declarations :",
    "opt_enum_member_declarations : enum_member_declarations",
    "opt_enum_member_declarations : enum_member_declarations COMMA",
    "enum_member_declarations : enum_member_declaration",
    "enum_member_declarations : enum_member_declarations COMMA enum_member_declaration",
    "enum_member_declaration : opt_attributes IDENTIFIER",
    "$$73 :",
    "enum_member_declaration : opt_attributes IDENTIFIER $$73 ASSIGN constant_expression",
    "enum_member_declaration : opt_attributes IDENTIFIER error",
    "enum_member_declaration : attributes_without_members",
    "$$74 :",
    "$$75 :",
    "$$76 :",
    "delegate_declaration : opt_attributes opt_modifiers DELEGATE member_type type_declaration_name OPEN_PARENS $$74 opt_formal_parameter_list CLOSE_PARENS $$75 opt_type_parameter_constraints_clauses $$76 SEMICOLON",
    "opt_nullable :",
    "opt_nullable : INTERR_NULLABLE",
    "namespace_or_type_expr : member_name",
    "namespace_or_type_expr : qualified_alias_member IDENTIFIER opt_type_argument_list",
    "namespace_or_type_expr : qualified_alias_member IDENTIFIER generic_dimension",
    "member_name : simple_name_expr",
    "member_name : namespace_or_type_expr DOT IDENTIFIER opt_type_argument_list",
    "member_name : namespace_or_type_expr DOT IDENTIFIER generic_dimension",
    "simple_name_expr : IDENTIFIER opt_type_argument_list",
    "simple_name_expr : IDENTIFIER generic_dimension",
    "opt_type_argument_list :",
    "opt_type_argument_list : OP_GENERICS_LT type_arguments OP_GENERICS_GT",
    "opt_type_argument_list : OP_GENERICS_LT error",
    "type_arguments : type",
    "type_arguments : type_arguments COMMA type",
    "$$77 :",
    "type_declaration_name : IDENTIFIER $$77 opt_type_parameter_list",
    "member_declaration_name : method_declaration_name",
    "method_declaration_name : type_declaration_name",
    "method_declaration_name : explicit_interface IDENTIFIER opt_type_parameter_list",
    "indexer_declaration_name : THIS",
    "indexer_declaration_name : explicit_interface THIS",
    "explicit_interface : IDENTIFIER opt_type_argument_list DOT",
    "explicit_interface : qualified_alias_member IDENTIFIER opt_type_argument_list DOT",
    "explicit_interface : explicit_interface IDENTIFIER opt_type_argument_list DOT",
    "opt_type_parameter_list :",
    "opt_type_parameter_list : OP_GENERICS_LT_DECL type_parameters OP_GENERICS_GT",
    "type_parameters : type_parameter",
    "type_parameters : type_parameters COMMA type_parameter",
    "type_parameter : opt_attributes opt_type_parameter_variance IDENTIFIER",
    "type_parameter : error",
    "type_and_void : type_expression_or_array",
    "type_and_void : VOID",
    "member_type : type_and_void",
    "type : type_expression_or_array",
    "type : void_invalid",
    "simple_type : type_expression",
    "simple_type : void_invalid",
    "parameter_type : type_expression_or_array",
    "parameter_type : VOID",
    "type_expression_or_array : type_expression",
    "type_expression_or_array : type_expression rank_specifiers",
    "type_expression : namespace_or_type_expr opt_nullable",
    "type_expression : namespace_or_type_expr pointer_stars",
    "type_expression : builtin_type_expression",
    "void_invalid : VOID",
    "builtin_type_expression : builtin_types opt_nullable",
    "builtin_type_expression : builtin_types pointer_stars",
    "builtin_type_expression : VOID pointer_stars",
    "type_list : base_type_name",
    "type_list : type_list COMMA base_type_name",
    "base_type_name : type",
    "builtin_types : OBJECT",
    "builtin_types : STRING",
    "builtin_types : BOOL",
    "builtin_types : DECIMAL",
    "builtin_types : FLOAT",
    "builtin_types : DOUBLE",
    "builtin_types : integral_type",
    "integral_type : SBYTE",
    "integral_type : BYTE",
    "integral_type : SHORT",
    "integral_type : USHORT",
    "integral_type : INT",
    "integral_type : UINT",
    "integral_type : LONG",
    "integral_type : ULONG",
    "integral_type : CHAR",
    "primary_expression : type_name_expression",
    "primary_expression : literal",
    "primary_expression : array_creation_expression",
    "primary_expression : parenthesized_expression",
    "primary_expression : default_value_expression",
    "primary_expression : invocation_expression",
    "primary_expression : element_access",
    "primary_expression : this_access",
    "primary_expression : base_access",
    "primary_expression : post_increment_expression",
    "primary_expression : post_decrement_expression",
    "primary_expression : object_or_delegate_creation_expression",
    "primary_expression : anonymous_type_expression",
    "primary_expression : typeof_expression",
    "primary_expression : sizeof_expression",
    "primary_expression : checked_expression",
    "primary_expression : unchecked_expression",
    "primary_expression : pointer_member_access",
    "primary_expression : anonymous_method_expression",
    "primary_expression : undocumented_expressions",
    "primary_expression : interpolated_string",
    "type_name_expression : simple_name_expr",
    "type_name_expression : IDENTIFIER GENERATE_COMPLETION",
    "type_name_expression : member_access",
    "literal : boolean_literal",
    "literal : LITERAL",
    "literal : NULL",
    "boolean_literal : TRUE",
    "boolean_literal : FALSE",
    "interpolated_string : INTERPOLATED_STRING interpolations INTERPOLATED_STRING_END",
    "interpolated_string : INTERPOLATED_STRING_END",
    "interpolations : interpolation",
    "interpolations : interpolations INTERPOLATED_STRING interpolation",
    "interpolation : expression",
    "interpolation : expression COMMA expression",
    "$$78 :",
    "interpolation : expression COLON $$78 LITERAL",
    "$$79 :",
    "interpolation : expression COMMA expression COLON $$79 LITERAL",
    "open_parens_any : OPEN_PARENS",
    "open_parens_any : OPEN_PARENS_CAST",
    "close_parens : CLOSE_PARENS",
    "close_parens : COMPLETE_COMPLETION",
    "parenthesized_expression : OPEN_PARENS expression CLOSE_PARENS",
    "parenthesized_expression : OPEN_PARENS expression COMPLETE_COMPLETION",
    "member_access : primary_expression DOT identifier_inside_body opt_type_argument_list",
    "member_access : primary_expression DOT identifier_inside_body generic_dimension",
    "member_access : primary_expression INTERR_OPERATOR DOT identifier_inside_body opt_type_argument_list",
    "member_access : builtin_types DOT identifier_inside_body opt_type_argument_list",
    "member_access : BASE DOT identifier_inside_body opt_type_argument_list",
    "member_access : AWAIT DOT identifier_inside_body opt_type_argument_list",
    "member_access : qualified_alias_member identifier_inside_body opt_type_argument_list",
    "member_access : qualified_alias_member identifier_inside_body generic_dimension",
    "member_access : primary_expression DOT GENERATE_COMPLETION",
    "member_access : primary_expression DOT IDENTIFIER GENERATE_COMPLETION",
    "member_access : builtin_types DOT GENERATE_COMPLETION",
    "member_access : builtin_types DOT IDENTIFIER GENERATE_COMPLETION",
    "invocation_expression : primary_expression open_parens_any opt_argument_list close_parens",
    "invocation_expression : primary_expression open_parens_any argument_list error",
    "invocation_expression : primary_expression open_parens_any error",
    "opt_object_or_collection_initializer :",
    "opt_object_or_collection_initializer : object_or_collection_initializer",
    "object_or_collection_initializer : OPEN_BRACE opt_member_initializer_list close_brace_or_complete_completion",
    "object_or_collection_initializer : OPEN_BRACE member_initializer_list COMMA CLOSE_BRACE",
    "opt_member_initializer_list :",
    "opt_member_initializer_list : member_initializer_list",
    "member_initializer_list : member_initializer",
    "member_initializer_list : member_initializer_list COMMA member_initializer",
    "member_initializer_list : member_initializer_list error",
    "member_initializer : IDENTIFIER ASSIGN initializer_value",
    "member_initializer : AWAIT ASSIGN initializer_value",
    "member_initializer : GENERATE_COMPLETION",
    "member_initializer : non_assignment_expression opt_COMPLETE_COMPLETION",
    "member_initializer : OPEN_BRACE expression_list CLOSE_BRACE",
    "member_initializer : OPEN_BRACKET_EXPR argument_list CLOSE_BRACKET ASSIGN initializer_value",
    "member_initializer : OPEN_BRACE CLOSE_BRACE",
    "initializer_value : expression",
    "initializer_value : object_or_collection_initializer",
    "opt_argument_list :",
    "opt_argument_list : argument_list",
    "argument_list : argument_or_named_argument",
    "argument_list : argument_list COMMA argument",
    "argument_list : argument_list COMMA named_argument",
    "argument_list : argument_list COMMA error",
    "argument_list : COMMA error",
    "argument : expression",
    "argument : non_simple_argument",
    "argument_or_named_argument : argument",
    "argument_or_named_argument : named_argument",
    "non_simple_argument : REF variable_reference",
    "non_simple_argument : REF declaration_expression",
    "non_simple_argument : OUT variable_reference",
    "non_simple_argument : OUT declaration_expression",
    "non_simple_argument : ARGLIST OPEN_PARENS argument_list CLOSE_PARENS",
    "non_simple_argument : ARGLIST OPEN_PARENS CLOSE_PARENS",
    "declaration_expression : OPEN_PARENS declaration_expression CLOSE_PARENS",
    "declaration_expression : variable_type identifier_inside_body",
    "declaration_expression : variable_type identifier_inside_body ASSIGN expression",
    "variable_reference : expression",
    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
    "element_access : primary_expression INTERR_OPERATOR OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments error",
    "element_access : primary_expression OPEN_BRACKET_EXPR error",
    "expression_list : expression_or_error",
    "expression_list : expression_list COMMA expression_or_error",
    "expression_list_arguments : expression_list_argument",
    "expression_list_arguments : expression_list_arguments COMMA expression_list_argument",
    "expression_list_argument : expression",
    "expression_list_argument : named_argument",
    "this_access : THIS",
    "base_access : BASE OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
    "base_access : BASE OPEN_BRACKET error",
    "post_increment_expression : primary_expression OP_INC",
    "post_decrement_expression : primary_expression OP_DEC",
    "object_or_delegate_creation_expression : NEW new_expr_type open_parens_any opt_argument_list CLOSE_PARENS opt_object_or_collection_initializer",
    "object_or_delegate_creation_expression : NEW new_expr_type object_or_collection_initializer",
    "array_creation_expression : NEW new_expr_type OPEN_BRACKET_EXPR expression_list CLOSE_BRACKET opt_rank_specifier opt_array_initializer",
    "array_creation_expression : NEW new_expr_type rank_specifiers opt_array_initializer",
    "array_creation_expression : NEW rank_specifier array_initializer",
    "array_creation_expression : NEW new_expr_type OPEN_BRACKET CLOSE_BRACKET OPEN_BRACKET_EXPR error CLOSE_BRACKET",
    "array_creation_expression : NEW new_expr_type error",
    "$$80 :",
    "new_expr_type : $$80 simple_type",
    "anonymous_type_expression : NEW OPEN_BRACE anonymous_type_parameters_opt_comma CLOSE_BRACE",
    "anonymous_type_expression : NEW OPEN_BRACE GENERATE_COMPLETION",
    "anonymous_type_parameters_opt_comma : anonymous_type_parameters_opt",
    "anonymous_type_parameters_opt_comma : anonymous_type_parameters COMMA",
    "anonymous_type_parameters_opt :",
    "anonymous_type_parameters_opt : anonymous_type_parameters",
    "anonymous_type_parameters : anonymous_type_parameter",
    "anonymous_type_parameters : anonymous_type_parameters COMMA anonymous_type_parameter",
    "anonymous_type_parameters : COMPLETE_COMPLETION",
    "anonymous_type_parameters : anonymous_type_parameter COMPLETE_COMPLETION",
    "anonymous_type_parameter : identifier_inside_body ASSIGN variable_initializer",
    "anonymous_type_parameter : identifier_inside_body",
    "anonymous_type_parameter : member_access",
    "anonymous_type_parameter : error",
    "opt_rank_specifier :",
    "opt_rank_specifier : rank_specifiers",
    "rank_specifiers : rank_specifier",
    "rank_specifiers : rank_specifier rank_specifiers",
    "rank_specifier : OPEN_BRACKET CLOSE_BRACKET",
    "rank_specifier : OPEN_BRACKET dim_separators CLOSE_BRACKET",
    "dim_separators : COMMA",
    "dim_separators : dim_separators COMMA",
    "opt_array_initializer :",
    "opt_array_initializer : array_initializer",
    "array_initializer : OPEN_BRACE CLOSE_BRACE",
    "array_initializer : OPEN_BRACE variable_initializer_list opt_comma CLOSE_BRACE",
    "variable_initializer_list : variable_initializer",
    "variable_initializer_list : variable_initializer_list COMMA variable_initializer",
    "typeof_expression : TYPEOF open_parens_any typeof_type_expression CLOSE_PARENS",
    "typeof_type_expression : type_and_void",
    "typeof_type_expression : error",
    "generic_dimension : GENERIC_DIMENSION",
    "qualified_alias_member : IDENTIFIER DOUBLE_COLON",
    "sizeof_expression : SIZEOF open_parens_any type CLOSE_PARENS",
    "sizeof_expression : SIZEOF open_parens_any type error",
    "checked_expression : CHECKED open_parens_any expression CLOSE_PARENS",
    "checked_expression : CHECKED error",
    "unchecked_expression : UNCHECKED open_parens_any expression CLOSE_PARENS",
    "unchecked_expression : UNCHECKED error",
    "pointer_member_access : primary_expression OP_PTR IDENTIFIER opt_type_argument_list",
    "$$81 :",
    "anonymous_method_expression : DELEGATE opt_anonymous_method_signature $$81 block",
    "$$82 :",
    "anonymous_method_expression : ASYNC DELEGATE opt_anonymous_method_signature $$82 block",
    "opt_anonymous_method_signature :",
    "opt_anonymous_method_signature : anonymous_method_signature",
    "$$83 :",
    "anonymous_method_signature : OPEN_PARENS $$83 opt_formal_parameter_list CLOSE_PARENS",
    "default_value_expression : DEFAULT open_parens_any type CLOSE_PARENS",
    "unary_expression : primary_expression",
    "unary_expression : BANG prefixed_unary_expression",
    "unary_expression : TILDE prefixed_unary_expression",
    "unary_expression : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
    "unary_expression : AWAIT prefixed_unary_expression",
    "unary_expression : BANG error",
    "unary_expression : TILDE error",
    "unary_expression : OPEN_PARENS_CAST type CLOSE_PARENS error",
    "unary_expression : AWAIT error",
    "prefixed_unary_expression : unary_expression",
    "prefixed_unary_expression : PLUS prefixed_unary_expression",
    "prefixed_unary_expression : MINUS prefixed_unary_expression",
    "prefixed_unary_expression : OP_INC prefixed_unary_expression",
    "prefixed_unary_expression : OP_DEC prefixed_unary_expression",
    "prefixed_unary_expression : STAR prefixed_unary_expression",
    "prefixed_unary_expression : BITWISE_AND prefixed_unary_expression",
    "prefixed_unary_expression : PLUS error",
    "prefixed_unary_expression : MINUS error",
    "prefixed_unary_expression : OP_INC error",
    "prefixed_unary_expression : OP_DEC error",
    "prefixed_unary_expression : STAR error",
    "prefixed_unary_expression : BITWISE_AND error",
    "multiplicative_expression : prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression STAR prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression DIV prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression PERCENT prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression STAR error",
    "multiplicative_expression : multiplicative_expression DIV error",
    "multiplicative_expression : multiplicative_expression PERCENT error",
    "additive_expression : multiplicative_expression",
    "additive_expression : additive_expression PLUS multiplicative_expression",
    "additive_expression : additive_expression MINUS multiplicative_expression",
    "additive_expression : additive_expression PLUS error",
    "additive_expression : additive_expression MINUS error",
    "additive_expression : additive_expression AS type",
    "additive_expression : additive_expression IS pattern_type_expr opt_identifier",
    "additive_expression : additive_expression IS pattern_expr",
    "additive_expression : additive_expression AS error",
    "additive_expression : additive_expression IS error",
    "additive_expression : AWAIT IS type",
    "additive_expression : AWAIT AS type",
    "pattern_type_expr : variable_type",
    "pattern_expr : literal",
    "pattern_expr : PLUS prefixed_unary_expression",
    "pattern_expr : MINUS prefixed_unary_expression",
    "pattern_expr : sizeof_expression",
    "pattern_expr : default_value_expression",
    "pattern_expr : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
    "pattern_expr : STAR",
    "pattern_expr : pattern_expr_invocation",
    "pattern_expr : pattern_property",
    "pattern_expr_invocation : type_name_expression OPEN_PARENS opt_pattern_list CLOSE_PARENS",
    "pattern_property : type_name_expression OPEN_BRACE pattern_property_list CLOSE_BRACE",
    "pattern_property_list : pattern_property_entry",
    "pattern_property_list : pattern_property_list COMMA pattern_property_entry",
    "pattern_property_entry : identifier_inside_body IS pattern",
    "pattern : pattern_expr",
    "pattern : pattern_type_expr opt_identifier",
    "opt_pattern_list :",
    "opt_pattern_list : pattern_list",
    "pattern_list : pattern_argument",
    "pattern_list : pattern_list COMMA pattern_argument",
    "pattern_argument : pattern",
    "pattern_argument : IDENTIFIER COLON pattern",
    "shift_expression : additive_expression",
    "shift_expression : shift_expression OP_SHIFT_LEFT additive_expression",
    "shift_expression : shift_expression OP_SHIFT_RIGHT additive_expression",
    "shift_expression : shift_expression OP_SHIFT_LEFT error",
    "shift_expression : shift_expression OP_SHIFT_RIGHT error",
    "relational_expression : shift_expression",
    "relational_expression : relational_expression OP_LT shift_expression",
    "relational_expression : relational_expression OP_GT shift_expression",
    "relational_expression : relational_expression OP_LE shift_expression",
    "relational_expression : relational_expression OP_GE shift_expression",
    "relational_expression : relational_expression OP_LT error",
    "relational_expression : relational_expression OP_GT error",
    "relational_expression : relational_expression OP_LE error",
    "relational_expression : relational_expression OP_GE error",
    "equality_expression : relational_expression",
    "equality_expression : equality_expression OP_EQ relational_expression",
    "equality_expression : equality_expression OP_NE relational_expression",
    "equality_expression : equality_expression OP_EQ error",
    "equality_expression : equality_expression OP_NE error",
    "and_expression : equality_expression",
    "and_expression : and_expression BITWISE_AND equality_expression",
    "and_expression : and_expression BITWISE_AND error",
    "exclusive_or_expression : and_expression",
    "exclusive_or_expression : exclusive_or_expression CARRET and_expression",
    "exclusive_or_expression : exclusive_or_expression CARRET error",
    "inclusive_or_expression : exclusive_or_expression",
    "inclusive_or_expression : inclusive_or_expression BITWISE_OR exclusive_or_expression",
    "inclusive_or_expression : inclusive_or_expression BITWISE_OR error",
    "conditional_and_expression : inclusive_or_expression",
    "conditional_and_expression : conditional_and_expression OP_AND inclusive_or_expression",
    "conditional_and_expression : conditional_and_expression OP_AND error",
    "conditional_or_expression : conditional_and_expression",
    "conditional_or_expression : conditional_or_expression OP_OR conditional_and_expression",
    "conditional_or_expression : conditional_or_expression OP_OR error",
    "null_coalescing_expression : conditional_or_expression",
    "null_coalescing_expression : conditional_or_expression OP_COALESCING null_coalescing_expression",
    "conditional_expression : null_coalescing_expression",
    "conditional_expression : null_coalescing_expression INTERR expression COLON expression",
    "conditional_expression : null_coalescing_expression INTERR expression error",
    "conditional_expression : null_coalescing_expression INTERR expression COLON error",
    "conditional_expression : null_coalescing_expression INTERR expression COLON CLOSE_BRACE",
    "assignment_expression : prefixed_unary_expression ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_MULT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_DIV_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_MOD_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_ADD_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SUB_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SHIFT_LEFT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SHIFT_RIGHT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_AND_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_OR_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_XOR_ASSIGN expression",
    "lambda_parameter_list : lambda_parameter",
    "lambda_parameter_list : lambda_parameter_list COMMA lambda_parameter",
    "lambda_parameter : parameter_modifier parameter_type identifier_inside_body",
    "lambda_parameter : parameter_type identifier_inside_body",
    "lambda_parameter : IDENTIFIER",
    "lambda_parameter : AWAIT",
    "opt_lambda_parameter_list :",
    "opt_lambda_parameter_list : lambda_parameter_list",
    "$$84 :",
    "lambda_expression_body : $$84 expression",
    "lambda_expression_body : block",
    "lambda_expression_body : error",
    "expression_or_error : expression",
    "expression_or_error : error",
    "$$85 :",
    "lambda_expression : IDENTIFIER ARROW $$85 lambda_expression_body",
    "$$86 :",
    "lambda_expression : AWAIT ARROW $$86 lambda_expression_body",
    "$$87 :",
    "lambda_expression : ASYNC identifier_inside_body ARROW $$87 lambda_expression_body",
    "$$88 :",
    "$$89 :",
    "lambda_expression : OPEN_PARENS_LAMBDA $$88 opt_lambda_parameter_list CLOSE_PARENS ARROW $$89 lambda_expression_body",
    "$$90 :",
    "$$91 :",
    "lambda_expression : ASYNC OPEN_PARENS_LAMBDA $$90 opt_lambda_parameter_list CLOSE_PARENS ARROW $$91 lambda_expression_body",
    "expression : assignment_expression",
    "expression : non_assignment_expression",
    "non_assignment_expression : conditional_expression",
    "non_assignment_expression : lambda_expression",
    "non_assignment_expression : query_expression",
    "non_assignment_expression : ARGLIST",
    "undocumented_expressions : REFVALUE OPEN_PARENS non_assignment_expression COMMA type CLOSE_PARENS",
    "undocumented_expressions : REFTYPE open_parens_any expression CLOSE_PARENS",
    "undocumented_expressions : MAKEREF open_parens_any expression CLOSE_PARENS",
    "constant_expression : expression",
    "boolean_expression : expression",
    "opt_primary_parameters :",
    "opt_primary_parameters : primary_parameters",
    "primary_parameters : OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
    "opt_primary_parameters_with_class_base :",
    "opt_primary_parameters_with_class_base : class_base",
    "opt_primary_parameters_with_class_base : primary_parameters",
    "opt_primary_parameters_with_class_base : primary_parameters class_base",
    "$$92 :",
    "opt_primary_parameters_with_class_base : primary_parameters class_base OPEN_PARENS $$92 opt_argument_list CLOSE_PARENS",
    "class_or_component : CLASS",
    "class_or_component : COMPONENT",
    "$$93 :",
    "$$94 :",
    "$$95 :",
    "$$96 :",
    "class_declaration : opt_attributes opt_modifiers opt_partial class_or_component $$93 type_declaration_name $$94 opt_primary_parameters_with_class_base opt_type_parameter_constraints_clauses $$95 OPEN_BRACE opt_class_member_declarations CLOSE_BRACE $$96 opt_semicolon",
    "opt_partial :",
    "opt_partial : PARTIAL",
    "opt_modifiers :",
    "opt_modifiers : modifiers",
    "modifiers : modifier",
    "modifiers : modifiers modifier",
    "modifier : NEW",
    "modifier : PUBLIC",
    "modifier : PROTECTED",
    "modifier : INTERNAL",
    "modifier : PRIVATE",
    "modifier : ABSTRACT",
    "modifier : SEALED",
    "modifier : STATIC",
    "modifier : READONLY",
    "modifier : VIRTUAL",
    "modifier : OVERRIDE",
    "modifier : EXTERN",
    "modifier : VOLATILE",
    "modifier : UNSAFE",
    "modifier : ASYNC",
    "modifier : IN",
    "modifier : OUT",
    "opt_class_base :",
    "opt_class_base : class_base",
    "class_base : COLON type_list",
    "class_base : COLON type_list error",
    "opt_type_parameter_constraints_clauses :",
    "opt_type_parameter_constraints_clauses : type_parameter_constraints_clauses",
    "type_parameter_constraints_clauses : type_parameter_constraints_clause",
    "type_parameter_constraints_clauses : type_parameter_constraints_clauses type_parameter_constraints_clause",
    "type_parameter_constraints_clause : WHERE IDENTIFIER COLON type_parameter_constraints",
    "type_parameter_constraints_clause : WHERE IDENTIFIER error",
    "type_parameter_constraints : type_parameter_constraint",
    "type_parameter_constraints : type_parameter_constraints COMMA type_parameter_constraint",
    "type_parameter_constraint : type",
    "type_parameter_constraint : NEW OPEN_PARENS CLOSE_PARENS",
    "type_parameter_constraint : CLASS",
    "type_parameter_constraint : STRUCT",
    "opt_type_parameter_variance :",
    "opt_type_parameter_variance : type_parameter_variance",
    "type_parameter_variance : OUT",
    "type_parameter_variance : IN",
    "$$97 :",
    "block : OPEN_BRACE $$97 opt_statement_list block_end",
    "block_end : CLOSE_BRACE",
    "block_end : COMPLETE_COMPLETION",
    "$$98 :",
    "block_prepared : OPEN_BRACE $$98 opt_statement_list CLOSE_BRACE",
    "opt_statement_list :",
    "opt_statement_list : statement_list",
    "statement_list : statement",
    "statement_list : statement_list statement",
    "statement : block_variable_declaration",
    "statement : valid_declaration_statement",
    "statement : labeled_statement",
    "statement : error",
    "interactive_statement_list : interactive_statement",
    "interactive_statement_list : interactive_statement_list interactive_statement",
    "interactive_statement : block_variable_declaration",
    "interactive_statement : interactive_valid_declaration_statement",
    "interactive_statement : labeled_statement",
    "valid_declaration_statement : block",
    "valid_declaration_statement : empty_statement",
    "valid_declaration_statement : expression_statement",
    "valid_declaration_statement : selection_statement",
    "valid_declaration_statement : iteration_statement",
    "valid_declaration_statement : jump_statement",
    "valid_declaration_statement : try_statement",
    "valid_declaration_statement : checked_statement",
    "valid_declaration_statement : unchecked_statement",
    "valid_declaration_statement : lock_statement",
    "valid_declaration_statement : using_statement",
    "valid_declaration_statement : unsafe_statement",
    "valid_declaration_statement : fixed_statement",
    "valid_declaration_statement : connect_statement",
    "valid_declaration_statement : disconnect_statement",
    "valid_declaration_statement : attach_statement",
    "valid_declaration_statement : detach_statement",
    "valid_declaration_statement : embed_statement",
    "interactive_valid_declaration_statement : block",
    "interactive_valid_declaration_statement : empty_statement",
    "interactive_valid_declaration_statement : interactive_expression_statement",
    "interactive_valid_declaration_statement : selection_statement",
    "interactive_valid_declaration_statement : iteration_statement",
    "interactive_valid_declaration_statement : jump_statement",
    "interactive_valid_declaration_statement : try_statement",
    "interactive_valid_declaration_statement : checked_statement",
    "interactive_valid_declaration_statement : unchecked_statement",
    "interactive_valid_declaration_statement : lock_statement",
    "interactive_valid_declaration_statement : using_statement",
    "interactive_valid_declaration_statement : unsafe_statement",
    "interactive_valid_declaration_statement : fixed_statement",
    "interactive_valid_declaration_statement : connect_statement",
    "interactive_valid_declaration_statement : disconnect_statement",
    "interactive_valid_declaration_statement : attach_statement",
    "interactive_valid_declaration_statement : detach_statement",
    "interactive_valid_declaration_statement : embed_statement",
    "embedded_statement : valid_declaration_statement",
    "embedded_statement : block_variable_declaration",
    "embedded_statement : labeled_statement",
    "embedded_statement : error",
    "empty_statement : SEMICOLON",
    "$$99 :",
    "labeled_statement : identifier_inside_body COLON $$99 statement",
    "variable_type : variable_type_simple",
    "variable_type : variable_type_simple rank_specifiers",
    "variable_type_simple : type_name_expression opt_nullable",
    "variable_type_simple : type_name_expression pointer_stars",
    "variable_type_simple : builtin_type_expression",
    "variable_type_simple : void_invalid",
    "pointer_stars : pointer_star",
    "pointer_stars : pointer_star pointer_stars",
    "pointer_star : STAR",
    "identifier_inside_body : IDENTIFIER",
    "identifier_inside_body : AWAIT",
    "$$100 :",
    "block_variable_declaration : variable_type identifier_inside_body $$100 opt_local_variable_initializer opt_variable_declarators SEMICOLON",
    "$$101 :",
    "block_variable_declaration : CONST variable_type identifier_inside_body $$101 const_variable_initializer opt_const_declarators SEMICOLON",
    "opt_local_variable_initializer :",
    "opt_local_variable_initializer : ASSIGN block_variable_initializer",
    "opt_local_variable_initializer : error",
    "opt_variable_declarators :",
    "opt_variable_declarators : variable_declarators",
    "opt_using_or_fixed_variable_declarators :",
    "opt_using_or_fixed_variable_declarators : variable_declarators",
    "variable_declarators : variable_declarator",
    "variable_declarators : variable_declarators variable_declarator",
    "variable_declarator : COMMA identifier_inside_body",
    "variable_declarator : COMMA identifier_inside_body ASSIGN block_variable_initializer",
    "const_variable_initializer :",
    "const_variable_initializer : ASSIGN constant_initializer_expr",
    "opt_const_declarators :",
    "opt_const_declarators : const_declarators",
    "const_declarators : const_declarator",
    "const_declarators : const_declarators const_declarator",
    "const_declarator : COMMA identifier_inside_body ASSIGN constant_initializer_expr",
    "block_variable_initializer : variable_initializer",
    "block_variable_initializer : STACKALLOC simple_type OPEN_BRACKET_EXPR expression CLOSE_BRACKET",
    "block_variable_initializer : STACKALLOC simple_type",
    "expression_statement : statement_expression SEMICOLON",
    "expression_statement : statement_expression COMPLETE_COMPLETION",
    "expression_statement : statement_expression CLOSE_BRACE",
    "interactive_expression_statement : interactive_statement_expression SEMICOLON",
    "interactive_expression_statement : interactive_statement_expression COMPLETE_COMPLETION",
    "statement_expression : expression",
    "interactive_statement_expression : expression",
    "interactive_statement_expression : error",
    "selection_statement : if_statement",
    "selection_statement : switch_statement",
    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement ELSE embedded_statement",
    "if_statement : IF open_parens_any boolean_expression error",
    "$$102 :",
    "switch_statement : SWITCH open_parens_any expression CLOSE_PARENS OPEN_BRACE $$102 opt_switch_sections CLOSE_BRACE",
    "switch_statement : SWITCH open_parens_any expression error",
    "opt_switch_sections :",
    "opt_switch_sections : switch_sections",
    "switch_sections : switch_section",
    "switch_sections : switch_sections switch_section",
    "switch_sections : error",
    "switch_section : switch_labels statement_list",
    "switch_labels : switch_label",
    "switch_labels : switch_labels switch_label",
    "switch_label : CASE constant_expression COLON",
    "switch_label : CASE constant_expression error",
    "switch_label : DEFAULT_COLON",
    "iteration_statement : while_statement",
    "iteration_statement : do_statement",
    "iteration_statement : for_statement",
    "iteration_statement : foreach_statement",
    "while_statement : WHILE open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
    "while_statement : WHILE open_parens_any boolean_expression error",
    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression CLOSE_PARENS SEMICOLON",
    "do_statement : DO embedded_statement error",
    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression error",
    "$$103 :",
    "for_statement : FOR open_parens_any $$103 for_statement_cont",
    "$$104 :",
    "for_statement_cont : opt_for_initializer SEMICOLON $$104 for_condition_and_iterator_part embedded_statement",
    "for_statement_cont : error",
    "$$105 :",
    "for_condition_and_iterator_part : opt_for_condition SEMICOLON $$105 for_iterator_part",
    "for_condition_and_iterator_part : opt_for_condition close_parens_close_brace",
    "for_iterator_part : opt_for_iterator CLOSE_PARENS",
    "for_iterator_part : opt_for_iterator CLOSE_BRACE",
    "close_parens_close_brace : CLOSE_PARENS",
    "close_parens_close_brace : CLOSE_BRACE",
    "opt_for_initializer :",
    "opt_for_initializer : for_initializer",
    "$$106 :",
    "for_initializer : variable_type identifier_inside_body $$106 opt_local_variable_initializer opt_variable_declarators",
    "for_initializer : statement_expression_list",
    "opt_for_condition :",
    "opt_for_condition : boolean_expression",
    "opt_for_iterator :",
    "opt_for_iterator : for_iterator",
    "for_iterator : statement_expression_list",
    "statement_expression_list : statement_expression",
    "statement_expression_list : statement_expression_list COMMA statement_expression",
    "foreach_statement : FOREACH open_parens_any type error",
    "foreach_statement : FOREACH open_parens_any type identifier_inside_body error",
    "$$107 :",
    "foreach_statement : FOREACH open_parens_any type identifier_inside_body IN expression CLOSE_PARENS $$107 embedded_statement",
    "jump_statement : break_statement",
    "jump_statement : continue_statement",
    "jump_statement : goto_statement",
    "jump_statement : return_statement",
    "jump_statement : throw_statement",
    "jump_statement : yield_statement",
    "break_statement : BREAK SEMICOLON",
    "continue_statement : CONTINUE SEMICOLON",
    "continue_statement : CONTINUE error",
    "goto_statement : GOTO identifier_inside_body SEMICOLON",
    "goto_statement : GOTO CASE constant_expression SEMICOLON",
    "goto_statement : GOTO DEFAULT SEMICOLON",
    "return_statement : RETURN opt_expression SEMICOLON",
    "return_statement : RETURN expression error",
    "return_statement : RETURN error",
    "throw_statement : THROW opt_expression SEMICOLON",
    "throw_statement : THROW expression error",
    "throw_statement : THROW error",
    "yield_statement : identifier_inside_body RETURN opt_expression SEMICOLON",
    "yield_statement : identifier_inside_body RETURN expression error",
    "yield_statement : identifier_inside_body BREAK SEMICOLON",
    "opt_expression :",
    "opt_expression : expression",
    "try_statement : TRY block catch_clauses",
    "try_statement : TRY block FINALLY block",
    "try_statement : TRY block catch_clauses FINALLY block",
    "try_statement : TRY block error",
    "catch_clauses : catch_clause",
    "catch_clauses : catch_clauses catch_clause",
    "opt_identifier :",
    "opt_identifier : identifier_inside_body",
    "catch_clause : CATCH opt_catch_filter block",
    "$$108 :",
    "catch_clause : CATCH open_parens_any type opt_identifier CLOSE_PARENS $$108 opt_catch_filter_or_error",
    "catch_clause : CATCH open_parens_any error",
    "opt_catch_filter_or_error : opt_catch_filter block_prepared",
    "opt_catch_filter_or_error : error",
    "opt_catch_filter :",
    "$$109 :",
    "opt_catch_filter : WHEN $$109 open_parens_any expression CLOSE_PARENS",
    "checked_statement : CHECKED block",
    "unchecked_statement : UNCHECKED block",
    "$$110 :",
    "unsafe_statement : UNSAFE $$110 block",
    "lock_statement : LOCK open_parens_any expression CLOSE_PARENS embedded_statement",
    "lock_statement : LOCK open_parens_any expression error",
    "$$111 :",
    "$$112 :",
    "fixed_statement : FIXED open_parens_any variable_type identifier_inside_body $$111 using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators CLOSE_PARENS $$112 embedded_statement",
    "$$113 :",
    "$$114 :",
    "using_statement : USING open_parens_any variable_type identifier_inside_body $$113 using_initialization CLOSE_PARENS $$114 embedded_statement",
    "using_statement : USING open_parens_any expression CLOSE_PARENS embedded_statement",
    "using_statement : USING open_parens_any expression error",
    "using_initialization : using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators",
    "using_initialization : error",
    "using_or_fixed_variable_initializer :",
    "using_or_fixed_variable_initializer : ASSIGN variable_initializer",
    "query_expression : first_from_clause query_body",
    "query_expression : nested_from_clause query_body",
    "query_expression : first_from_clause COMPLETE_COMPLETION",
    "query_expression : nested_from_clause COMPLETE_COMPLETION",
    "first_from_clause : FROM_FIRST identifier_inside_body IN expression",
    "first_from_clause : FROM_FIRST type identifier_inside_body IN expression",
    "nested_from_clause : FROM identifier_inside_body IN expression",
    "nested_from_clause : FROM type identifier_inside_body IN expression",
    "$$115 :",
    "from_clause : FROM identifier_inside_body IN $$115 expression_or_error",
    "$$116 :",
    "from_clause : FROM type identifier_inside_body IN $$116 expression_or_error",
    "query_body : query_body_clauses select_or_group_clause opt_query_continuation",
    "query_body : select_or_group_clause opt_query_continuation",
    "query_body : query_body_clauses COMPLETE_COMPLETION",
    "query_body : query_body_clauses error",
    "query_body : error",
    "$$117 :",
    "select_or_group_clause : SELECT $$117 expression_or_error",
    "$$118 :",
    "$$119 :",
    "select_or_group_clause : GROUP $$118 expression_or_error $$119 by_expression",
    "by_expression : BY expression_or_error",
    "by_expression : error",
    "query_body_clauses : query_body_clause",
    "query_body_clauses : query_body_clauses query_body_clause",
    "query_body_clause : from_clause",
    "query_body_clause : let_clause",
    "query_body_clause : where_clause",
    "query_body_clause : join_clause",
    "query_body_clause : orderby_clause",
    "$$120 :",
    "let_clause : LET identifier_inside_body ASSIGN $$120 expression_or_error",
    "$$121 :",
    "where_clause : WHERE $$121 expression_or_error",
    "$$122 :",
    "$$123 :",
    "$$124 :",
    "join_clause : JOIN identifier_inside_body IN $$122 expression_or_error ON $$123 expression_or_error EQUALS $$124 expression_or_error opt_join_into",
    "$$125 :",
    "$$126 :",
    "$$127 :",
    "join_clause : JOIN type identifier_inside_body IN $$125 expression_or_error ON $$126 expression_or_error EQUALS $$127 expression_or_error opt_join_into",
    "opt_join_into :",
    "opt_join_into : INTO identifier_inside_body",
    "$$128 :",
    "orderby_clause : ORDERBY $$128 orderings",
    "orderings : order_by",
    "$$129 :",
    "orderings : order_by COMMA $$129 orderings_then_by",
    "orderings_then_by : then_by",
    "$$130 :",
    "orderings_then_by : orderings_then_by COMMA $$130 then_by",
    "order_by : expression",
    "order_by : expression ASCENDING",
    "order_by : expression DESCENDING",
    "then_by : expression",
    "then_by : expression ASCENDING",
    "then_by : expression DESCENDING",
    "opt_query_continuation :",
    "$$131 :",
    "opt_query_continuation : INTO identifier_inside_body $$131 query_body",
    "interactive_parsing : EVAL_STATEMENT_PARSER EOF",
    "interactive_parsing : EVAL_USING_DECLARATIONS_UNIT_PARSER using_directives opt_COMPLETE_COMPLETION",
    "$$132 :",
    "interactive_parsing : EVAL_STATEMENT_PARSER $$132 interactive_statement_list opt_COMPLETE_COMPLETION",
    "interactive_parsing : EVAL_COMPILATION_UNIT_PARSER interactive_compilation_unit",
    "interactive_compilation_unit : opt_extern_alias_directives opt_using_directives",
    "interactive_compilation_unit : opt_extern_alias_directives opt_using_directives namespace_or_type_declarations",
    "opt_COMPLETE_COMPLETION :",
    "opt_COMPLETE_COMPLETION : COMPLETE_COMPLETION",
    "close_brace_or_complete_completion : CLOSE_BRACE",
    "close_brace_or_complete_completion : COMPLETE_COMPLETION",
    "documentation_parsing : DOC_SEE doc_cref",
    "doc_cref : doc_type_declaration_name opt_doc_method_sig",
    "doc_cref : builtin_types opt_doc_method_sig",
    "doc_cref : VOID opt_doc_method_sig",
    "doc_cref : builtin_types DOT IDENTIFIER opt_doc_method_sig",
    "doc_cref : doc_type_declaration_name DOT THIS",
    "$$133 :",
    "doc_cref : doc_type_declaration_name DOT THIS OPEN_BRACKET $$133 opt_doc_parameters CLOSE_BRACKET",
    "doc_cref : EXPLICIT OPERATOR type opt_doc_method_sig",
    "doc_cref : IMPLICIT OPERATOR type opt_doc_method_sig",
    "doc_cref : OPERATOR overloadable_operator opt_doc_method_sig",
    "doc_type_declaration_name : type_declaration_name",
    "doc_type_declaration_name : doc_type_declaration_name DOT type_declaration_name",
    "opt_doc_method_sig :",
    "$$134 :",
    "opt_doc_method_sig : OPEN_PARENS $$134 opt_doc_parameters CLOSE_PARENS",
    "opt_doc_parameters :",
    "opt_doc_parameters : doc_parameters",
    "doc_parameters : doc_parameter",
    "doc_parameters : doc_parameters COMMA doc_parameter",
    "doc_parameter : opt_parameter_modifier parameter_type",
  };
 public static string getRule (int index) {
    return yyRule [index];
 }
}
  protected static readonly string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"EOF","NONE","ERROR","COMPONENT",
    "PORT","CONNECT","DISCONNECT","MULTIPORT","WITH","ATTACH","DETACH",
    "EMBED","FIRST_KEYWORD","ABSTRACT","AS","ADD","BASE","BOOL","BREAK",
    "BYTE","CASE","CATCH","CHAR","CHECKED","CLASS","CONST","CONTINUE",
    "DECIMAL","DEFAULT","DELEGATE","DO","DOUBLE","ELSE","ENUM","EVENT",
    "EXPLICIT","EXTERN","FALSE","FINALLY","FIXED","FLOAT","FOR","FOREACH",
    "GOTO","IF","IMPLICIT","IN","INT","INTERFACE","INTERNAL","IS","LOCK",
    "LONG","NAMESPACE","NEW","NULL","OBJECT","OPERATOR","OUT","OVERRIDE",
    "PARAMS","PRIVATE","PROTECTED","PUBLIC","READONLY","REF","RETURN",
    "REMOVE","SBYTE","SEALED","SHORT","SIZEOF","STACKALLOC","STATIC",
    "STRING","STRUCT","SWITCH","THIS","THROW","TRUE","TRY","TYPEOF",
    "UINT","ULONG","UNCHECKED","UNSAFE","USHORT","USING","VIRTUAL","VOID",
    "VOLATILE","WHERE","WHILE","ARGLIST","PARTIAL","ARROW","FROM",
    "FROM_FIRST","JOIN","ON","EQUALS","SELECT","GROUP","BY","LET",
    "ORDERBY","ASCENDING","DESCENDING","INTO","INTERR_NULLABLE",
    "EXTERN_ALIAS","REFVALUE","REFTYPE","MAKEREF","ASYNC","AWAIT",
    "INTERR_OPERATOR","WHEN","INTERPOLATED_STRING",
    "INTERPOLATED_STRING_END","GET","SET","LAST_KEYWORD","OPEN_BRACE",
    "CLOSE_BRACE","OPEN_BRACKET","CLOSE_BRACKET","OPEN_PARENS",
    "CLOSE_PARENS","DOT","COMMA","COLON","SEMICOLON","TILDE","PLUS",
    "MINUS","BANG","ASSIGN","OP_LT","OP_GT","BITWISE_AND","BITWISE_OR",
    "STAR","PERCENT","DIV","CARRET","INTERR","DOUBLE_COLON","OP_INC",
    "OP_DEC","OP_SHIFT_LEFT","OP_SHIFT_RIGHT","OP_LE","OP_GE","OP_EQ",
    "OP_NE","OP_AND","OP_OR","OP_MULT_ASSIGN","OP_DIV_ASSIGN",
    "OP_MOD_ASSIGN","OP_ADD_ASSIGN","OP_SUB_ASSIGN",
    "OP_SHIFT_LEFT_ASSIGN","OP_SHIFT_RIGHT_ASSIGN","OP_AND_ASSIGN",
    "OP_XOR_ASSIGN","OP_OR_ASSIGN","OP_PTR","OP_COALESCING",
    "OP_GENERICS_LT","OP_GENERICS_LT_DECL","OP_GENERICS_GT","LITERAL",
    "IDENTIFIER","OPEN_PARENS_LAMBDA","OPEN_PARENS_CAST",
    "GENERIC_DIMENSION","DEFAULT_COLON","OPEN_BRACKET_EXPR",
    "EVAL_STATEMENT_PARSER","EVAL_COMPILATION_UNIT_PARSER",
    "EVAL_USING_DECLARATIONS_UNIT_PARSER","DOC_SEE","GENERATE_COMPLETION",
    "COMPLETE_COMPLETION","UMINUS",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
  public static string yyname (int token) {
    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
    string name;
    if ((name = yyNames[token]) != null) return name;
    return "[unknown]";
  }

#pragma warning disable 414
  int yyExpectingState;
#pragma warning restore 414
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

	static int[] global_yyStates;
	static object[] global_yyVals;
#pragma warning disable 649
	protected bool use_global_stacks;
#pragma warning restore 649
	object[] yyVals;					// value stack
	object yyVal;						// value stack ptr
	int yyToken;						// current input
	int yyTop;

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;		// initial size
    int yyState = 0;                   // state stack ptr
    int [] yyStates;               	// state stack 
    yyVal = null;
    yyToken = -1;
    int yyErrorFlag = 0;				// #tks to shift
	if (use_global_stacks && global_yyStates != null) {
		yyVals = global_yyVals;
		yyStates = global_yyStates;
   } else {
		yyVals = new object [yyMax];
		yyStates = new int [yyMax];
		if (use_global_stacks) {
			global_yyVals = yyVals;
			global_yyStates = yyStates;
		}
	}

    /*yyLoop:*/ for (yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        global::System.Array.Resize (ref yyStates, yyStates.Length+yyMax);
        global::System.Array.Resize (ref yyVals, yyVals.Length+yyMax);
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ while (true) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (debug != null)
              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
            if (debug != null)
              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
                  if (debug != null)
                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
              if (debug != null)
                debug.discard(yyState, yyToken, yyname(yyToken),
  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
        if (debug != null)
          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyV > yyTop ? null : yyVals[yyV]; // yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 1:
#line 522 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 2:
#line 523 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { Lexer.CompleteOnEOF = false; }
  break;
case 6:
  case_6();
  break;
case 7:
  case_7();
  break;
case 8:
  case_8();
  break;
case 13:
  case_13();
  break;
case 14:
#line 598 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 17:
  case_17();
  break;
case 18:
  case_18();
  break;
case 19:
  case_19();
  break;
case 20:
  case_20();
  break;
case 23:
  case_23();
  break;
case 24:
  case_24();
  break;
case 25:
  case_25();
  break;
case 26:
  case_26();
  break;
case 29:
  case_29();
  break;
case 30:
  case_30();
  break;
case 31:
  case_31();
  break;
case 32:
  case_32();
  break;
case 45:
  case_45();
  break;
case 46:
#line 801 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		current_namespace.DeclarationFound = true;
	  }
  break;
case 47:
  case_47();
  break;
case 56:
#line 838 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { port_is_multi = true; }
  break;
case 57:
  case_57();
  break;
case 58:
  case_58();
  break;
case 59:
  case_59();
  break;
case 60:
  case_60();
  break;
case 61:
  case_61();
  break;
case 64:
  case_64();
  break;
case 65:
  case_65();
  break;
case 66:
  case_66();
  break;
case 67:
  case_67();
  break;
case 68:
  case_68();
  break;
case 69:
  case_69();
  break;
case 70:
  case_70();
  break;
case 71:
  case_71();
  break;
case 72:
  case_72();
  break;
case 73:
  case_73();
  break;
case 74:
  case_74();
  break;
case 75:
  case_75();
  break;
case 79:
  case_79();
  break;
case 80:
  case_80();
  break;
case 81:
#line 1214 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		BeginPortInterface();
	  }
  break;
case 82:
  case_82();
  break;
case 83:
#line 1224 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		
	  }
  break;
case 84:
  case_84();
  break;
case 85:
  case_85();
  break;
case 86:
  case_86();
  break;
case 87:
#line 1259 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);	  
	  }
  break;
case 88:
  case_88();
  break;
case 89:
  case_89();
  break;
case 92:
#line 1287 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		report.Error (99525, GetLocation (yyVals[0+yyTop]), "Port interfaces cannot have fields or constants");
	  }
  break;
case 93:
  case_93();
  break;
case 94:
  case_94();
  break;
case 95:
  case_95();
  break;
case 96:
#line 1423 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = yyVals[0+yyTop]; }
  break;
case 97:
#line 1424 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 98:
  case_98();
  break;
case 99:
  case_99();
  break;
case 102:
#line 1484 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 104:
#line 1491 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 106:
  case_106();
  break;
case 107:
  case_107();
  break;
case 108:
  case_108();
  break;
case 109:
  case_109();
  break;
case 110:
  case_110();
  break;
case 113:
  case_113();
  break;
case 114:
  case_114();
  break;
case 115:
  case_115();
  break;
case 116:
  case_116();
  break;
case 117:
  case_117();
  break;
case 118:
  case_118();
  break;
case 119:
  case_119();
  break;
case 120:
  case_120();
  break;
case 121:
  case_121();
  break;
case 122:
  case_122();
  break;
case 123:
#line 1749 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = "event"; }
  break;
case 124:
#line 1750 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = "return"; }
  break;
case 125:
#line 1757 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new List<Attribute> (4) { (Attribute) yyVals[0+yyTop] };
	  }
  break;
case 126:
  case_126();
  break;
case 127:
#line 1774 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 128:
  case_128();
  break;
case 130:
#line 1793 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 131:
#line 1797 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 132:
#line 1802 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 133:
  case_133();
  break;
case 134:
  case_134();
  break;
case 135:
  case_135();
  break;
case 136:
  case_136();
  break;
case 137:
#line 1849 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 139:
  case_139();
  break;
case 140:
#line 1862 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 141:
  case_141();
  break;
case 142:
  case_142();
  break;
case 144:
#line 1898 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 145:
#line 1902 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { 
		yyVal = Argument.AType.Ref;
	  }
  break;
case 146:
#line 1906 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { 
		yyVal = Argument.AType.Out;
	  }
  break;
case 149:
  case_149();
  break;
case 150:
  case_150();
  break;
case 164:
  case_164();
  break;
case 165:
  case_165();
  break;
case 166:
  case_166();
  break;
case 167:
#line 1997 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
	  }
  break;
case 168:
  case_168();
  break;
case 169:
  case_169();
  break;
case 170:
  case_170();
  break;
case 171:
  case_171();
  break;
case 172:
  case_172();
  break;
case 173:
#line 2047 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 174:
  case_174();
  break;
case 175:
  case_175();
  break;
case 176:
  case_176();
  break;
case 179:
#line 2101 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 180:
#line 2105 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 181:
  case_181();
  break;
case 182:
#line 2121 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 183:
  case_183();
  break;
case 184:
  case_184();
  break;
case 187:
  case_187();
  break;
case 188:
  case_188();
  break;
case 189:
  case_189();
  break;
case 190:
  case_190();
  break;
case 191:
#line 2204 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		report.Error (1641, GetLocation (yyVals[-1+yyTop]), "A fixed size buffer field must have the array size specifier after the field name");
	  }
  break;
case 193:
  case_193();
  break;
case 194:
  case_194();
  break;
case 197:
#line 2234 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 198:
#line 2238 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 199:
  case_199();
  break;
case 200:
#line 2251 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 201:
  case_201();
  break;
case 204:
#line 2270 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 205:
#line 2274 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 206:
  case_206();
  break;
case 207:
#line 2290 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 208:
  case_208();
  break;
case 209:
  case_209();
  break;
case 212:
  case_212();
  break;
case 213:
  case_213();
  break;
case 214:
  case_214();
  break;
case 215:
#line 2505 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 216:
  case_216();
  break;
case 217:
  case_217();
  break;
case 218:
#line 2638 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 219:
  case_219();
  break;
case 220:
#line 2648 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 221:
  case_221();
  break;
case 222:
  case_222();
  break;
case 223:
  case_223();
  break;
case 227:
#line 2734 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 228:
  case_228();
  break;
case 229:
  case_229();
  break;
case 230:
#line 2764 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 232:
  case_232();
  break;
case 233:
  case_233();
  break;
case 234:
  case_234();
  break;
case 235:
  case_235();
  break;
case 236:
  case_236();
  break;
case 237:
  case_237();
  break;
case 238:
  case_238();
  break;
case 239:
#line 2822 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[0+yyTop] } );
	  }
  break;
case 240:
#line 2826 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[0+yyTop])) }, true);
	  }
  break;
case 241:
  case_241();
  break;
case 242:
  case_242();
  break;
case 243:
  case_243();
  break;
case 244:
  case_244();
  break;
case 245:
  case_245();
  break;
case 246:
  case_246();
  break;
case 247:
  case_247();
  break;
case 248:
#line 2904 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 249:
  case_249();
  break;
case 250:
#line 2945 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = Parameter.Modifier.NONE; }
  break;
case 252:
#line 2953 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 253:
  case_253();
  break;
case 254:
  case_254();
  break;
case 255:
  case_255();
  break;
case 256:
  case_256();
  break;
case 257:
  case_257();
  break;
case 258:
  case_258();
  break;
case 259:
  case_259();
  break;
case 260:
  case_260();
  break;
case 261:
  case_261();
  break;
case 262:
#line 3043 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		Error_DuplicateParameterModifier (GetLocation (yyVals[-1+yyTop]), Parameter.Modifier.PARAMS);
	  }
  break;
case 263:
  case_263();
  break;
case 264:
  case_264();
  break;
case 265:
  case_265();
  break;
case 266:
  case_266();
  break;
case 267:
  case_267();
  break;
case 268:
#line 3098 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		current_property = null;
	  }
  break;
case 269:
  case_269();
  break;
case 270:
  case_270();
  break;
case 272:
  case_272();
  break;
case 273:
  case_273();
  break;
case 276:
#line 3171 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 277:
  case_277();
  break;
case 278:
  case_278();
  break;
case 279:
#line 3217 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		lbag.AppendToMember (current_property, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 280:
  case_280();
  break;
case 285:
  case_285();
  break;
case 286:
  case_286();
  break;
case 287:
  case_287();
  break;
case 288:
  case_288();
  break;
case 289:
  case_289();
  break;
case 291:
  case_291();
  break;
case 292:
  case_292();
  break;
case 293:
#line 3366 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
	  }
  break;
case 294:
  case_294();
  break;
case 295:
  case_295();
  break;
case 296:
  case_296();
  break;
case 297:
  case_297();
  break;
case 298:
#line 3406 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);	  
	  }
  break;
case 301:
  case_301();
  break;
case 302:
  case_302();
  break;
case 303:
#line 3431 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 304:
#line 3435 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 309:
#line 3443 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
	  	report.Error (567, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain operators");
	  }
  break;
case 310:
#line 3447 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
	  	report.Error (526, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain contructors");
	  }
  break;
case 311:
#line 3451 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
	  	report.Error (524, GetLocation (yyVals[0+yyTop]), "Interfaces cannot declare classes, structs, interfaces, delegates, or enumerations");
	  }
  break;
case 312:
#line 3462 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
	  }
  break;
case 313:
  case_313();
  break;
case 315:
  case_315();
  break;
case 316:
  case_316();
  break;
case 317:
  case_317();
  break;
case 319:
#line 3553 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.LogicalNot; }
  break;
case 320:
#line 3554 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.OnesComplement; }
  break;
case 321:
#line 3555 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.Increment; }
  break;
case 322:
#line 3556 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.Decrement; }
  break;
case 323:
#line 3557 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.True; }
  break;
case 324:
#line 3558 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.False; }
  break;
case 325:
#line 3560 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.Addition; }
  break;
case 326:
#line 3561 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.Subtraction; }
  break;
case 327:
#line 3563 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.Multiply; }
  break;
case 328:
#line 3564 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {  yyVal = Operator.OpType.Division; }
  break;
case 329:
#line 3565 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.Modulus; }
  break;
case 330:
#line 3566 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseAnd; }
  break;
case 331:
#line 3567 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseOr; }
  break;
case 332:
#line 3568 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.ExclusiveOr; }
  break;
case 333:
#line 3569 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.LeftShift; }
  break;
case 334:
#line 3570 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.RightShift; }
  break;
case 335:
#line 3571 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.Equality; }
  break;
case 336:
#line 3572 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.Inequality; }
  break;
case 337:
#line 3573 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThan; }
  break;
case 338:
#line 3574 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.LessThan; }
  break;
case 339:
#line 3575 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThanOrEqual; }
  break;
case 340:
#line 3576 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.LessThanOrEqual; }
  break;
case 341:
  case_341();
  break;
case 342:
#line 3590 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 343:
  case_343();
  break;
case 344:
#line 3613 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 345:
  case_345();
  break;
case 346:
  case_346();
  break;
case 347:
  case_347();
  break;
case 348:
  case_348();
  break;
case 349:
  case_349();
  break;
case 350:
  case_350();
  break;
case 351:
  case_351();
  break;
case 353:
#line 3739 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { current_block = null; yyVal = null; }
  break;
case 356:
#line 3751 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 357:
  case_357();
  break;
case 358:
#line 3761 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 359:
  case_359();
  break;
case 360:
  case_360();
  break;
case 361:
  case_361();
  break;
case 362:
  case_362();
  break;
case 363:
  case_363();
  break;
case 364:
  case_364();
  break;
case 365:
  case_365();
  break;
case 366:
  case_366();
  break;
case 367:
  case_367();
  break;
case 368:
  case_368();
  break;
case 369:
  case_369();
  break;
case 371:
#line 3894 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 372:
  case_372();
  break;
case 375:
#line 3911 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 376:
#line 3915 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 377:
  case_377();
  break;
case 378:
#line 3928 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 379:
  case_379();
  break;
case 380:
  case_380();
  break;
case 381:
#line 3953 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 384:
  case_384();
  break;
case 385:
  case_385();
  break;
case 386:
  case_386();
  break;
case 387:
  case_387();
  break;
case 388:
  case_388();
  break;
case 389:
  case_389();
  break;
case 390:
  case_390();
  break;
case 391:
  case_391();
  break;
case 393:
  case_393();
  break;
case 394:
  case_394();
  break;
case 395:
  case_395();
  break;
case 396:
  case_396();
  break;
case 397:
  case_397();
  break;
case 398:
  case_398();
  break;
case 400:
#line 4127 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	 }
  break;
case 401:
  case_401();
  break;
case 404:
#line 4141 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
	  	lbag.AddLocation (yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 406:
  case_406();
  break;
case 407:
  case_407();
  break;
case 408:
  case_408();
  break;
case 409:
  case_409();
  break;
case 410:
  case_410();
  break;
case 412:
#line 4220 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 413:
  case_413();
  break;
case 414:
#line 4239 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;
	  }
  break;
case 415:
  case_415();
  break;
case 417:
  case_417();
  break;
case 419:
  case_419();
  break;
case 420:
  case_420();
  break;
case 422:
  case_422();
  break;
case 423:
  case_423();
  break;
case 424:
  case_424();
  break;
case 425:
  case_425();
  break;
case 427:
  case_427();
  break;
case 428:
  case_428();
  break;
case 429:
  case_429();
  break;
case 430:
  case_430();
  break;
case 431:
#line 4363 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 432:
  case_432();
  break;
case 433:
  case_433();
  break;
case 435:
  case_435();
  break;
case 436:
  case_436();
  break;
case 437:
  case_437();
  break;
case 438:
  case_438();
  break;
case 439:
  case_439();
  break;
case 440:
  case_440();
  break;
case 442:
  case_442();
  break;
case 443:
  case_443();
  break;
case 444:
  case_444();
  break;
case 445:
  case_445();
  break;
case 446:
  case_446();
  break;
case 448:
#line 4481 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 449:
#line 4488 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 455:
  case_455();
  break;
case 457:
#line 4518 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 458:
  case_458();
  break;
case 459:
#line 4537 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new ComposedCast ((ATypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 461:
  case_461();
  break;
case 462:
  case_462();
  break;
case 463:
#line 4558 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 464:
#line 4562 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 465:
  case_465();
  break;
case 466:
  case_466();
  break;
case 467:
  case_467();
  break;
case 468:
#line 4595 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Object, GetLocation (yyVals[0+yyTop])); }
  break;
case 469:
#line 4596 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.String, GetLocation (yyVals[0+yyTop])); }
  break;
case 470:
#line 4597 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Bool, GetLocation (yyVals[0+yyTop])); }
  break;
case 471:
#line 4598 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Decimal, GetLocation (yyVals[0+yyTop])); }
  break;
case 472:
#line 4599 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Float, GetLocation (yyVals[0+yyTop])); }
  break;
case 473:
#line 4600 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Double, GetLocation (yyVals[0+yyTop])); }
  break;
case 475:
#line 4605 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.SByte, GetLocation (yyVals[0+yyTop])); }
  break;
case 476:
#line 4606 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Byte, GetLocation (yyVals[0+yyTop])); }
  break;
case 477:
#line 4607 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Short, GetLocation (yyVals[0+yyTop])); }
  break;
case 478:
#line 4608 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UShort, GetLocation (yyVals[0+yyTop])); }
  break;
case 479:
#line 4609 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Int, GetLocation (yyVals[0+yyTop])); }
  break;
case 480:
#line 4610 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UInt, GetLocation (yyVals[0+yyTop])); }
  break;
case 481:
#line 4611 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Long, GetLocation (yyVals[0+yyTop])); }
  break;
case 482:
#line 4612 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.ULong, GetLocation (yyVals[0+yyTop])); }
  break;
case 483:
#line 4613 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Char, GetLocation (yyVals[0+yyTop])); }
  break;
case 506:
  case_506();
  break;
case 510:
#line 4657 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = new NullLiteral (GetLocation (yyVals[0+yyTop])); }
  break;
case 511:
#line 4661 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, true, GetLocation (yyVals[0+yyTop])); }
  break;
case 512:
#line 4662 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, false, GetLocation (yyVals[0+yyTop])); }
  break;
case 513:
#line 4671 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new InterpolatedString ((StringLiteral) yyVals[-2+yyTop], (List<Expression>) yyVals[-1+yyTop], (StringLiteral) yyVals[0+yyTop]);
	  }
  break;
case 514:
#line 4675 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new InterpolatedString ((StringLiteral) yyVals[0+yyTop], null, null);
	  }
  break;
case 515:
  case_515();
  break;
case 516:
  case_516();
  break;
case 517:
#line 4698 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new InterpolatedStringInsert ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 518:
  case_518();
  break;
case 519:
#line 4708 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		lexer.parsing_interpolation_format = true;
	  }
  break;
case 520:
  case_520();
  break;
case 521:
#line 4720 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		lexer.parsing_interpolation_format = true;
	  }
  break;
case 522:
  case_522();
  break;
case 527:
  case_527();
  break;
case 528:
#line 4762 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 529:
  case_529();
  break;
case 530:
  case_530();
  break;
case 531:
  case_531();
  break;
case 532:
  case_532();
  break;
case 533:
  case_533();
  break;
case 534:
  case_534();
  break;
case 535:
  case_535();
  break;
case 536:
  case_536();
  break;
case 537:
#line 4823 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null,GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 538:
  case_538();
  break;
case 539:
#line 4831 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null, lexer.Location);
	  }
  break;
case 540:
  case_540();
  break;
case 541:
  case_541();
  break;
case 542:
  case_542();
  break;
case 543:
  case_543();
  break;
case 544:
#line 4861 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 546:
  case_546();
  break;
case 547:
  case_547();
  break;
case 548:
#line 4883 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 549:
#line 4887 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	}
  break;
case 550:
  case_550();
  break;
case 551:
  case_551();
  break;
case 552:
  case_552();
  break;
case 553:
  case_553();
  break;
case 554:
  case_554();
  break;
case 555:
#line 4925 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new CompletionElementInitializer (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 556:
  case_556();
  break;
case 557:
  case_557();
  break;
case 558:
  case_558();
  break;
case 559:
  case_559();
  break;
case 562:
#line 4964 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 564:
  case_564();
  break;
case 565:
  case_565();
  break;
case 566:
  case_566();
  break;
case 567:
  case_567();
  break;
case 568:
  case_568();
  break;
case 569:
#line 5016 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 573:
  case_573();
  break;
case 574:
#line 5034 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref);
	  }
  break;
case 575:
  case_575();
  break;
case 576:
#line 5043 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
	  }
  break;
case 577:
  case_577();
  break;
case 578:
  case_578();
  break;
case 579:
  case_579();
  break;
case 580:
  case_580();
  break;
case 581:
  case_581();
  break;
case 583:
  case_583();
  break;
case 584:
  case_584();
  break;
case 585:
  case_585();
  break;
case 586:
  case_586();
  break;
case 587:
  case_587();
  break;
case 588:
  case_588();
  break;
case 589:
  case_589();
  break;
case 590:
  case_590();
  break;
case 591:
#line 5168 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 593:
#line 5176 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new This (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 594:
  case_594();
  break;
case 595:
  case_595();
  break;
case 596:
#line 5196 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostIncrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 597:
#line 5203 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostDecrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 598:
  case_598();
  break;
case 599:
  case_599();
  break;
case 600:
  case_600();
  break;
case 601:
  case_601();
  break;
case 602:
  case_602();
  break;
case 603:
  case_603();
  break;
case 604:
  case_604();
  break;
case 605:
#line 5270 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		++lexer.parsing_type;
	  }
  break;
case 606:
  case_606();
  break;
case 607:
  case_607();
  break;
case 608:
#line 5298 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new EmptyCompletion ();
	  }
  break;
case 611:
#line 5307 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 613:
  case_613();
  break;
case 614:
  case_614();
  break;
case 615:
#line 5327 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new EmptyCompletion ();
	  }
  break;
case 616:
#line 5331 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
	  	yyVal = yyVals[-1+yyTop];
	  }
  break;
case 617:
  case_617();
  break;
case 618:
  case_618();
  break;
case 619:
  case_619();
  break;
case 620:
  case_620();
  break;
case 624:
  case_624();
  break;
case 625:
  case_625();
  break;
case 626:
  case_626();
  break;
case 627:
#line 5397 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = 2;
	  }
  break;
case 628:
#line 5401 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = ((int) yyVals[-1+yyTop]) + 1;
	  }
  break;
case 629:
#line 5408 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 630:
#line 5412 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 631:
  case_631();
  break;
case 632:
  case_632();
  break;
case 633:
  case_633();
  break;
case 634:
  case_634();
  break;
case 635:
  case_635();
  break;
case 637:
  case_637();
  break;
case 638:
  case_638();
  break;
case 639:
  case_639();
  break;
case 640:
  case_640();
  break;
case 641:
  case_641();
  break;
case 642:
  case_642();
  break;
case 643:
  case_643();
  break;
case 644:
  case_644();
  break;
case 645:
  case_645();
  break;
case 646:
  case_646();
  break;
case 647:
#line 5550 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], false, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 648:
#line 5554 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 649:
#line 5558 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], true, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 650:
#line 5562 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 651:
#line 5569 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = ParametersCompiled.Undefined;
	  }
  break;
case 653:
#line 5577 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 654:
  case_654();
  break;
case 655:
  case_655();
  break;
case 657:
#line 5607 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.LogicalNot, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 658:
#line 5611 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.OnesComplement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 659:
  case_659();
  break;
case 660:
  case_660();
  break;
case 661:
  case_661();
  break;
case 662:
  case_662();
  break;
case 663:
  case_663();
  break;
case 664:
  case_664();
  break;
case 666:
#line 5675 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { 
	  	yyVal = new Unary (Unary.Operator.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 667:
#line 5679 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { 
		yyVal = new Unary (Unary.Operator.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 668:
#line 5683 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 669:
#line 5687 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 670:
#line 5691 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new Indirection ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 671:
#line 5695 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.AddressOf, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 672:
  case_672();
  break;
case 673:
  case_673();
  break;
case 674:
  case_674();
  break;
case 675:
  case_675();
  break;
case 676:
  case_676();
  break;
case 677:
  case_677();
  break;
case 679:
  case_679();
  break;
case 680:
  case_680();
  break;
case 681:
  case_681();
  break;
case 682:
  case_682();
  break;
case 683:
  case_683();
  break;
case 684:
  case_684();
  break;
case 686:
  case_686();
  break;
case 687:
  case_687();
  break;
case 688:
  case_688();
  break;
case 689:
  case_689();
  break;
case 690:
#line 5803 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new As ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 691:
  case_691();
  break;
case 692:
  case_692();
  break;
case 693:
  case_693();
  break;
case 694:
  case_694();
  break;
case 695:
  case_695();
  break;
case 696:
  case_696();
  break;
case 699:
#line 5864 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 700:
#line 5868 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 703:
  case_703();
  break;
case 704:
#line 5879 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new WildcardPattern (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 707:
#line 5888 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new RecursivePattern ((ATypeNameExpression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 708:
#line 5895 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new PropertyPattern ((ATypeNameExpression) yyVals[-3+yyTop], (List<PropertyPatternMember>) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 709:
  case_709();
  break;
case 710:
  case_710();
  break;
case 711:
  case_711();
  break;
case 713:
  case_713();
  break;
case 714:
#line 5937 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new Arguments (0);
	  }
  break;
case 716:
  case_716();
  break;
case 717:
  case_717();
  break;
case 718:
#line 5963 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 719:
  case_719();
  break;
case 721:
  case_721();
  break;
case 722:
  case_722();
  break;
case 723:
  case_723();
  break;
case 724:
  case_724();
  break;
case 726:
  case_726();
  break;
case 727:
  case_727();
  break;
case 728:
  case_728();
  break;
case 729:
  case_729();
  break;
case 730:
  case_730();
  break;
case 731:
  case_731();
  break;
case 732:
  case_732();
  break;
case 733:
  case_733();
  break;
case 735:
  case_735();
  break;
case 736:
  case_736();
  break;
case 737:
  case_737();
  break;
case 738:
  case_738();
  break;
case 740:
  case_740();
  break;
case 741:
  case_741();
  break;
case 743:
  case_743();
  break;
case 744:
  case_744();
  break;
case 746:
  case_746();
  break;
case 747:
  case_747();
  break;
case 749:
  case_749();
  break;
case 750:
  case_750();
  break;
case 752:
  case_752();
  break;
case 753:
  case_753();
  break;
case 755:
  case_755();
  break;
case 757:
  case_757();
  break;
case 758:
  case_758();
  break;
case 759:
  case_759();
  break;
case 760:
  case_760();
  break;
case 761:
  case_761();
  break;
case 762:
  case_762();
  break;
case 763:
  case_763();
  break;
case 764:
  case_764();
  break;
case 765:
  case_765();
  break;
case 766:
  case_766();
  break;
case 767:
  case_767();
  break;
case 768:
  case_768();
  break;
case 769:
  case_769();
  break;
case 770:
  case_770();
  break;
case 771:
  case_771();
  break;
case 772:
  case_772();
  break;
case 773:
  case_773();
  break;
case 774:
  case_774();
  break;
case 775:
  case_775();
  break;
case 776:
  case_776();
  break;
case 777:
  case_777();
  break;
case 778:
#line 6317 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 779:
  case_779();
  break;
case 780:
#line 6327 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		start_block (Location.Null);
	  }
  break;
case 781:
  case_781();
  break;
case 783:
  case_783();
  break;
case 785:
  case_785();
  break;
case 786:
  case_786();
  break;
case 787:
  case_787();
  break;
case 788:
  case_788();
  break;
case 789:
  case_789();
  break;
case 790:
  case_790();
  break;
case 791:
  case_791();
  break;
case 792:
#line 6394 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 793:
  case_793();
  break;
case 794:
  case_794();
  break;
case 795:
#line 6408 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;	  
	  }
  break;
case 796:
  case_796();
  break;
case 797:
  case_797();
  break;
case 803:
#line 6433 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new ArglistAccess (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 804:
  case_804();
  break;
case 805:
  case_805();
  break;
case 806:
  case_806();
  break;
case 808:
#line 6462 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new BooleanExpression ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 809:
#line 6469 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
	  	yyVal = null;
	  }
  break;
case 811:
  case_811();
  break;
case 812:
#line 6490 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
	  	yyVal = null;
	  }
  break;
case 813:
#line 6494 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 814:
#line 6498 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 815:
#line 6502 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 816:
  case_816();
  break;
case 817:
  case_817();
  break;
case 818:
#line 6526 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = new LocatedToken( "class", GetLocation(yyVals[0+yyTop]) ); }
  break;
case 819:
#line 6528 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = new LocatedToken( "component", GetLocation(yyVals[0+yyTop]) ); }
  break;
case 820:
  case_820();
  break;
case 821:
  case_821();
  break;
case 822:
  case_822();
  break;
case 823:
  case_823();
  break;
case 824:
  case_824();
  break;
case 825:
#line 6689 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 826:
#line 6691 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = yyVals[0+yyTop]; }
  break;
case 827:
  case_827();
  break;
case 828:
#line 6708 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		lexer.parsing_modifiers = false;		
	  }
  break;
case 830:
  case_830();
  break;
case 831:
  case_831();
  break;
case 832:
  case_832();
  break;
case 833:
  case_833();
  break;
case 834:
  case_834();
  break;
case 835:
  case_835();
  break;
case 836:
  case_836();
  break;
case 837:
  case_837();
  break;
case 838:
  case_838();
  break;
case 839:
  case_839();
  break;
case 840:
  case_840();
  break;
case 841:
  case_841();
  break;
case 842:
  case_842();
  break;
case 843:
  case_843();
  break;
case 844:
  case_844();
  break;
case 845:
  case_845();
  break;
case 846:
  case_846();
  break;
case 847:
  case_847();
  break;
case 850:
  case_850();
  break;
case 851:
  case_851();
  break;
case 853:
#line 6866 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 854:
  case_854();
  break;
case 855:
  case_855();
  break;
case 856:
  case_856();
  break;
case 857:
  case_857();
  break;
case 858:
  case_858();
  break;
case 859:
  case_859();
  break;
case 860:
  case_860();
  break;
case 861:
  case_861();
  break;
case 862:
#line 6958 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Class, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 863:
#line 6962 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Struct, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 864:
#line 6969 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 865:
  case_865();
  break;
case 866:
#line 6983 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new VarianceDecl (Variance.Covariant, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 867:
#line 6987 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new VarianceDecl (Variance.Contravariant, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 868:
  case_868();
  break;
case 869:
  case_869();
  break;
case 870:
  case_870();
  break;
case 871:
  case_871();
  break;
case 872:
  case_872();
  break;
case 873:
  case_873();
  break;
case 878:
#line 7066 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 879:
#line 7070 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 881:
  case_881();
  break;
case 884:
#line 7094 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 885:
#line 7098 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 924:
  case_924();
  break;
case 925:
  case_925();
  break;
case 926:
  case_926();
  break;
case 927:
  case_927();
  break;
case 928:
  case_928();
  break;
case 931:
  case_931();
  break;
case 932:
  case_932();
  break;
case 933:
  case_933();
  break;
case 937:
  case_937();
  break;
case 938:
#line 7249 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreatePointer (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 940:
#line 7263 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
	  	yyVal = Error_AwaitAsIdentifier (yyVals[0+yyTop]);
	  }
  break;
case 941:
  case_941();
  break;
case 942:
  case_942();
  break;
case 943:
  case_943();
  break;
case 944:
  case_944();
  break;
case 946:
  case_946();
  break;
case 947:
  case_947();
  break;
case 951:
  case_951();
  break;
case 954:
  case_954();
  break;
case 955:
  case_955();
  break;
case 956:
#line 7363 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
	  }
  break;
case 957:
#line 7367 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
	  }
  break;
case 962:
  case_962();
  break;
case 964:
  case_964();
  break;
case 965:
  case_965();
  break;
case 966:
  case_966();
  break;
case 967:
#line 7418 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 968:
  case_968();
  break;
case 969:
#line 7428 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 970:
#line 7429 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 971:
  case_971();
  break;
case 972:
  case_972();
  break;
case 973:
  case_973();
  break;
case 976:
  case_976();
  break;
case 977:
  case_977();
  break;
case 978:
  case_978();
  break;
case 979:
#line 7501 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 980:
  case_980();
  break;
case 981:
  case_981();
  break;
case 982:
#line 7521 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		report.Warning (1522, 1, current_block.StartLocation, "Empty switch block"); 
	  }
  break;
case 986:
#line 7531 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 988:
  case_988();
  break;
case 989:
#line 7548 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 990:
  case_990();
  break;
case 991:
  case_991();
  break;
case 992:
#line 7577 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new SwitchLabel (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 997:
  case_997();
  break;
case 998:
  case_998();
  break;
case 999:
  case_999();
  break;
case 1000:
  case_1000();
  break;
case 1001:
  case_1001();
  break;
case 1002:
  case_1002();
  break;
case 1003:
#line 7637 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 1004:
  case_1004();
  break;
case 1005:
  case_1005();
  break;
case 1006:
  case_1006();
  break;
case 1007:
  case_1007();
  break;
case 1008:
#line 7678 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new Tuple<Location,Location> (GetLocation (yyVals[-2+yyTop]), (Location) yyVals[0+yyTop]);
	  }
  break;
case 1009:
  case_1009();
  break;
case 1010:
  case_1010();
  break;
case 1011:
  case_1011();
  break;
case 1013:
#line 7706 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { lexer.putback ('}'); }
  break;
case 1014:
#line 7710 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 1016:
  case_1016();
  break;
case 1017:
  case_1017();
  break;
case 1019:
#line 7734 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 1021:
#line 7739 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 1025:
  case_1025();
  break;
case 1026:
  case_1026();
  break;
case 1027:
  case_1027();
  break;
case 1028:
  case_1028();
  break;
case 1029:
  case_1029();
  break;
case 1036:
  case_1036();
  break;
case 1037:
  case_1037();
  break;
case 1038:
  case_1038();
  break;
case 1039:
  case_1039();
  break;
case 1040:
  case_1040();
  break;
case 1041:
  case_1041();
  break;
case 1042:
  case_1042();
  break;
case 1043:
  case_1043();
  break;
case 1044:
  case_1044();
  break;
case 1045:
  case_1045();
  break;
case 1046:
  case_1046();
  break;
case 1047:
  case_1047();
  break;
case 1048:
  case_1048();
  break;
case 1049:
  case_1049();
  break;
case 1050:
  case_1050();
  break;
case 1053:
#line 7963 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], (List<Catch>) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), false);
	  }
  break;
case 1054:
  case_1054();
  break;
case 1055:
  case_1055();
  break;
case 1056:
  case_1056();
  break;
case 1057:
  case_1057();
  break;
case 1058:
  case_1058();
  break;
case 1061:
  case_1061();
  break;
case 1062:
  case_1062();
  break;
case 1063:
  case_1063();
  break;
case 1064:
  case_1064();
  break;
case 1065:
#line 8054 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 1066:
  case_1066();
  break;
case 1067:
#line 8066 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		lexer.parsing_catch_when = false;
	  }
  break;
case 1068:
#line 8070 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		lexer.parsing_catch_when = false;
	  }
  break;
case 1069:
  case_1069();
  break;
case 1070:
#line 8085 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new Checked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 1071:
#line 8092 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new Unchecked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 1072:
  case_1072();
  break;
case 1073:
#line 8102 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new Unsafe ((Block) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 1074:
  case_1074();
  break;
case 1075:
  case_1075();
  break;
case 1076:
  case_1076();
  break;
case 1077:
  case_1077();
  break;
case 1078:
  case_1078();
  break;
case 1079:
  case_1079();
  break;
case 1080:
  case_1080();
  break;
case 1081:
  case_1081();
  break;
case 1082:
  case_1082();
  break;
case 1083:
  case_1083();
  break;
case 1085:
  case_1085();
  break;
case 1086:
#line 8212 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		Error_MissingInitializer (lexer.Location);
	  }
  break;
case 1087:
  case_1087();
  break;
case 1088:
  case_1088();
  break;
case 1089:
  case_1089();
  break;
case 1090:
  case_1090();
  break;
case 1091:
  case_1091();
  break;
case 1092:
  case_1092();
  break;
case 1093:
  case_1093();
  break;
case 1094:
  case_1094();
  break;
case 1095:
  case_1095();
  break;
case 1096:
#line 8318 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1097:
  case_1097();
  break;
case 1098:
#line 8334 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1099:
  case_1099();
  break;
case 1100:
  case_1100();
  break;
case 1101:
  case_1101();
  break;
case 1103:
  case_1103();
  break;
case 1104:
  case_1104();
  break;
case 1105:
#line 8398 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1106:
  case_1106();
  break;
case 1107:
  case_1107();
  break;
case 1108:
  case_1108();
  break;
case 1109:
  case_1109();
  break;
case 1110:
#line 8437 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
	  	yyVal = new object[] { yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]) };
	  }
  break;
case 1111:
  case_1111();
  break;
case 1113:
  case_1113();
  break;
case 1119:
#line 8466 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1120:
  case_1120();
  break;
case 1121:
#line 8485 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1122:
  case_1122();
  break;
case 1123:
  case_1123();
  break;
case 1124:
  case_1124();
  break;
case 1125:
  case_1125();
  break;
case 1126:
  case_1126();
  break;
case 1127:
  case_1127();
  break;
case 1128:
  case_1128();
  break;
case 1129:
  case_1129();
  break;
case 1130:
  case_1130();
  break;
case 1132:
#line 8630 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 1133:
#line 8637 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1134:
  case_1134();
  break;
case 1136:
  case_1136();
  break;
case 1137:
  case_1137();
  break;
case 1139:
  case_1139();
  break;
case 1140:
  case_1140();
  break;
case 1141:
#line 8683 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 1142:
  case_1142();
  break;
case 1143:
  case_1143();
  break;
case 1144:
#line 8700 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 1145:
  case_1145();
  break;
case 1146:
  case_1146();
  break;
case 1148:
  case_1148();
  break;
case 1149:
  case_1149();
  break;
case 1152:
  case_1152();
  break;
case 1153:
  case_1153();
  break;
case 1161:
#line 8831 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		module.DocumentationBuilder.ParsedName = (MemberName) yyVals[0+yyTop];
	  }
  break;
case 1162:
#line 8838 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
	  }
  break;
case 1163:
  case_1163();
  break;
case 1164:
  case_1164();
  break;
case 1165:
  case_1165();
  break;
case 1166:
#line 8861 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], MemberCache.IndexerNameAlias, Location.Null);
	  }
  break;
case 1167:
#line 8865 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 1168:
  case_1168();
  break;
case 1169:
  case_1169();
  break;
case 1170:
  case_1170();
  break;
case 1171:
  case_1171();
  break;
case 1173:
#line 8901 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new MemberName (((MemberName) yyVals[-2+yyTop]), (MemberName) yyVals[0+yyTop]);
	  }
  break;
case 1175:
#line 8909 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 1176:
#line 8913 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 1177:
#line 8920 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
  {
		yyVal = new List<DocumentationParameter> (0);
	  }
  break;
case 1179:
  case_1179();
  break;
case 1180:
  case_1180();
  break;
case 1181:
  case_1181();
  break;
#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (debug != null)
               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: ;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: ;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

/*
 All more than 3 lines long rules are wrapped into a method
*/
void case_6()
#line 530 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			Attributes attrs = (Attributes) yyVals[0+yyTop];
			report.Error (1730, attrs.Attrs [0].Location,
				"Assembly and module attributes must precede all other elements except using clauses and extern alias declarations");

			current_namespace.UnattachedAttributes = attrs;
		}
	  }

void case_7()
#line 540 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Attributes attrs = (Attributes) yyVals[0+yyTop];
		if (attrs != null) {
			foreach (var a in attrs.Attrs) {
				if (a.ExplicitTarget == "assembly" || a.ExplicitTarget == "module")
					continue;

				if (a.ExplicitTarget == null)
					report.Error (-1671, a.Location, "Global attributes must have attribute target specified");
			}
		}

		module.AddAttributes ((Attributes) yyVals[0+yyTop], current_namespace);
	  }

void case_8()
#line 555 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (yyToken == Token.EXTERN_ALIAS)
			report.Error (439, lexer.Location, "An extern alias declaration must precede all other elements");
		else
			Error_SyntaxError (yyToken);
	  }

void case_13()
#line 575 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "alias") {
			syntax_error (lt.Location, "`alias' expected");
		} else {
			if (lang_version == LanguageVersion.ISO_1)
				FeatureIsNotAvailable (lt.Location, "external alias");

			lt = (LocatedToken) yyVals[-1+yyTop];
			if (lt.Value == QualifiedAliasMember.GlobalAlias) {
				RootNamespace.Error_GlobalNamespaceRedefined (report, lt.Location);
			}
			
			var na = new UsingExternAlias (new SimpleMemberName (lt.Value, lt.Location), GetLocation (yyVals[-3+yyTop]));
			current_namespace.AddUsing (na);
			
			lbag.AddLocation (na, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_17()
#line 608 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_18()
#line 616 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		UsingClause uc;
		if (yyVals[-2+yyTop] != null) {
			if (lang_version <= LanguageVersion.V_5)
				FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "using static");
				
			uc = new UsingType ((ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
			lbag.AddLocation (uc, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			uc = new UsingNamespace ((ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
			lbag.AddLocation (uc, GetLocation (yyVals[0+yyTop]));
		}

		current_namespace.AddUsing (uc);
	  }

void case_19()
#line 632 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];
		if (lang_version != LanguageVersion.ISO_1 && lt.Value == "global") {
			report.Warning (440, 2, lt.Location,
			 "An alias named `global' will not be used when resolving `global::'. The global namespace will be used instead");
		}

		if (yyVals[-4+yyTop] != null) {
			report.Error (8085, GetLocation (yyVals[-4+yyTop]), "A `using static' directive cannot be used to declare an alias");
		}

		var un = new UsingAliasNamespace (new SimpleMemberName (lt.Value, lt.Location), (ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]));
		current_namespace.AddUsing (un);
		
		lbag.AddLocation (un, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_20()
#line 649 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	 }

void case_23()
#line 667 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Attributes attrs = (Attributes) yyVals[-2+yyTop];
		var name = (MemberName) yyVals[0+yyTop];
		if (attrs != null) {
			bool valid_global_attrs = true;
			if ((current_namespace.DeclarationFound || current_namespace != file)) {
				valid_global_attrs = false;
			} else {
				foreach (var a in attrs.Attrs) {
					if (a.ExplicitTarget == "assembly" || a.ExplicitTarget == "module")
						continue;
						
					valid_global_attrs = false;
					break;
				}
			}
			
			if (!valid_global_attrs)
				report.Error (1671, name.Location, "A namespace declaration cannot have modifiers or attributes");
		}
	
		module.AddAttributes (attrs, current_namespace);
		
		var ns = new NamespaceContainer (name, current_namespace);
		current_namespace.AddTypeContainer (ns);
		current_container = current_namespace = ns;
	  }

void case_24()
#line 695 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_25()
#line 700 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] != null)
			lbag.AddLocation (current_container, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		else
			lbag.AddLocation (current_container, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  
		current_container = current_namespace = current_namespace.Parent;
	  }

void case_26()
#line 709 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		report.Error (1514, lexer.Location, "Unexpected symbol `{0}', expecting `.' or `{{'", GetSymbolName (yyToken));

		var name = (MemberName) yyVals[0+yyTop];		
		var ns = new NamespaceContainer (name, current_namespace);
		lbag.AddLocation (ns, GetLocation (yyVals[-1+yyTop]));
		current_namespace.AddTypeContainer (ns);
	  }

void case_29()
#line 723 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }

void case_30()
#line 731 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName (lt.Value, lt.Location);
	  }

void case_31()
#line 736 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, lt.Location);		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_32()
#line 742 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new MemberName ("<invalid>", lexer.Location);
	  }

void case_45()
#line 780 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			TypeContainer ds = (TypeContainer)yyVals[0+yyTop];

			if ((ds.ModFlags & (Modifiers.PRIVATE | Modifiers.PROTECTED)) != 0){
				report.Error (1527, ds.Location, 
				"Namespace elements cannot be explicitly declared as private, protected or protected internal");
			}

			/* Here is a trick, for explicit attributes we don't know where they belong to until*/
			/* we parse succeeding declaration hence we parse them as normal and re-attach them*/
			/* when we know whether they are global (assembly:, module:) or local (type:).*/
			if (ds.OptAttributes != null) {
				ds.OptAttributes.ConvertGlobalAttributes (ds, current_namespace, !current_namespace.DeclarationFound && current_namespace == file);
			}
		}
		current_namespace.DeclarationFound = true;
	  }

void case_47()
#line 802 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		current_namespace.UnattachedAttributes = (Attributes) yyVals[-1+yyTop];
		report.Error (1518, lexer.Location, "Attributes must be attached to class, delegate, enum, interface or struct");
		lexer.putback ('}');
	  }

void case_57()
#line 846 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		/*if( ((LocatedToken)$4).value == "multiport" )*/
		/*	parsing_multiport = true;*/
		
		parsing_port = true;
		
		if( !current_container.IsComponent ) {
			report.Warning( 99101, 3, GetLocation(yyVals[0+yyTop]),
				"It is recommended to use 'component' rather than " +
				"'class' for a type that contains ports.");
		}
	  }

void case_58()
#line 859 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.ConstraintsParsing = true;

		/*ensure that the port is embedded into a class or struct*/
		if( current_container != null )
			parent_type = current_container.CurrentType;
		
		if( parent_type == null || !(parent_type.IsClass ) ) {
			report.Error( 
				99015, GetLocation(yyVals[-2+yyTop]),
				"Ports must be contained within a class or component." 
			);
		}
		
		current_container.CurrentType.PortType = 
			port_is_multi ? TypeSpec.PortTypeEnum.Multi :
							TypeSpec.PortTypeEnum.Single;
		
		/*current_container.CurrentType.PortType = TypeSpec.PortTypeEnum.Single;*/
		
		var mods = (Modifiers) yyVals[-4+yyTop] ;
		port_is_static = ( (long)(mods & Modifiers.STATIC) != 0);
		port_is_readonly = ( (long)(mods & Modifiers.READONLY) != 0);
		
		/*remove 'static' and 'readonly' from modifiers*/
		mods &= ~Modifiers.STATIC;
		mods &= ~Modifiers.READONLY;
		
		/*if( !port_is_static )*/
			((Class)current_container).HasPorts = true;
		
		/*+COPPER*/
		var attrs = (Attributes) yyVals[-5+yyTop];
		string attribute_class_name = "PortClassAttribute";
				
		/*Add the attribute +COPPER*/
		var attr = new Attribute( 
			null, 
			new MemberAccess( new SimpleName( 
				"Copper", GetLocation(yyVals[-1+yyTop]) ), attribute_class_name ),
			null, 
			GetLocation( yyVals[-1+yyTop] ),
			false
		);
		
		
		if( attrs == null )
			attrs = new Attributes( attr );
		else
			attrs.AddAttribute( attr );
				
		var port_name = (MemberName) yyVals[0+yyTop];
		var port_class_name = new MemberName( 
			port_name.Left,
			"Port_" + port_name.Name,
			port_name.ExplicitInterface,
			port_name.Location 
		);
		
		if( port_is_static )
			static_ports_to_construct.Add( port_name.Name );
		else 
			ports_to_construct.Add( port_name.Name );
		
		
		Class c = new Class (current_container, port_class_name /*(MemberName) $6*/ , mods, attrs);
		/*if (((c.ModFlags & Modifiers.STATIC) != 0) && lang_version == LanguageVersion.ISO_1) {*/
		/*	FeatureIsNotAvailable (c.Location, "static classes");*/
		/*}*/
		
		current_type = c;
		
		/*Add Port base type to port */
		var bases = new List<FullNamedExpression>(1);
		if( port_is_multi )
			bases.Add( 
				new MemberAccess( 
					new SimpleName( "Copper", GetLocation(yyVals[-1+yyTop]) ), 
					"MultiPort" )
			);
		else			
			bases.Add( 
				new MemberAccess( 
					new SimpleName( "Copper", GetLocation(yyVals[-1+yyTop]) ), 
					"Port" )
			);
		
		c.SetBaseTypes( bases );
		
		/*Parameter for constructor */
		var ctor_param = new Parameter(
			new MemberAccess( 
				new SimpleName( "System", GetLocation(yyVals[0+yyTop]) ), "Object" ),
			"owner",
			Parameter.Modifier.NONE,
			null,
			GetLocation(yyVals[-1+yyTop])
		);
		
		current_local_parameters = new ParametersCompiled(ctor_param);
		
		
		/*Add the Port class's constructor*/
		var ctor = new Constructor (
			current_type, port_class_name.Name, 
			Modifiers.PUBLIC, 
			null/*(Attributes) $1*/, current_local_parameters, 
			GetLocation(yyVals[-1+yyTop])
		);
		
		var ctor_args = new Arguments(1);
		
		var ctor_arg = new Argument(
			new SimpleName( "owner", GetLocation(yyVals[-1+yyTop]) )
		);
		
		ctor_args.Add( ctor_arg );
		
		ctor.Initializer = new ConstructorBaseInitializer(
			ctor_args, GetLocation(yyVals[-1+yyTop])
		);
		
		/*new ConstructorBaseInitializer ((Arguments) $5, GetLocation ($2));*/
		/*current_block.AddStatement (new ContextualReturn ((Expression) $3));*/
		/*current_block.AddStatement(*/
		/*	new ConstructorBaseInitializer*/
		/*);*/
		start_block (GetLocation(yyVals[-1+yyTop]));
		var b = end_block (GetLocation(yyVals[-1+yyTop]));
		b.IsCompilerGenerated = true;
		
		ctor.Block = (ToplevelBlock)b;
		c.AddConstructor (ctor);
		
		string field_attribute_name = "PortFieldAttribute";
		
		/*Add the attribute +COPPER*/
		var field_attr = new Attribute( 
			null, 
			new MemberAccess( new SimpleName( 
				"Copper", GetLocation(yyVals[-1+yyTop]) ), field_attribute_name ),
			null, 
			GetLocation( yyVals[-1+yyTop] ),
			false
		);
		
		var field_mods = mods;
		
		if( port_is_static ) 
			field_mods |= Modifiers.STATIC;
		
		if( port_is_readonly )
			field_mods |= Modifiers.READONLY;
		
		/*Add the port to the class along with the initializer*/
		var port_field = new Field(
			(ClassOrStruct)current_container,
			new SimpleName( port_class_name.Name, GetLocation(yyVals[-1+yyTop]) ),
			field_mods,
			port_name,
			new Attributes( field_attr )
		);
		
		if( port_is_static ) {
			var init_args = new Arguments(1);
			init_args.Add( new Argument( 
				new TypeOf( 
					new SimpleName(parent_type.Name, new Location() ),
					new Location()
				)
			) );
			
			port_field.Initializer = new New(
				new SimpleName( port_class_name.Name, new Location() ),
				init_args,
				new Location()
			);
		}
		
		/*
		var init_args = new Arguments(0);
		//init_args.Add( new Argument( new This( GetLocation($4) ) ) );
		
		port_field.Initializer = new New(
			new SimpleName( port_class_name.Name, GetLocation($4) ),
			init_args,
			GetLocation($4)
		);
		*/
		((ClassOrStruct)(current_container)).AddField( port_field );
		
		push_current_container (c, yyVals[-3+yyTop]);
		valid_param_mod = ParameterModifierType.PrimaryConstructor;
	  }

void case_59()
#line 1055 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if( yyVals[-1+yyTop] != null )
			report.Error( 99300, GetLocation( yyVals[-1+yyTop] ), 
				"Ports cannot have primary constructors." );
	  
		
		valid_param_mod = 0;
		lexer.ConstraintsParsing = false;

		if (yyVals[-1+yyTop] != null)
			current_type.PrimaryConstructorParameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);
		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-5+yyTop]));

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }

void case_60()
#line 1079 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_61()
#line 1085 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] == null) {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		} else {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		yyVal = pop_current_class ();
		
		parsing_port = false;
		port_is_multi = false;
	  }

void case_64()
#line 1109 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }

void case_65()
#line 1114 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }

void case_66()
#line 1121 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{ 
		report.Error (99525, GetLocation (yyVals[0+yyTop]), 
			"Ports cannot have constants"); 
		yyVal = null;
	  }

void case_67()
#line 1126 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		report.Error (99525, GetLocation (yyVals[0+yyTop]),
			"Ports cannot have fields");
		yyVal = null;
	  }

void case_68()
#line 1131 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if( last_port_dir == Port.Direction.None ) {
			report.Error (99535, GetLocation (yyVals[0+yyTop]), 
				"Methods in a port must be 'in' or 'out'");
			yyVal = null;
		}
		
		last_port_dir = Port.Direction.None;
	  }

void case_69()
#line 1140 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if( last_port_dir == Port.Direction.None ) {
			report.Error (99535, GetLocation (yyVals[0+yyTop]), 
				"Properties in a port must be 'in' or 'out'");
			yyVal = null;
		}
	  }

void case_70()
#line 1147 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if( last_port_dir == Port.Direction.None ) {
			report.Error (99535, GetLocation (yyVals[0+yyTop]), 
				"Events in a port must be 'in' or 'out'");
			yyVal = null;
		}
	  }

void case_71()
#line 1154 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{ 
		report.Error( 99525, GetLocation(yyVals[0+yyTop]),
			"Ports cannot have indexers." );
		yyVal = null;
	  }

void case_72()
#line 1159 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		report.Error( 99525, GetLocation(yyVals[0+yyTop]),
			"Ports cannot have overloaded operators." );
		yyVal = null;
	  }

void case_73()
#line 1164 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		report.Error( 99525, GetLocation(yyVals[0+yyTop]),
			"Ports cannot have constructors." );
		yyVal = null;
	  }

void case_74()
#line 1169 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		report.Error( 99525, GetLocation(yyVals[0+yyTop]),
			"Ports cannot have primary constructors." );
		yyVal = null;
	  }

void case_75()
#line 1174 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		report.Error( 99525, GetLocation(yyVals[0+yyTop]),
			"Ports cannot have destructors." );
		yyVal = null;
	  }

void case_79()
#line 1183 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		report.Error (1519, lexer.Location, "Unexpected symbol `{0}' in class, struct, or interface member declaration",
			GetSymbolName (yyToken));
		yyVal = null;
		lexer.parsing_generic_declaration = false;
	  }

void case_80()
#line 1200 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{ 
		Location loc = GetLocation(yyVals[-1+yyTop]);
	    
		yyVal = new LocatedToken( "port interface", loc ); 
	  }

void case_82()
#line 1216 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.ConstraintsParsing = true;
		push_current_container (new Interface (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-2+yyTop]));		
	  }

void case_84()
#line 1226 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }

void case_85()
#line 1240 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		--lexer.parsing_declaration;	  
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_86()
#line 1246 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] == null) {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		} else {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		yyVal = pop_current_class ();
		
		EndPortInterface();
	  }

void case_88()
#line 1265 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }

void case_89()
#line 1270 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }

void case_93()
#line 1289 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if( last_port_dir == Port.Direction.None )
			report.Error (99535, GetLocation (yyVals[0+yyTop]), 
				"Methods in a port interface must be 'in' or 'out'");
				
		last_port_dir = Port.Direction.None;
	  }

void case_94()
#line 1325 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		parsing_connection_with = true;
		/*construct a new class for the connection map */
		ClassOrStruct container = (ClassOrStruct)current_container;
		string cm_str_name = NewConMapName();
		
		var cm_name = new MemberName(cm_str_name);
		Class c = new Class (
			current_container, 
			cm_name, 
			Modifiers.PRIVATE, 
			null /*no attrs*/
		);
		
		current_type = c;
	
		var bases = new List<FullNamedExpression>(1);
		bases.Add( 
			new MemberAccess( 
				new SimpleName( "Copper", no_loc ), 
				"ConnectorMap" )
		);
		c.SetBaseTypes( bases );
		
		/*Parameters for constructor */
		var ctor_param1 = new Parameter(
			new MemberAccess( 
				new SimpleName( "System", no_loc ), "Object" ),
			"first",
			Parameter.Modifier.NONE,
			null,
			no_loc
		);
		var ctor_param2 = new Parameter(
			new MemberAccess( 
				new SimpleName( "System", no_loc ), "Object" ),
			"second",
			Parameter.Modifier.NONE,
			null,
			no_loc
		);
		
		current_local_parameters = new ParametersCompiled(
			ctor_param1, ctor_param2
		);
		
		/*Add the Port class's constructor*/
		var ctor = new Constructor (
			current_type, cm_str_name, 
			Modifiers.PUBLIC, 
			null/*Attributes*/, current_local_parameters, 
			no_loc
		);
		
		var ctor_args = new Arguments(2);
		
		var ctor_arg1 = new Argument(
			new SimpleName( "first", no_loc )
		);
		var ctor_arg2 = new Argument(
			new SimpleName( "second", no_loc )
		);
		
		ctor_args.Add( ctor_arg1 );
		ctor_args.Add( ctor_arg2 );
		
		ctor.Initializer = new ConstructorBaseInitializer(
			ctor_args, no_loc
		);
		
		start_block (no_loc);
		var b = end_block (no_loc);
		b.IsCompilerGenerated = true;
		
		
		/*ctor.Block = (ToplevelBlock)b;*/
		ctor.Block = new ToplevelBlock (
			compiler, current_local_parameters, no_loc);
		/*start_block( no_loc );*/
		/*ctor.Block = (ToplevelBlock) end_block(no_loc);*/
		/*Block retval = current_block.Explicit;*/
		/*ctor.Block.SetEndLocation (loc);*/
		
		c.AddConstructor (ctor);
		
		push_current_container(c, no_loc);
		
		yyVal = c;
	  }

void case_95()
#line 1416 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = pop_current_class();
		parsing_connection_with = false;
	  }

void case_98()
#line 1434 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var id = (LocatedToken)yyVals[-6+yyTop];
		var parms = (ParametersCompiled)yyVals[-4+yyTop];
		var expr = (Expression)yyVals[-1+yyTop];
		
		/*create a new method with name 'id'*/
		/*params 'parms'*/
		/*with a return value of object*/
		var method = new Method(
			current_type,
			/*new MemberAccess( */
			/*	new SimpleName( "System", no_loc ), "Void" ),*/
			new SimpleName("dynamic", no_loc),
			Modifiers.PUBLIC,
			new MemberName( id.value , no_loc ),
			parms,
			null /*attributes*/
		);
		
		/*start_block( id.Location );*/
		method.Block = new ToplevelBlock(
			compiler, parms, no_loc);
		method.Block.AddStatement(
			new Return( expr, expr.Location )
		);
		/*method.Block = (ToplevelBlock)end_block( GetLocation($5) );*/
		
		method.Block.IsCompilerGenerated = true;
		method.ModFlags |= Modifiers.COMPILER_GENERATED;
		
		current_type.AddMember( method );
	  }

void case_99()
#line 1468 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		/*no need to do anything*/
		/*method is added to current_type which is the */
		/*connection map*/
	  }

void case_106()
#line 1500 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var arg_list = (Arguments)yyVals[-2+yyTop];
		var with_block = yyVals[-1+yyTop];
		if( with_block == null ) { /*No connection map*/
			yyVal = new StatementExpression (
				new Invocation(
					new MemberAccess( 
						new MemberAccess( 
							new SimpleName("Copper", new Location() ), 
							"Port"),
						"Connect" 
					),
					(Arguments)yyVals[-2+yyTop]
				)
			);
		}
		else { /*connection map */
			/*add connector map type */
			var con_map_type_arg = 
				new Argument( 
					new TypeOf(
						new SimpleName( last_con_map_name, no_loc ),
						no_loc
					)
				);
				
			arg_list.Add( con_map_type_arg );
			yyVal = new StatementExpression (
				new Invocation(
					new MemberAccess( 
						new MemberAccess( 
							new SimpleName("Copper", new Location() ), 
							"Port"),
						"ConnectMap" 
					),
					arg_list
				)
			);
		}
		
	  }

void case_107()
#line 1547 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new StatementExpression (
			new Invocation(
				new MemberAccess( 
					new MemberAccess( 
						new SimpleName("Copper", new Location() ), 
						"Port"),
					"Disconnect" ),
				(Arguments)yyVals[-1+yyTop]
			)
		);
	  }

void case_108()
#line 1566 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var arg_list = (Arguments)yyVals[-2+yyTop];
		var with_block = yyVals[-1+yyTop];
		if( with_block == null ) { /*No connection map*/
			yyVal = new StatementExpression (
				new Invocation(
					new MemberAccess( 
						new MemberAccess( 
							new SimpleName("Copper", new Location() ), 
							"Port"),
						"Attach" 
					),
					(Arguments)yyVals[-2+yyTop]
				)
			);
		}
		else { /*connection map */
			/*add connector map type */
			var con_map_type_arg = 
				new Argument( 
					new TypeOf(
						new SimpleName( last_con_map_name, no_loc ),
						no_loc
					)
				);
				
			arg_list.Add( con_map_type_arg );
			yyVal = new StatementExpression (
				new Invocation(
					new MemberAccess( 
						new MemberAccess( 
							new SimpleName("Copper", new Location() ), 
							"Port"),
						"AttachMap" 
					),
					arg_list
				)
			);
		}
		
	  }

void case_109()
#line 1613 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new StatementExpression (
			new Invocation(
				new MemberAccess( 
					new MemberAccess( 
						new SimpleName("Copper", new Location() ), 
						"Port"),
					"Detach" ),
				(Arguments)yyVals[-1+yyTop]
			)
		);
	  }

void case_110()
#line 1631 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new StatementExpression (
			new Invocation(
				new MemberAccess( 
					new MemberAccess( 
						new SimpleName("Copper", new Location() ), 
						"Port"),
					"Embed" ),
				(Arguments)yyVals[-1+yyTop]
			)
		);
	  }

void case_113()
#line 1657 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var sect = (List<Attribute>) yyVals[0+yyTop];
		yyVal = new Attributes (sect);
	  }

void case_114()
#line 1662 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Attributes attrs = yyVals[-1+yyTop] as Attributes;
		var sect = (List<Attribute>) yyVals[0+yyTop];
		if (attrs == null)
			attrs = new Attributes (sect);
		else if (sect != null)
			attrs.AddAttributes (sect);
		yyVal = attrs;
	  }

void case_115()
#line 1675 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	PushLocation (GetLocation (yyVals[0+yyTop]));
		lexer.parsing_attribute_section = true;
	  }

void case_116()
#line 1680 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.parsing_attribute_section = false;
		yyVal = yyVals[0+yyTop];
	  }

void case_117()
#line 1688 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		current_attr_target = (string) yyVals[-1+yyTop];
		if (current_attr_target == "assembly" || current_attr_target == "module") {
			Lexer.check_incorrect_doc_comment ();
		}
	  }

void case_118()
#line 1695 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		/* when attribute target is invalid*/
		if (current_attr_target == string.Empty)
			yyVal = new List<Attribute> (0);
		else
			yyVal = yyVals[-2+yyTop];

		lbag.InsertLocation (yyVal, 0, PopLocation ());
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));
		}

		current_attr_target = null;
		lexer.parsing_attribute_section = false;
 	  }

void case_119()
#line 1713 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = yyVals[-2+yyTop];

		lbag.InsertLocation (yyVal, 0, PopLocation ());
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (yyVal, GetLocation(yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (yyVal, GetLocation(yyVals[0+yyTop]));
		}
	  }

void case_120()
#line 1724 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		var lt = (LocatedToken) yyVals[-1+yyTop];
		var tne = new SimpleName (lt.Value, null, lt.Location);

		yyVal = new List<Attribute> () {
			new Attribute (null, tne, null, GetLocation (yyVals[-1+yyTop]), false)
		};
	  }

void case_121()
#line 1735 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (CheckAttributeTarget (yyToken, GetTokenName (yyToken), GetLocation (yyVals[0+yyTop])).Length > 0)
			Error_SyntaxError (yyToken);

 		yyVal = null;
	  }

void case_122()
#line 1745 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = CheckAttributeTarget (yyToken, lt.Value, lt.Location);
	  }

void case_126()
#line 1759 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var attrs = (List<Attribute>) yyVals[-2+yyTop];
		if (attrs != null) {
			attrs.Add ((Attribute) yyVals[0+yyTop]);
	  		lbag.AppendTo (attrs, GetLocation (yyVals[-1+yyTop]));
	  	}

		yyVal = attrs;
	  }

void case_128()
#line 1776 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		--lexer.parsing_block;
		
		var tne = (ATypeNameExpression) yyVals[-2+yyTop];
		if (tne.HasTypeArguments) {
			report.Error (404, tne.Location, "Attributes cannot be generic");
		}

		yyVal = new Attribute (current_attr_target, tne, (Arguments[]) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), lexer.IsEscapedIdentifier (tne));
	  }

void case_133()
#line 1804 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);
		yyVal = new Arguments [] { a, null };
	  }

void case_134()
#line 1810 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);  
		yyVal = new Arguments [] { null, a };
	  }

void case_135()
#line 1816 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] != null) {
			report.Error (1016, ((Argument) yyVals[0+yyTop]).Expr.Location, "Named attribute arguments must appear after the positional arguments");
			o [0] = new Arguments (4);
		}
		
		Arguments args = ((Arguments) o [0]);
		if (args.Count > 0 && !(yyVals[0+yyTop] is NamedArgument) && args [args.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
		
		args.Add ((Argument) yyVals[0+yyTop]);
	  }

void case_136()
#line 1830 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] == null) {
			o [1] = new Arguments (4);
		}

		((Arguments) o [1]).Add ((Argument) yyVals[0+yyTop]);
	  }

void case_139()
#line 1852 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_141()
#line 1864 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	--lexer.parsing_block;
	  	var lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop]);	  
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }

void case_142()
#line 1874 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "named argument");
			
		/* Avoid boxing in common case (no modifier)*/
		var arg_mod = yyVals[-1+yyTop] == null ? Argument.AType.None : (Argument.AType) yyVals[-1+yyTop];
			
		var lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop], arg_mod);
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }

void case_149()
#line 1916 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }

void case_150()
#line 1921 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }

void case_164()
#line 1947 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		report.Error (1519, lexer.Location, "Unexpected symbol `{0}' in class, struct, or interface member declaration",
			GetSymbolName (yyToken));
		yyVal = null;
		lexer.parsing_generic_declaration = false;
	  }

void case_165()
#line 1962 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		current_local_parameters = current_type.PrimaryConstructorParameters;
		if (current_local_parameters == null) {
			report.Error (9010, GetLocation (yyVals[0+yyTop]), "Primary constructor body is not allowed");
			current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		}

		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_166()
#line 1973 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		current_local_parameters = null;
		var t = current_type as ClassOrStruct;
		if (t != null) {
			var b = (ToplevelBlock) yyVals[0+yyTop];
			if (t.PrimaryConstructorBlock != null) {
				report.Error (8041, b.StartLocation, "Primary constructor already has a body");
			} else {
				t.PrimaryConstructorBlock = b;
			}
		}
	  }

void case_168()
#line 1999 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{ 
		lexer.ConstraintsParsing = true;
		valid_param_mod = ParameterModifierType.PrimaryConstructor;
		push_current_container (new Struct (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
	  }

void case_169()
#line 2007 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		valid_param_mod = 0;
		lexer.ConstraintsParsing = false;

		if (yyVals[-2+yyTop] != null)
			current_type.PrimaryConstructorParameters = (ParametersCompiled) yyVals[-2+yyTop];

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-6+yyTop]));
		
		lexer.parsing_modifiers = true;
	  }

void case_170()
#line 2025 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_171()
#line 2030 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_172()
#line 2036 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (yyVals[-1+yyTop] == null) {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		} else {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		yyVal = pop_current_class ();
	  }

void case_174()
#line 2059 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		var mod = (Modifiers) yyVals[-3+yyTop];
		current_field = new Const (current_type, (FullNamedExpression) yyVals[-1+yyTop], mod, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
		current_type.AddMember (current_field);
		
		if ((mod & Modifiers.STATIC) != 0) {
			report.Error (504, current_field.Location, "The constant `{0}' cannot be marked static", current_field.GetSignatureForError ());
		}
		
		yyVal = current_field;
	  }

void case_175()
#line 2072 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_field = null;
	  }

void case_176()
#line 2085 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		current_type.AddMember (new Const (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], MemberName.Null, (Attributes) yyVals[-4+yyTop]));
	  }

void case_181()
#line 2110 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_183()
#line 2123 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_184()
#line 2128 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
		yyVal = null;
	  }

void case_187()
#line 2148 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	lexer.parsing_generic_declaration = false;

		FullNamedExpression type = (FullNamedExpression) yyVals[-1+yyTop];
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (670, GetLocation (yyVals[-1+yyTop]), "Fields cannot have void type");
			
		var lt = (LocatedToken) yyVals[0+yyTop];
		current_field = new Field (current_type, type, (Modifiers) yyVals[-2+yyTop], new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-3+yyTop]);
		current_type.AddField (current_field);
		yyVal = current_field;
	  }

void case_188()
#line 2163 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{ 
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
			
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
		current_field = null;
	  }

void case_189()
#line 2176 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{ 
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "fixed size buffers");

		var lt = (LocatedToken) yyVals[0+yyTop];
		current_field = new FixedField (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop],
			new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
			
		current_type.AddField (current_field);
	  }

void case_190()
#line 2187 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
	    }

		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];	    
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
	    current_field = null;
	  }

void case_193()
#line 2210 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_194()
#line 2216 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	--lexer.parsing_block;
		current_field.Initializer = (Expression) yyVals[0+yyTop];
		lbag.AppendToMember (current_field, GetLocation (yyVals[-2+yyTop]));
		end_block (lexer.Location);
		current_local_parameters = null;
	  }

void case_199()
#line 2243 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_201()
#line 2253 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		--lexer.parsing_block;
		var lt = (LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_206()
#line 2279 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];	  
		yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_208()
#line 2292 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_209()
#line 2298 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		report.Error (443, lexer.Location, "Value or constant expected");
		yyVal = null;
	  }

void case_212()
#line 2308 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }

void case_213()
#line 2322 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.NotAllowed;
		
		/* Was added earlier in the case of body being eof for full ast*/
	  }

void case_214()
#line 2329 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		/*+COPPER */
		MemberCore method_or_delegate = (MemberCore)yyVals[-2+yyTop];
	  
		Method method = null;
		Delegate del = null;
		string signature = method_or_delegate.GetSignatureForError();
		Location loc = method_or_delegate.Location;
		
		/*Method method = (Method) $1;*/
		
		/*wish I didn't have to do this*/
		if( method_or_delegate is Delegate ) {
			del = (Delegate) method_or_delegate;
			/*signature = del.GetSignatureForError();*/
		}
		else {
			method = (Method) method_or_delegate;
			async_block = false;
			method.Block = (ToplevelBlock) yyVals[0+yyTop];
			/*signature = method.GetSignatureForError();*/
		}
		
		if (!ParsingPortOrInterface && method.Block == null ) {
			method.ParameterInfo.CheckParameters (method);

			if ((method.ModFlags & Modifiers.ASYNC) != 0) {
				report.Error (1994, loc, 
					"`{0}': The async modifier can only be used with methods that have a body",
					signature);
			}
		} else {
			if (current_container.Kind == MemberKind.Interface) {
				if( ParsingPortOrInterface )
					report.Error (99531, loc, 
						"`{0}': Port methods cannot have a definition",
						signature);
				else 
					report.Error (531, loc, 
						"`{0}': interface members cannot have a definition",
						signature);
			}	
		}

		if( parsing_port ) {
			IParameterData[] ps = method.ParameterInfo.FixedParameters;
			int n_params = method.ParameterInfo.Count;
			method.IsInPort = true;
			
			var args = new Arguments( n_params );
			
			for( int i = 0; i < n_params; i++ ) {
				args.Add( new Argument( 
					new SimpleName( ps[i].Name, method.Location )
				));
			}
		
			start_block( method.Location );
			var block = current_block;
			
			/*This compound if needs to be refactored.*/
			if( last_port_dir == Port.Direction.Out )
			/*compiler.BuiltinTypes.Void*/
				if( !method_void ) {
					block.AddStatement( 
						new Return (
							new Invocation( new MemberAccess(
								/*new Cast(
									new SimpleName( 
										parent_type.Name,
										method.Location ),
									new MemberAccess( 
										new This( method.Location ), 
										"Owner"),
									method.Location
								)*/
								new MemberAccess(
									new This( method.Location ),
									"Owner"),
								method.ShortName
							), args),
							method.Location
						)
					);
				}
				else {
					block.AddStatement( 
						new StatementExpression( 
							new Invocation( new MemberAccess(
								/*new Cast(
									new SimpleName( 
										parent_type.Name,
										method.Location ),
									new MemberAccess( 
										new This( method.Location ), 
										"Owner"),
									method.Location
								)*/
								new MemberAccess(
									new This( method.Location ),
									"Owner"),
								method.ShortName
							), args)
						)
					);
				}
			else {
				if( !method_void ) {
					block.AddStatement( 
						new Return(
							new Invocation( new MemberAccess(
								new MemberAccess( 
										new This( method.Location ), 
										"Sender"),
								method.ShortName
							), args),
							no_loc
						)
					);
				} 
				else {
					block.AddStatement( 
						new StatementExpression(
							new Invocation( new MemberAccess(
								new MemberAccess( 
										new This( method.Location ), 
										"Sender"),
								method.ShortName
							), args),
							no_loc
						)
					);
				}
			}
				
			/*var b = end_block( method.Location );*/
			block.IsCompilerGenerated = true;
			method.Block = (ToplevelBlock)end_block(no_loc);
			method.Block.IsInPort = true;
			method.ModFlags |= Modifiers.COMPILER_GENERATED;
		} 
		else if( last_port_dir == Port.Direction.In && parsing_port ) {
		/* Moved to method header 
			IParameterData[] ps = method.ParameterInfo.FixedParameters;
			int n_params = method.ParameterInfo.Count;
			var ret_type = method.ReturnType;
			
			var del = new Delegate(
				current_container,	//parent 
				ret_type,			//return type 
				null,				//modifiers
				method.MemberName,	//name 
				ps,					//parameters
			);
		*/
		}
		else { /*Normal Method*/
			
		}
		
		current_local_parameters = null;
		
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
			
		method_void = false;
	  }

void case_216()
#line 2507 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		valid_param_mod = 0;
		MemberName name = (MemberName) yyVals[-4+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];

		var attrs = (Attributes) yyVals[-7+yyTop];
		var mods = (Modifiers) yyVals[-6+yyTop];
		var ret_type = (FullNamedExpression) yyVals[-5+yyTop];
		
		if( ret_type.Type == compiler.BuiltinTypes.Void ) {
			method_void = true;
		}
		else if( parsing_port && port_is_multi ) {
			var type_args = new TypeArguments( 
					new MemberAccess( 
						new SimpleName("System", no_loc),
						"Object"
					) 
				);
			
			ret_type = new MemberAccess( 
				new MemberAccess( 
					new MemberAccess( 
						new SimpleName("System", no_loc),
						"Collections"
					),
					"Generic"
				),
				"List",
				type_args,
				no_loc
			);
		}
		
		/*port methods have the Copper.PortDirectionX attributes added */
		if( ParsingPortOrInterface ) {
			var illegal_modifiers = 
				Modifiers.PRIVATE | 
				Modifiers.PROTECTED | 
				Modifiers.PUBLIC;
				
			if( (mods & illegal_modifiers) != Modifiers.NONE )
				report.Error( 99401, GetLocation(yyVals[-6+yyTop]),
					"Port methods cannot have accessibility modifers. " +
					"Modifiers is " + mods);
			
			
			/*port methods are always public, but we don't want the */
			/*user to actually write "public" so that they behave like */
			/*interfaces*/
			mods |= Modifiers.PUBLIC; 
		
			string attribute_class_name = last_port_dir == Port.Direction.In ? 
				"DirectionInAttribute" : "DirectionOutAttribute";
				
			/*Add the attribute +COPPER*/
			var attr = new Attribute( 
				"method", 
				new MemberAccess( new SimpleName( 
					"Copper", GetLocation(yyVals[-3+yyTop]) ), attribute_class_name ),
				null, 
				GetLocation( yyVals[-3+yyTop] ),
				false
			);
			
			if( attrs == null )
				attrs = new Attributes( attr );
			else
				attrs.AddAttribute( attr );
				
		}
		
		/*var method = Method.Create (current_type, (FullNamedExpression) $3, (Modifiers) $2,*/
		/*		     name, current_local_parameters, /*(Attributes) $1* / attrs );*/
		
		/*if( (ParsingPortOrInterface && last_port_dir == Port.Direction.Out) ||*/
		/*	(!ParsingPortOrInterface) ) {*/
		
			var	method = Method.Create (
				current_type, ret_type, mods,
				name, current_local_parameters, attrs 
			);
			
			current_type.AddMember (method);
			
			async_block = (method.ModFlags & Modifiers.ASYNC) != 0;
			
			if (doc_support)
				method.DocComment = Lexer.consume_doc_comment ();
			
			lbag.AddMember (method, mod_locations, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
			
			yyVal = method;
			
			lexer.ConstraintsParsing = true;
		/*} else { 
		//"In" methods require creating a delegate instead of a method 
			var del = new Delegate(
				current_container,			//parent 
				(FullNamedExpression) $3,	//return type 
				mods,						//modifiers
				new MemberName("Del_" + name),	//name
				current_local_parameters,	//parameters
				attrs 						//attributes 
			);
			
			current_container.AddTypeContainer( del );
			
			
			
			lbag.AddMember (del, mod_locations, GetLocation ($5), GetLocation ($8));
			$$ = del;
		}*/
	  }

void case_217()
#line 2622 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null) {
			var method = (Method) yyVals[-1+yyTop];
			method.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);
		}

		yyVal = yyVals[-1+yyTop];
	  }

void case_219()
#line 2641 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
	  	valid_param_mod = ParameterModifierType.All;
	  }

void case_221()
#line 2650 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		/*+COPPER */
		/*Todo: Uncomment when ready to test*/
		if( ParsingPortOrInterface ) {
			report.Error (99585, GetLocation(yyVals[-6+yyTop]), 
				"Cannot define a method as 'partial' in a port or port interface.");
			yyVal = null;
		}
		
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;

		MemberName name = (MemberName) yyVals[-6+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		var modifiers = (Modifiers) yyVals[-10+yyTop];
		modifiers |= Modifiers.PARTIAL;

		var method = Method.Create (current_type, new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-8+yyTop])),
				     modifiers, name, current_local_parameters, (Attributes) yyVals[-11+yyTop]);

		current_type.AddMember (method);

		async_block = (method.ModFlags & Modifiers.ASYNC) != 0;

		if (yyVals[0+yyTop] != null)
			method.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		StoreModifierLocation (Modifiers.PARTIAL, GetLocation (yyVals[-9+yyTop]));
		lbag.AddMember (method, mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = method;
	  }

void case_222()
#line 2689 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		MemberName name = (MemberName) yyVals[-3+yyTop];
		report.Error (1585, name.Location, 
			"Member modifier `{0}' must precede the member type and name", ModifiersExtensions.Name ((Modifiers) yyVals[-4+yyTop]));

		var method = Method.Create (current_type, (FullNamedExpression) yyVals[-5+yyTop],
					    0, name, (ParametersCompiled) yyVals[-1+yyTop], (Attributes) yyVals[-7+yyTop]);

		current_type.AddMember (method);

		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_223()
#line 2710 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.Undefined;

		MemberName name = (MemberName) yyVals[-1+yyTop];
		var method = Method.Create (current_type, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-3+yyTop],
									name, current_local_parameters, (Attributes) yyVals[-4+yyTop]);

		current_type.AddMember (method);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_228()
#line 2739 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_6 && !parsing_connection_with) {
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "expression bodied members");
		}

		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	 }

void case_229()
#line 2748 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.parsing_block = 0;
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		var b = end_block (GetLocation (yyVals[0+yyTop]));
		b.IsCompilerGenerated = true;
		yyVal = b;
	 }

void case_232()
#line 2770 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
	  	yyVal = new ParametersCompiled (pars_list.ToArray ());
	  }

void case_233()
#line 2775 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = new ParametersCompiled (pars_list.ToArray ()); 
	  }

void case_234()
#line 2782 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[0+yyTop])));
		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_235()
#line 2788 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[-2+yyTop] } );			
	  }

void case_236()
#line 2795 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_237()
#line 2805 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[-2+yyTop])) }, true);
	  }

void case_238()
#line 2811 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_241()
#line 2828 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_242()
#line 2836 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		parameters_bucket.Clear ();
		Parameter p = (Parameter) yyVals[0+yyTop];
		parameters_bucket.Add (p);
		
		default_parameter_used = p.HasDefaultValue;
		yyVal = parameters_bucket;
	  }

void case_243()
#line 2845 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter) yyVals[0+yyTop];
		if (p != null) {
			if (p.HasExtensionMethodModifier)
				report.Error (1100, p.Location, "The parameter modifier `this' can only be used on the first parameter");
			else if (!p.HasDefaultValue && default_parameter_used)
				report.Error (1737, p.Location, "Optional parameter cannot precede required parameters");

			default_parameter_used |= p.HasDefaultValue;
			pars.Add (p);
			
			lbag.AddLocation (p, GetLocation (yyVals[-1+yyTop]));
		}
		
		yyVal = yyVals[-2+yyTop];
	  }

void case_244()
#line 2869 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], lt.Location);
	  }

void case_245()
#line 2877 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		report.Error (1552, lt.Location, "Array type specifier, [], must appear before parameter name");
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Parameter.Modifier) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop], lt.Location);
	  }

void case_246()
#line 2883 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter (null, null, Parameter.Modifier.NONE, (Attributes) yyVals[-1+yyTop], l);
	  }

void case_247()
#line 2892 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], null, (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], l);
	  }

void case_249()
#line 2906 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	--lexer.parsing_block;
		if (lang_version <= LanguageVersion.V_3) {
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "optional parameter");
		}
		
		Parameter.Modifier mod = (Parameter.Modifier) yyVals[-5+yyTop];
		if (mod != Parameter.Modifier.NONE) {
			switch (mod) {
			case Parameter.Modifier.REF:
			case Parameter.Modifier.OUT:
				report.Error (1741, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
				
			case Parameter.Modifier.This:
				report.Error (1743, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
			default:
				throw new NotImplementedException (mod.ToString ());
			}
				
			mod = Parameter.Modifier.NONE;
		}
		
		if ((valid_param_mod & ParameterModifierType.DefaultValue) == 0)
			report.Error (1065, GetLocation (yyVals[-2+yyTop]), "Optional parameter is not valid in this context");
		
		var lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-4+yyTop], lt.Value, mod, (Attributes) yyVals[-6+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
		
		if (yyVals[0+yyTop] != null)
			((Parameter) yyVal).DefaultValue = new DefaultParameterValueExpression ((Expression) yyVals[0+yyTop]);
	  }

void case_253()
#line 2955 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Parameter.Modifier p2 = (Parameter.Modifier)yyVals[0+yyTop];
  		Parameter.Modifier mod = (Parameter.Modifier)yyVals[-1+yyTop] | p2;
  		if (((Parameter.Modifier)yyVals[-1+yyTop] & p2) == p2) {
  			Error_DuplicateParameterModifier (lexer.Location, p2);
  		} else {
	  		switch (mod & ~Parameter.Modifier.This) {
  				case Parameter.Modifier.REF:
					report.Error (1101, lexer.Location, "The parameter modifiers `this' and `ref' cannot be used altogether");
  					break;
   				case Parameter.Modifier.OUT:
					report.Error (1102, lexer.Location, "The parameter modifiers `this' and `out' cannot be used altogether");
  					break;
  				default:
 					report.Error (1108, lexer.Location, "A parameter cannot have specified more than one modifier");
 					break;
 			}
  		}
  		yyVal = mod;
	  }

void case_254()
#line 2979 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Ref) == 0)
	  		Error_ParameterModifierNotValid ("ref", GetLocation (yyVals[0+yyTop]));
	  		
	  	yyVal = Parameter.Modifier.REF;
	  }

void case_255()
#line 2986 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Out) == 0)
	  		Error_ParameterModifierNotValid ("out", GetLocation (yyVals[0+yyTop]));
	  
	  	yyVal = Parameter.Modifier.OUT;
	  }

void case_256()
#line 2993 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.This) == 0)
	  		Error_ParameterModifierNotValid ("this", GetLocation (yyVals[0+yyTop]));

	  	if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "extension methods");
	  			
		yyVal = Parameter.Modifier.This;
	  }

void case_257()
#line 3006 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Attributes) yyVals[-3+yyTop], lt.Location);
	  }

void case_258()
#line 3011 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		report.Error (1751, GetLocation (yyVals[-4+yyTop]), "Cannot specify a default value for a parameter array");
		
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Attributes) yyVals[-5+yyTop], lt.Location);		
	  }

void case_259()
#line 3018 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-1+yyTop], null, (Attributes) yyVals[-3+yyTop], Location.Null);
	  }

void case_260()
#line 3027 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.Params) == 0)
			report.Error (1670, (GetLocation (yyVals[0+yyTop])), "The `params' modifier is not allowed in current context");
	  }

void case_261()
#line 3032 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Parameter.Modifier mod = (Parameter.Modifier)yyVals[0+yyTop];
		if ((mod & Parameter.Modifier.This) != 0) {
			report.Error (1104, GetLocation (yyVals[-1+yyTop]), "The parameter modifiers `this' and `params' cannot be used altogether");
		} else {
			report.Error (1611, GetLocation (yyVals[-1+yyTop]), "The params parameter cannot be declared as ref or out");
		}	  
	  }

void case_263()
#line 3048 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Arglist) == 0)
	  		report.Error (1669, GetLocation (yyVals[0+yyTop]), "__arglist is not valid in this context");
	  }

void case_264()
#line 3064 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		if (doc_support)
			tmpComment = Lexer.consume_doc_comment ();
	  }

void case_265()
#line 3070 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var type = (FullNamedExpression) yyVals[-3+yyTop];
		current_property = new Property (current_type, type, (Modifiers) yyVals[-4+yyTop],
			(MemberName) yyVals[-2+yyTop], (Attributes) yyVals[-5+yyTop]);
			
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (547, GetLocation (yyVals[-3+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		current_type.AddMember (current_property);
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[0+yyTop]));
		
		lexer.PropertyParsing = true;
	  }

void case_266()
#line 3084 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.PropertyParsing = false;

		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();
	  }

void case_267()
#line 3091 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lbag.AppendToMember (current_property, GetLocation (yyVals[0+yyTop]));
		lexer.parsing_modifiers = true;
	  }

void case_269()
#line 3103 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		if (doc_support)
			tmpComment = Lexer.consume_doc_comment ();
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_270()
#line 3110 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var type = (FullNamedExpression) yyVals[-3+yyTop];
		var property = new Property (current_type, type, (Modifiers) yyVals[-4+yyTop],
			(MemberName) yyVals[-2+yyTop], (Attributes) yyVals[-5+yyTop]);

		property.Get = new Property.GetMethod (property, Modifiers.COMPILER_GENERATED, null, property.Location);
		property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];

		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, property.Get.Block.StartLocation,
				"`{0}': interface members cannot have a definition", property.GetSignatureForError ());
		}

		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (547, GetLocation (yyVals[-3+yyTop]), "`{0}': property or indexer cannot have void type", property.GetSignatureForError ());

		if (doc_support)
			property.DocComment = ConsumeStoredComment ();

		current_type.AddMember (property);

		current_local_parameters = null;
	  }

void case_272()
#line 3138 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_273()
#line 3144 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		--lexer.parsing_block;
		((Property)current_property).Initializer = (Expression) yyVals[-1+yyTop];
		lbag.AppendToMember (current_property, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		end_block (GetLocation (yyVals[0+yyTop]));
		current_local_parameters = null;

		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_277()
#line 3173 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		valid_param_mod = 0;
		var type = (FullNamedExpression) yyVals[-5+yyTop];
		Indexer indexer = new Indexer (current_type, type, (MemberName) yyVals[-4+yyTop], (Modifiers) yyVals[-6+yyTop], (ParametersCompiled) yyVals[-1+yyTop], (Attributes) yyVals[-7+yyTop]);
			
		current_property = indexer;

  		current_type.AddIndexer (indexer);
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
  		
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (620, GetLocation (yyVals[-5+yyTop]), "`{0}': indexer return type cannot be `void'", indexer.GetSignatureForError ());  		

		if (indexer.ParameterInfo.IsEmpty) {
			report.Error (1551, GetLocation (yyVals[-3+yyTop]), "Indexers must have at least one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		lexer.PropertyParsing = true;
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];
	  }

void case_278()
#line 3199 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
 		lexer.PropertyParsing = false;
		current_local_parameters = null;

		if (current_property.AccessorFirst != null && current_property.AccessorFirst.Block == null)
			((Indexer) current_property).ParameterInfo.CheckParameters (current_property);
	  
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();
			
		current_property = null;		
	  }

void case_280()
#line 3219 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		current_property.Get = new Indexer.GetIndexerMethod (current_property, Modifiers.COMPILER_GENERATED, current_local_parameters, null, current_property.Location);
		current_property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];
	  }

void case_285()
#line 3237 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	if (yyToken == Token.CLOSE_BRACE) {
	  		report.Error (548, lexer.Location, "`{0}': property or indexer must have at least one accessor", current_property.GetSignatureForError ());
		} else {
			if (yyToken == Token.SEMICOLON)
				report.Error (1597, lexer.Location, "Semicolon after method or accessor block is not valid");
			else
				report.Error (1014, GetLocation (yyVals[0+yyTop]), "A get or set accessor expected");
		}
	  }

void case_286()
#line 3251 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
	  
		if (current_property.Get != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
		
		if (current_property is Indexer) {
			current_property.Get = new Indexer.GetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop], ((Indexer)current_property).ParameterInfo.Clone (),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Get = new Property.GetMethod (current_property,
				(Modifiers) yyVals[-1+yyTop], (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}	
	  
		current_local_parameters = current_property.Get.ParameterInfo;	  
		lbag.AddMember (current_property.Get, mod_locations);
		lexer.PropertyParsing = false;
	  }

void case_287()
#line 3273 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	if (yyVals[0+yyTop] != null) {
	  		current_property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];			
	  	
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Get.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Get.GetSignatureForError ());
			}		
		}
	  
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support)
			if (Lexer.doc_state == XmlCommentState.Error)
				Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_288()
#line 3294 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
		
		if (current_property.Set != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
	  
		if (current_property is Indexer) {
			current_property.Set = new Indexer.SetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop],
				ParametersCompiled.MergeGenerated (compiler,
				((Indexer)current_property).ParameterInfo, true, new Parameter (
					current_property.TypeExpression, "value", Parameter.Modifier.NONE, null, GetLocation (yyVals[0+yyTop])),
					null),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Set = new Property.SetMethod (current_property, (Modifiers) yyVals[-1+yyTop], 
				ParametersCompiled.CreateImplicitParameter (current_property.TypeExpression, GetLocation (yyVals[0+yyTop])),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}
		
		current_local_parameters = current_property.Set.ParameterInfo;	
		lbag.AddMember (current_property.Set, mod_locations);
		lexer.PropertyParsing = false;
	  }

void case_289()
#line 3321 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {		
			current_property.Set.Block = (ToplevelBlock) yyVals[0+yyTop];
		
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Set.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Set.GetSignatureForError ());
			}
		}
		
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support
			&& Lexer.doc_state == XmlCommentState.Error)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_291()
#line 3343 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		/* TODO: lbag*/
	  	yyVal = null;
	  }

void case_292()
#line 3348 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	Error_SyntaxError (1043, yyToken, "Invalid accessor body");
	  	yyVal = null;
	  }

void case_294()
#line 3368 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.ConstraintsParsing = true;
		push_current_container (new Interface (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-2+yyTop]));		
	  }

void case_295()
#line 3375 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }

void case_296()
#line 3389 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		--lexer.parsing_declaration;	  
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_297()
#line 3395 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] == null) {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		} else {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		yyVal = pop_current_class ();
	  }

void case_301()
#line 3416 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }

void case_302()
#line 3421 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }

void case_313()
#line 3464 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		OperatorDeclaration decl = (OperatorDeclaration) yyVals[-2+yyTop];
		if (decl != null) {
			Operator op = new Operator (
				current_type, decl.optype, decl.ret_type, (Modifiers) yyVals[-3+yyTop], 
				current_local_parameters,
				(ToplevelBlock) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop], decl.location);
				
			if (op.Block == null)
				op.ParameterInfo.CheckParameters (op);

			if (doc_support) {
				op.DocComment = tmpComment;
				Lexer.doc_state = XmlCommentState.Allowed;
			}

			/* Note again, checking is done in semantic analysis*/
			current_type.AddOperator (op);

			lbag.AddMember (op, mod_locations, lbag.GetLocations (decl));
		}
		
		current_local_parameters = null;
	  }

void case_315()
#line 3493 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		report.Error (590, GetLocation (yyVals[0+yyTop]), "User-defined operators cannot return void");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_316()
#line 3501 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		valid_param_mod = ParameterModifierType.DefaultValue;
		if ((Operator.OpType) yyVals[-1+yyTop] == Operator.OpType.Is)
			valid_param_mod |= ParameterModifierType.Out;
	  }

void case_317()
#line 3507 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		Operator.OpType op = (Operator.OpType) yyVals[-4+yyTop];
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];
		
		int p_count = current_local_parameters.Count;
		if (p_count == 1) {
			if (op == Operator.OpType.Addition)
				op = Operator.OpType.UnaryPlus;
			else if (op == Operator.OpType.Subtraction)
				op = Operator.OpType.UnaryNegation;
		}
		
		if (IsUnaryOperator (op)) {
			if (p_count == 2) {
				report.Error (1020, loc, "Overloadable binary operator expected");
			} else if (p_count != 1) {
				report.Error (1535, loc, "Overloaded unary operator `{0}' takes one parameter",
					Operator.GetName (op));
			}
		} else if (op == Operator.OpType.Is) {
			/* TODO: Special checks for is operator*/
		} else {
			if (p_count == 1) {
				report.Error (1019, loc, "Overloadable unary operator expected");
			} else if (p_count != 2) {
				report.Error (1534, loc, "Overloaded binary operator `{0}' takes two parameters",
					Operator.GetName (op));
			}
		}
		
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (op, (FullNamedExpression) yyVals[-6+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_341()
#line 3578 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (lang_version != LanguageVersion.Experimental)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "is user operator");

		yyVal = Operator.OpType.Is;
	  }

void case_343()
#line 3592 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  

		if (current_local_parameters.Count != 1) {
			report.Error (1535, loc, "Overloaded unary operator `implicit' takes one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_345()
#line 3615 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		valid_param_mod = 0;
		
		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  

		if (current_local_parameters.Count != 1) {
			report.Error (1535, loc, "Overloaded unary operator `explicit' takes one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Explicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_346()
#line 3634 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_347()
#line 3640 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	yyVal = new OperatorDeclaration (Operator.OpType.Explicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_348()
#line 3656 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{ 
		Constructor c = (Constructor) yyVals[-1+yyTop];
		
		c.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (doc_support)
			c.DocComment = ConsumeStoredComment ();

		current_local_parameters = null;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_349()
#line 3674 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		valid_param_mod = ParameterModifierType.All;
	  }

void case_350()
#line 3683 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		valid_param_mod = 0;
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];
		
		var lt = (LocatedToken) yyVals[-4+yyTop];
		var mods = (Modifiers) yyVals[-5+yyTop];
		var c = new Constructor (current_type, lt.Value, mods, (Attributes) yyVals[-6+yyTop], current_local_parameters, lt.Location);

		if (lt.Value != current_container.MemberName.Name) {
			report.Error (1520, c.Location, "Class, struct, or interface method must have a return type");
		} else if ((mods & Modifiers.STATIC) != 0) {
			if (!current_local_parameters.IsEmpty) {
				report.Error (132, c.Location, "`{0}': The static constructor must be parameterless",
					c.GetSignatureForError ());
			}

			if ((mods & Modifiers.AccessibilityMask) != 0){
				report.Error (515, c.Location,
					"`{0}': static constructor cannot have an access modifier",
					c.GetSignatureForError ());
			}
		} else {
			if (current_type.Kind == MemberKind.Struct && current_local_parameters.IsEmpty) {
				report.Error (568, c.Location, "Structs cannot contain explicit parameterless constructors");
			}
		}

		current_type.AddConstructor (c);
		lbag.AddMember (c, mod_locations, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = c;

		/**/
		/* start block here, so possible anonymous methods inside*/
		/* constructor initializer can get correct parent block*/
		/**/
	  	start_block (lexer.Location);
	  }

void case_351()
#line 3721 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			var c = (Constructor) yyVals[-1+yyTop];
			c.Initializer = (ConstructorInitializer) yyVals[0+yyTop];
			
			if (c.IsStatic) {
				report.Error (514, c.Location,
					"`{0}': static constructor cannot have an explicit `this' or `base' constructor call",
					c.GetSignatureForError ());
			}
		}

		yyVal = yyVals[-1+yyTop];
	  }

void case_357()
#line 3753 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	--lexer.parsing_block;
		yyVal = new ConstructorBaseInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_359()
#line 3763 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	--lexer.parsing_block;
		yyVal = new ConstructorThisInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_360()
#line 3769 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);	  
		yyVal = new ConstructorThisInitializer (null, GetLocation (yyVals[0+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_361()
#line 3775 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_362()
#line 3788 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
		
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_363()
#line 3797 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];
		if (lt.Value != current_container.MemberName.Name){
			report.Error (574, lt.Location, "Name of destructor must match name of class");
		} else if (current_container.Kind != MemberKind.Class){
			report.Error (575, lt.Location, "Only class types can contain destructor");
		}
		
		Destructor d = new Destructor (current_type, (Modifiers) yyVals[-6+yyTop],
			ParametersCompiled.EmptyReadOnlyParameters, (Attributes) yyVals[-7+yyTop], lt.Location);
		if (doc_support)
			d.DocComment = ConsumeStoredComment ();
		  
		d.Block = (ToplevelBlock) yyVals[0+yyTop];
		current_type.AddMember (d);
		lbag.AddMember (d, mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[-1+yyTop]));

		current_local_parameters = null;
	  }

void case_364()
#line 3827 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		current_event_field = new EventField (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], (MemberName) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop]);
		current_type.AddMember (current_event_field);
		
		if (current_event_field.MemberName.ExplicitInterface != null) {
			report.Error (71, current_event_field.Location, "`{0}': An explicit interface implementation of an event must use property syntax",
			current_event_field.GetSignatureForError ());
		}
		
		yyVal = current_event_field;
	  }

void case_365()
#line 3841 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (doc_support) {
			current_event_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AddMember (current_event_field, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_event_field = null;
	  }

void case_366()
#line 3854 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		current_event = new EventProperty (current_type, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-4+yyTop], (MemberName) yyVals[-1+yyTop], (Attributes) yyVals[-5+yyTop]);
		current_type.AddMember (current_event);
		lbag.AddMember (current_event, mod_locations, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		
		lexer.EventParsing = true;
	  }

void case_367()
#line 3862 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface)
			report.Error (69, GetLocation (yyVals[-2+yyTop]), "Event in interface cannot have add or remove accessors");
	  
		lexer.EventParsing = false;
	  }

void case_368()
#line 3869 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (doc_support) {
			current_event.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AppendToMember (current_event, GetLocation (yyVals[-1+yyTop]));
	  	current_event = null;	
		current_local_parameters = null;
	  }

void case_369()
#line 3882 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		current_type.AddMember (new EventField (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], MemberName.Null, (Attributes) yyVals[-4+yyTop]));
	  }

void case_372()
#line 3896 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	--lexer.parsing_block;
		current_event_field.Initializer = (Expression) yyVals[0+yyTop];
	  }

void case_377()
#line 3920 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_379()
#line 3930 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		--lexer.parsing_block;
		var lt = (LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_380()
#line 3939 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (68, lexer.Location, "`{0}': event in interface cannot have an initializer",
				current_event_field.GetSignatureForError ());
		}
		
	  	if ((current_event_field.ModFlags & Modifiers.ABSTRACT) != 0) {
			report.Error (74, lexer.Location, "`{0}': abstract event cannot have an initializer",
				current_event_field.GetSignatureForError ());
	  	}		
	  }

void case_384()
#line 3960 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_385()
#line 3965 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_386()
#line 3970 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{ 
		report.Error (1055, GetLocation (yyVals[0+yyTop]), "An add or remove accessor expected");
		yyVal = null;
	  }

void case_387()
#line 3978 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Add = new EventProperty.AddDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Add.ParameterInfo;
		
		lbag.AddMember (current_event.Add, mod_locations);
		lexer.EventParsing = false;		
	  }

void case_388()
#line 3990 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Add.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Add.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Add.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_389()
#line 4006 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Remove = new EventProperty.RemoveDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Remove.ParameterInfo;

		lbag.AddMember (current_event.Remove, mod_locations);
		lexer.EventParsing = false;		
	  }

void case_390()
#line 4018 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Remove.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Remove.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Remove.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_391()
#line 4034 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		report.Error (73, lexer.Location, "An add or remove accessor must have a body");
		yyVal = null;
	  }

void case_393()
#line 4049 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		current_type.UnattachedAttributes = (Attributes) yyVals[-1+yyTop];
		report.Error (1519, GetLocation (yyVals[-1+yyTop]), "An attribute is missing member declaration");
		lexer.putback ('}');
	  }

void case_394()
#line 4060 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		report.Error (1519, lexer.Location, "Unexpected symbol `}' in class, struct, or interface member declaration");
 
		lexer.putback ('}');

	  	lexer.parsing_generic_declaration = false;
		FullNamedExpression type = (FullNamedExpression) yyVals[-1+yyTop];
		current_field = new Field (current_type, type, (Modifiers) yyVals[-2+yyTop], MemberName.Null, (Attributes) yyVals[-3+yyTop]);
		current_type.AddField (current_field);
		yyVal = current_field;
	  }

void case_395()
#line 4083 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (doc_support)
			enumTypeComment = Lexer.consume_doc_comment ();
	  }

void case_396()
#line 4088 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;

		MemberName name = (MemberName) yyVals[-3+yyTop];
		if (name.IsGeneric) {
			report.Error (1675, name.Location, "Enums cannot have type parameters");
		}
		
		push_current_container (new Enum (current_container, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-5+yyTop], name, (Attributes) yyVals[-6+yyTop]), null);
	  }

void case_397()
#line 4100 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.parsing_modifiers = true;
	  
	  	/* here will be evaluated after CLOSE_BLACE is consumed.*/
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_398()
#line 4108 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (doc_support)
			current_container.DocComment = enumTypeComment;
			
		--lexer.parsing_declaration;

/*			if (doc_support)*/
/*				em.DocComment = ev.DocComment;*/

		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-1+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_401()
#line 4129 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	 	Error_TypeExpected (GetLocation (yyVals[-1+yyTop]));
		yyVal = null;
	 }

void case_406()
#line 4147 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	lbag.AddLocation (yyVals[-2+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	yyVal = yyVals[0+yyTop];
	  }

void case_407()
#line 4155 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-1+yyTop]);
	  	((Enum) current_type).AddEnumMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }

void case_408()
#line 4168 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	++lexer.parsing_block;
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
	  }

void case_409()
#line 4176 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{ 
		--lexer.parsing_block;
		
		var lt = (LocatedToken) yyVals[-3+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
	  	em.Initializer = new ConstInitializer (em, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	((Enum) current_type).AddEnumMember (em);
		
		if (doc_support)
			em.DocComment = ConsumeStoredComment ();

		yyVal = em;
	  }

void case_410()
#line 4190 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		var lt = (LocatedToken) yyVals[-1+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-2+yyTop]);
	  	((Enum) current_type).AddEnumMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }

void case_413()
#line 4222 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		valid_param_mod = 0;

		ParametersCompiled p = (ParametersCompiled) yyVals[-1+yyTop];

		Delegate del = new Delegate (current_container, (FullNamedExpression) yyVals[-5+yyTop], (Modifiers) yyVals[-7+yyTop], (MemberName) yyVals[-4+yyTop], p, (Attributes) yyVals[-8+yyTop]);

		p.CheckParameters (del);

		current_container.AddTypeContainer (del);

		current_delegate = del;
		lexer.ConstraintsParsing = true;
	  }

void case_415()
#line 4241 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (doc_support) {
			current_delegate.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  
		if (yyVals[-2+yyTop] != null)
			current_delegate.SetConstraints ((List<Constraints>) yyVals[-2+yyTop]);
		lbag.AddMember (current_delegate, mod_locations, GetLocation (yyVals[-10+yyTop]), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));

		yyVal = current_delegate;

		current_delegate = null;
	  }

void case_417()
#line 4265 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "nullable types");
	  
	  	yyVal = ComposedTypeSpecifier.CreateNullable (GetLocation (yyVals[0+yyTop]));
	  }

void case_419()
#line 4276 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_420()
#line 4284 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_422()
#line 4296 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_423()
#line 4302 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_424()
#line 4311 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);
	  }

void case_425()
#line 4316 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }

void case_427()
#line 4328 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");	  
	  
		yyVal = yyVals[-1+yyTop];
	  }

void case_428()
#line 4335 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_TypeExpected (lexer.Location);
		yyVal = new TypeArguments ();
	  }

void case_429()
#line 4343 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_430()
#line 4349 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_432()
#line 4365 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters)yyVals[0+yyTop], lt.Location);
	  }

void case_433()
#line 4374 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	MemberName mn = (MemberName)yyVals[0+yyTop];
	  	if (mn.TypeParameters != null)
	  		syntax_error (mn.Location, string.Format ("Member `{0}' cannot declare type arguments",
	  			mn.GetSignatureForError ()));
	  }

void case_435()
#line 4385 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters) yyVals[0+yyTop], (ATypeNameExpression) yyVals[-2+yyTop], lt.Location);
	  }

void case_436()
#line 4394 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		yyVal = new MemberName (TypeDefinition.DefaultIndexerName, GetLocation (yyVals[0+yyTop]));
	  }

void case_437()
#line 4399 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		yyVal = new MemberName (TypeDefinition.DefaultIndexerName, null, (ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_438()
#line 4407 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_439()
#line 4413 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt1 = (LocatedToken) yyVals[-3+yyTop];
		var lt2 = (LocatedToken) yyVals[-2+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[-1+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_440()
#line 4421 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberAccess ((ATypeNameExpression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_442()
#line 4431 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");
	  
		yyVal = yyVals[-1+yyTop];
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_443()
#line 4442 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var tparams = new TypeParameters ();
		tparams.Add ((TypeParameter)yyVals[0+yyTop]);
		yyVal = tparams;
	  }

void case_444()
#line 4448 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var tparams = (TypeParameters) yyVals[-2+yyTop];
		tparams.Add ((TypeParameter)yyVals[0+yyTop]);
		yyVal = tparams;
		lbag.AddLocation (yyVals[0+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_445()
#line 4458 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken)yyVals[0+yyTop];
		yyVal = new TypeParameter (new MemberName (lt.Value, lt.Location), (Attributes)yyVals[-2+yyTop], (VarianceDecl) yyVals[-1+yyTop]);
  	  }

void case_446()
#line 4463 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
  	  	if (GetTokenName (yyToken) == "type")
			report.Error (81, GetLocation (yyVals[0+yyTop]), "Type parameter declaration must be an identifier not a type");
		else
			Error_SyntaxError (yyToken);
			
  	  	yyVal = new TypeParameter (MemberName.Null, null, null);
  	  }

void case_455()
#line 4507 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		report.Error (1536, GetLocation (yyVals[0+yyTop]), "Invalid parameter type `void'");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_458()
#line 4523 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			yyVal = new ComposedCast ((ATypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			var sn = yyVals[-1+yyTop] as SimpleName;
			if (sn != null && sn.Name == "var")
				yyVal = new VarExpr (sn.Location);
			else
				yyVal = yyVals[-1+yyTop];
		}
	  }

void case_461()
#line 4543 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_462()
#line 4551 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] != null)
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_465()
#line 4567 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var types = new List<FullNamedExpression> (2);
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_466()
#line 4573 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var types = (List<FullNamedExpression>) yyVals[-2+yyTop];
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_467()
#line 4582 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast) {
			report.Error (1521, GetLocation (yyVals[0+yyTop]), "Invalid base type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
		}
		yyVal = yyVals[0+yyTop];
	  }

void case_506()
#line 4647 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
	       yyVal = new CompletionSimpleName (MemberName.MakeName (lt.Value, null), lt.Location);
	  }

void case_515()
#line 4680 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var list = new List<Expression> ();
		list.Add ((InterpolatedStringInsert) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_516()
#line 4686 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((StringLiteral) yyVals[-1+yyTop]);
		list.Add ((InterpolatedStringInsert) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_518()
#line 4700 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new InterpolatedStringInsert ((Expression) yyVals[-2+yyTop]) {
			Alignment = (Expression)yyVals[0+yyTop]
		};
	  }

void case_520()
#line 4710 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.parsing_interpolation_format = false;

		yyVal = new InterpolatedStringInsert ((Expression) yyVals[-3+yyTop]) {
			Format = (string)yyVals[0+yyTop]
		};
	  }

void case_522()
#line 4722 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.parsing_interpolation_format = false;

		yyVal = new InterpolatedStringInsert ((Expression) yyVals[-5+yyTop]) {
			Alignment = (Expression)yyVals[-3+yyTop],
			Format = (string) yyVals[0+yyTop]
		};
	  }

void case_527()
#line 4755 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_529()
#line 4767 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_530()
#line 4773 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_531()
#line 4779 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_6)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "null propagating operator");

		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new ConditionalMemberAccess ((Expression) yyVals[-4+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_532()
#line 4788 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_533()
#line 4794 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_534()
#line 4800 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new SimpleName ("await", ((LocatedToken) yyVals[-3+yyTop]).Location), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_535()
#line 4806 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_536()
#line 4814 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_538()
#line 4824 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
	  }

void case_540()
#line 4832 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
 	  }

void case_541()
#line 4840 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_542()
#line 4845 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_543()
#line 4852 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Invocation ((Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_546()
#line 4867 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] == null) {
	  		yyVal = new CollectionOrObjectInitializers (GetLocation (yyVals[-2+yyTop]));
	  	} else {
	  		yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  	}
 		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_547()
#line 4876 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_550()
#line 4892 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	var a = new List<Expression> ();
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_551()
#line 4898 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	var a = (List<Expression>)yyVals[-2+yyTop];
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_552()
#line 4903 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_553()
#line 4911 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	var lt = (LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_554()
#line 4917 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	var lt = (LocatedToken) Error_AwaitAsIdentifier (yyVals[-2+yyTop]);
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_556()
#line 4926 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		CompletionSimpleName csn = yyVals[-1+yyTop] as CompletionSimpleName;
		if (csn == null)
			yyVal = new CollectionElementInitializer ((Expression)yyVals[-1+yyTop]);
		else
			yyVal = new CompletionElementInitializer (csn.Prefix, csn.Location);
	  }

void case_557()
#line 4934 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (yyVals[-1+yyTop] == null)
			yyVal = new CollectionElementInitializer (GetLocation (yyVals[-2+yyTop]));
		else
	  		yyVal = new CollectionElementInitializer ((List<Expression>)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));

		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_558()
#line 4943 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_6)
			FeatureIsNotAvailable (GetLocation (yyVals[-4+yyTop]), "dictionary initializer");

		yyVal = new DictionaryElementInitializer ((Arguments)yyVals[-3+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_559()
#line 4951 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	report.Error (1920, GetLocation (yyVals[-1+yyTop]), "An element initializer cannot be empty");
		yyVal = new CollectionElementInitializer (GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_564()
#line 4970 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{ 
		Arguments list = new Arguments (4);
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_565()
#line 4976 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		if (list [list.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) list [list.Count - 1]);
		
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_566()
#line 4985 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		NamedArgument a = (NamedArgument) yyVals[0+yyTop];
		for (int i = 0; i < list.Count; ++i) {
			NamedArgument na = list [i] as NamedArgument;
			if (na != null && na.Name == a.Name)
				report.Error (1740, na.Location, "Named argument `{0}' specified multiple times",
					na.Name);
		}
		
		list.Add (a);
		yyVal = list;
	  }

void case_567()
#line 4999 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	if (lexer.putback_char == -1)
	  		lexer.putback (')'); /* TODO: Wrong but what can I do*/
		Error_SyntaxError (yyToken);
		yyVal = yyVals[-2+yyTop];
	  }

void case_568()
#line 5006 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	report.Error (839, GetLocation (yyVals[-1+yyTop]), "An argument is missing");
	  	yyVal = null;
	  }

void case_573()
#line 5027 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_575()
#line 5036 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_577()
#line 5045 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Argument (new Arglist ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_578()
#line 5050 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Argument (new Arglist (GetLocation (yyVals[-2+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_579()
#line 5058 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_580()
#line 5075 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (lang_version != LanguageVersion.Experimental)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "declaration expression");

		var lt = (LocatedToken) yyVals[0+yyTop];
		var lv = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (lv);
		yyVal = new DeclarationExpression ((FullNamedExpression) yyVals[-1+yyTop], lv);
	  }

void case_581()
#line 5085 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (lang_version != LanguageVersion.Experimental)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "declaration expression");

		var lt = (LocatedToken) yyVals[-2+yyTop];
		var lv = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (lv);
		yyVal = new DeclarationExpression ((FullNamedExpression) yyVals[-3+yyTop], lv) {
			Initializer = (Expression) yyVals[0+yyTop]
		};
	  }

void case_583()
#line 5104 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_584()
#line 5109 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_6)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "null propagating operator");

		yyVal = new ElementAccess ((Expression) yyVals[-4+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop])) {
			ConditionalAccess = true
		};

		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_585()
#line 5120 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_586()
#line 5125 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_587()
#line 5133 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_588()
#line 5139 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_589()
#line 5148 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }

void case_590()
#line 5154 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Arguments args = (Arguments) yyVals[-2+yyTop];
		if (args [args.Count - 1] is NamedArgument && !(yyVals[0+yyTop] is NamedArgument))
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
	  
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;	  
	  }

void case_594()
#line 5181 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	yyVal = new ElementAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_595()
#line 5186 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = new ElementAccess (null, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_598()
#line 5208 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			if (lang_version <= LanguageVersion.ISO_2)
				FeatureIsNotAvailable (GetLocation (yyVals[-5+yyTop]), "object initializers");
				
			yyVal = new NewInitialize ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		} else {
			yyVal = new New ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], GetLocation (yyVals[-5+yyTop]));
		}
		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_599()
#line 5221 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "collection initializers");
	  
		yyVal = new NewInitialize ((FullNamedExpression) yyVals[-1+yyTop], null, (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_600()
#line 5233 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], (List<Expression>) yyVals[-3+yyTop],
				new ComposedTypeSpecifier (((List<Expression>) yyVals[-3+yyTop]).Count, GetLocation (yyVals[-4+yyTop])) {
	  				Next = (ComposedTypeSpecifier) yyVals[-1+yyTop]
			  	}, (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_601()
#line 5241 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	if (yyVals[0+yyTop] == null)
	  		report.Error (1586, GetLocation (yyVals[-3+yyTop]), "Array creation must have array size or array initializer");

		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-2+yyTop], (ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }

void case_602()
#line 5248 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "implicitly typed arrays");
	  
		yyVal = new ImplicitlyTypedArrayCreation ((ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_603()
#line 5255 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		report.Error (178, GetLocation (yyVals[-1+yyTop]), "Invalid rank specifier, expecting `,' or `]'");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], null, GetLocation (yyVals[-6+yyTop]));
	  }

void case_604()
#line 5260 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		/* It can be any of new expression, create the most common one*/
		yyVal = new New ((FullNamedExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_606()
#line 5272 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		--lexer.parsing_type;
		yyVal = yyVals[0+yyTop];
	  }

void case_607()
#line 5286 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "anonymous types");

		yyVal = new NewAnonymousType ((List<AnonymousTypeParameter>) yyVals[-1+yyTop], current_container, GetLocation (yyVals[-3+yyTop]));
		
		/* TODO: lbag comma location*/
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_613()
#line 5313 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	var a = new List<AnonymousTypeParameter> (4);
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_614()
#line 5319 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	var a = (List<AnonymousTypeParameter>) yyVals[-2+yyTop];
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_617()
#line 5336 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken)yyVals[-2+yyTop];
	  	yyVal = new AnonymousTypeParameter ((Expression)yyVals[0+yyTop], lt.Value, lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_618()
#line 5342 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken)yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (new SimpleName (lt.Value, lt.Location),
	  		lt.Value, lt.Location);
	  }

void case_619()
#line 5348 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	MemberAccess ma = (MemberAccess) yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (ma, ma.Name, ma.Location);
	  }

void case_620()
#line 5353 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		report.Error (746, lexer.Location,
			"Invalid anonymous type member declarator. Anonymous type members must be a member assignment, simple name or member access expression");
		yyVal = null;
	  }

void case_624()
#line 5374 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_625()
#line 5382 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_626()
#line 5387 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension ((int)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_631()
#line 5417 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var ai = new ArrayInitializer (0, GetLocation (yyVals[-1+yyTop]));
		ai.VariableDeclaration = current_variable;
		lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		yyVal = ai;
	  }

void case_632()
#line 5424 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var ai = new ArrayInitializer ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
		ai.VariableDeclaration = current_variable;
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (ai, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		}
		yyVal = ai;
	  }

void case_633()
#line 5438 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_634()
#line 5444 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_635()
#line 5459 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new TypeOf ((FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_637()
#line 5468 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	 	Error_TypeExpected (lexer.Location);
	 	yyVal = null;
	 }

void case_638()
#line 5476 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "generics");

		yyVal = yyVals[0+yyTop];
	  }

void case_639()
#line 5486 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (lt.Location, "namespace alias qualifier");

		yyVal = lt;		
	  }

void case_640()
#line 5497 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{ 
		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_641()
#line 5502 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_642()
#line 5512 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new CheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_643()
#line 5517 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new CheckedExpr (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_644()
#line 5526 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new UnCheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_645()
#line 5531 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new UnCheckedExpr (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_646()
#line 5540 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new Indirection ((Expression) yyVals[-3+yyTop], GetLocation (yyVals[-2+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }

void case_654()
#line 5579 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		valid_param_mod = 0;
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_655()
#line 5593 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "default value expression");

		yyVal = new DefaultValueExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_659()
#line 5613 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_660()
#line 5618 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (!async_block) {
			 if (current_anonymous_method is LambdaExpression) {
				report.Error (4034, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing lambda expression is marked with the `async' modifier");
			} else if (current_anonymous_method != null) {
				report.Error (4035, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing anonymous method is marked with the `async' modifier");
			} else if (interactive_async != null) {
				current_block.Explicit.RegisterAsyncAwait ();
				interactive_async = true;
			} else {
				report.Error (4033, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing method is marked with the `async' modifier");
			}
		} else {
			current_block.Explicit.RegisterAsyncAwait ();
		}
		
		yyVal = new Await ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_661()
#line 5640 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.LogicalNot, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_662()
#line 5646 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.OnesComplement, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_663()
#line 5652 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_664()
#line 5659 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Await (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_672()
#line 5697 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{ 
		Error_SyntaxError (yyToken);

	  	yyVal = new Unary (Unary.Operator.UnaryPlus, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_673()
#line 5703 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{ 
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.UnaryNegation, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_674()
#line 5709 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_675()
#line 5715 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_676()
#line 5721 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Indirection (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_677()
#line 5727 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.AddressOf, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_679()
#line 5737 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_680()
#line 5742 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_681()
#line 5747 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_682()
#line 5752 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_683()
#line 5759 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Division, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_684()
#line 5766 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_686()
#line 5777 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_687()
#line 5782 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_688()
#line 5787 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_689()
#line 5794 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_691()
#line 5805 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var is_expr = new Is ((Expression) yyVals[-3+yyTop], (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		if (yyVals[0+yyTop] != null) {
			if (lang_version != LanguageVersion.Experimental)
				FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "type pattern matching");

			var lt = (LocatedToken) yyVals[0+yyTop];
			is_expr.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
			current_block.AddLocalName (is_expr.Variable);
		}

		yyVal = is_expr;
	  }

void case_692()
#line 5819 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var is_expr = new Is ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
		if (lang_version != LanguageVersion.Experimental)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "pattern matching");

		yyVal = is_expr;
	  }

void case_693()
#line 5827 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new As ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_694()
#line 5833 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Is ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_695()
#line 5839 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new Is (new SimpleName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_696()
#line 5844 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new As (new SimpleName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_703()
#line 5872 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_709()
#line 5900 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var list = new List<PropertyPatternMember> ();
		list.Add ((PropertyPatternMember) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_710()
#line 5906 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var list = (List<PropertyPatternMember>) yyVals[-2+yyTop];
		list.Add ((PropertyPatternMember) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_711()
#line 5915 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new PropertyPatternMember (lt.Value, (Expression) yyVals[0+yyTop], lt.Location);
	  }

void case_713()
#line 5924 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	if (yyVals[0+yyTop] != null) {
			var lt = (LocatedToken) yyVals[0+yyTop];
			var variable = new LocalVariable (current_block, lt.Value, lt.Location);
			current_block.AddLocalName (variable);
		}
	  }

void case_716()
#line 5943 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }

void case_717()
#line 5949 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Arguments args = (Arguments) yyVals[-2+yyTop];
		if (args [args.Count - 1] is NamedArgument && !(yyVals[0+yyTop] is NamedArgument))
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);

		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }

void case_719()
#line 5965 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop]);
	  }

void case_721()
#line 5980 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_722()
#line 5985 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_723()
#line 5990 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_724()
#line 5997 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_726()
#line 6008 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThan, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_727()
#line 6013 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThan, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_728()
#line 6018 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThanOrEqual, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_729()
#line 6023 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_730()
#line 6028 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LessThan, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_731()
#line 6035 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.GreaterThan, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_732()
#line 6042 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LessThanOrEqual, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_733()
#line 6049 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_735()
#line 6060 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Equality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_736()
#line 6065 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Inequality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_737()
#line 6070 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Equality, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_738()
#line 6077 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Inequality, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_740()
#line 6088 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_741()
#line 6093 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_743()
#line 6104 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_744()
#line 6109 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_746()
#line 6120 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_747()
#line 6125 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_749()
#line 6136 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_750()
#line 6141 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LogicalAnd, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_752()
#line 6152 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_753()
#line 6157 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LogicalOr, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_755()
#line 6168 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "null coalescing operator");
			
		yyVal = new Nullable.NullCoalescingOperator ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_757()
#line 6180 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_758()
#line 6185 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-3+yyTop]), (Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_759()
#line 6191 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_760()
#line 6198 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (Token.CLOSE_BRACE);

		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
		lexer.putback ('}');
	  }

void case_761()
#line 6209 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new SimpleAssign ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_762()
#line 6214 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_763()
#line 6219 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_764()
#line 6224 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_765()
#line 6229 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_766()
#line 6234 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_767()
#line 6239 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_768()
#line 6244 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_769()
#line 6249 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_770()
#line 6254 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_771()
#line 6259 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_772()
#line 6272 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var pars = new List<Parameter> (4);
		pars.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = pars;
	  }

void case_773()
#line 6279 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter)yyVals[0+yyTop];
		if (pars[0].GetType () != p.GetType ()) {
			report.Error (748, p.Location, "All lambda parameters must be typed either explicitly or implicitly");
		}
		
		pars.Add (p);
		yyVal = pars;
	  }

void case_774()
#line 6293 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], null, lt.Location);
	  }

void case_775()
#line 6299 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, Parameter.Modifier.NONE, null, lt.Location);
	  }

void case_776()
#line 6305 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }

void case_777()
#line 6310 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	var lt = (LocatedToken) Error_AwaitAsIdentifier (yyVals[0+yyTop]);
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }

void case_779()
#line 6318 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{ 
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
		yyVal = new ParametersCompiled (pars_list.ToArray ());
	  }

void case_781()
#line 6329 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Block b = end_block (Location.Null);
		b.IsCompilerGenerated = true;
		b.AddStatement (new ContextualReturn ((Expression) yyVals[0+yyTop]));
		yyVal = b;
	  }

void case_783()
#line 6337 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	/* Handles only cases like foo = x.FirstOrDefault (l => );*/
	  	/* where we must restore current_variable*/
		Block b = end_block (Location.Null);
		b.IsCompilerGenerated = true;

		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_785()
#line 6351 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_786()
#line 6359 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];	
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), false, lt.Location);
	  }

void case_787()
#line 6365 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_788()
#line 6370 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) Error_AwaitAsIdentifier (yyVals[-1+yyTop]);
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), false, lt.Location);
	  }

void case_789()
#line 6376 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_790()
#line 6381 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), true, lt.Location);
	  }

void case_791()
#line 6387 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_793()
#line 6396 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], false, GetLocation (yyVals[-4+yyTop]));
	  }

void case_794()
#line 6401 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_796()
#line 6410 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], true, GetLocation (yyVals[-5+yyTop]));
	  }

void case_797()
#line 6415 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_804()
#line 6438 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new RefValueExpr ((Expression) yyVals[-3+yyTop], (FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_805()
#line 6443 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new RefTypeExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_806()
#line 6448 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new MakeRefExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));	  
	  }

void case_811()
#line 6475 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = yyVals[-1+yyTop];

		/* Cannot use opt_formal_parameter_list because it can be shared instance for empty parameters*/
	  	lbag.AppendToMember (current_container, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));

		if (lang_version != LanguageVersion.Experimental)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "primary constructor");
	  }

void case_816()
#line 6504 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		++lexer.parsing_block;
		current_type.PrimaryConstructorBaseArgumentsStart = GetLocation (yyVals[0+yyTop]);
	  }

void case_817()
#line 6509 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lbag.AppendToMember (current_container, GetLocation (yyVals[0+yyTop]));
		current_type.PrimaryConstructorBaseArguments = (Arguments) yyVals[-1+yyTop];
		--lexer.parsing_block;

		yyVal = yyVals[-5+yyTop];
	  }

void case_820()
#line 6539 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		ports_to_construct = new List<string>();
		static_ports_to_construct = new List<string>();
	  }

void case_821()
#line 6544 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.ConstraintsParsing = true;

		Class c = new Class (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]);
		if (((c.ModFlags & Modifiers.STATIC) != 0) && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (c.Location, "static classes");
		}
		
		c.IsComponent = ((LocatedToken)(yyVals[-2+yyTop])).Value == "component";
		
		push_current_container (c, yyVals[-3+yyTop]);
		valid_param_mod = ParameterModifierType.PrimaryConstructor;
	  }

void case_822()
#line 6559 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		valid_param_mod = 0;
		lexer.ConstraintsParsing = false;

		if (yyVals[-1+yyTop] != null)
			current_type.PrimaryConstructorParameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);
		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-5+yyTop]));

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }

void case_823()
#line 6578 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_824()
#line 6584 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  
		/*+COPPER This method is called to initialize ports on instances*/
		/*NOTE: If constructors call each other, this method may run more */
		/*than once. It has no side effects beyond setting ports, so this */
		/*should not alter the semantics of the program.*/
		
		var this_class = (Class)current_container;
		
		bool is_static = ((Modifiers)yyVals[-13+yyTop]) == Modifiers.STATIC;
		
		var embed_ports_method = new Method(
			this_class,
			new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-10+yyTop])),
			Modifiers.PUBLIC,/*Modifiers.PRIVATE,*/
			new MemberName("EmbedPorts"),
			current_local_parameters,
			null
		);
		
		var embed_ports_static_method = new Method(
			this_class,
			new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-10+yyTop])),
			Modifiers.STATIC | Modifiers.PUBLIC,/*Modifiers.PRIVATE,*/
			new MemberName("EmbedPortsStatic"),
			current_local_parameters,
			null
		);
			
		start_block( GetLocation(yyVals[-11+yyTop]) );
		/*loop through each port and initialize it*/
		foreach( var port_name in ports_to_construct ) {
			/*we don't have a useful location for compiler generated */
			/*syntax transformations*/
			var loc = GetLocation(yyVals[-11+yyTop]); 
		
			var new_args = new Arguments(1);
			new_args.Add( new Argument( new This( loc ) ) );
		
			var init_stat = new CompilerAssign(
				new SimpleName( port_name,loc ),
				new New( 
					new SimpleName( "Port_" + port_name, GetLocation(yyVals[-11+yyTop]) ),
					new_args, loc ),
				loc
			);
		
			current_block.AddStatement( 
				new StatementExpression( init_stat ) );
		}
		embed_ports_method.Block = (ToplevelBlock)end_block( GetLocation(yyVals[-11+yyTop]) );
		
		/* OLD: We now use initializers for static ports instead.
		start_block( GetLocation($4) );
		//loop through each port and initialize it
		foreach( var port_name in static_ports_to_construct ) {
			//we don't have a useful location for compiler generated 
			//syntax transformations
			var loc = GetLocation($4); 
		
			var new_args = new Arguments(1);
			new_args.Add( new Argument( new TypeOf(
					new SimpleName( "Port_" + port_name, GetLocation($4) ),
					GetLocation($4) ) ) );
			
			var init_stat = new CompilerAssign(
				new SimpleName( port_name,loc ),
				new New( 
					new SimpleName( "Port_" + port_name, GetLocation($4) ),
					new_args, loc ),
				loc
			);
		
			current_block.AddStatement( 
				new StatementExpression( init_stat ) );
		}
		embed_ports_static_method.Block = (ToplevelBlock)end_block( GetLocation($4) );
		*/
		if( !is_static )
			this_class.AddMember( embed_ports_method );
		/*this_class.AddMember( embed_ports_static_method );*/
		
		if (yyVals[0+yyTop] == null) {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		} else {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		
		/* if HasPorts ...((Class)current_container).AddEmbedPortsCode();*/
		
		
		/*This function is actually called twice, once in the */
		/*DefineDefaultConstructors method and once here. */
		/*This is a little inefficient, but I haven't found a good hook for */
		/*it yet. */
		/*if( current_container.HasPorts) */
		/*	this_class.AddEmbedPortsCode();*/
		
		yyVal = pop_current_class ();
	  }

void case_827()
#line 6700 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	    mod_locations = null;
		yyVal = ModifierNone;
		lexer.parsing_modifiers = false;
	  }

void case_830()
#line 6716 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{ 
		var m1 = (Modifiers) yyVals[-1+yyTop];
		var m2 = (Modifiers) yyVals[0+yyTop];

		if ((m1 & m2) != 0) {
			report.Error (1004, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"Duplicate `{0}' modifier", ModifiersExtensions.Name (m2));
		} else if ((m2 & Modifiers.AccessibilityMask) != 0 && (m1 & Modifiers.AccessibilityMask) != 0 &&
			((m2 | m1 & Modifiers.AccessibilityMask) != (Modifiers.PROTECTED | Modifiers.INTERNAL))) {
			report.Error (107, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"More than one protection modifier specified");
		}
		
		yyVal = m1 | m2;
	  }

void case_831()
#line 6735 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = Modifiers.NEW;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		
		if (current_container.Kind == MemberKind.Namespace)
			report.Error (1530, GetLocation (yyVals[0+yyTop]), "Keyword `new' is not allowed on namespace elements");
	  }

void case_832()
#line 6743 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = Modifiers.PUBLIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_833()
#line 6748 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = Modifiers.PROTECTED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_834()
#line 6753 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = Modifiers.INTERNAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_835()
#line 6758 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = Modifiers.PRIVATE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_836()
#line 6763 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = Modifiers.ABSTRACT;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_837()
#line 6768 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = Modifiers.SEALED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_838()
#line 6773 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = Modifiers.STATIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_839()
#line 6778 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = Modifiers.READONLY;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_840()
#line 6783 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = Modifiers.VIRTUAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_841()
#line 6788 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = Modifiers.OVERRIDE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_842()
#line 6793 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = Modifiers.EXTERN;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_843()
#line 6798 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = Modifiers.VOLATILE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_844()
#line 6803 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = Modifiers.UNSAFE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_845()
#line 6810 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = Modifiers.ASYNC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_846()
#line 6815 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	    yyVal = Modifiers.NONE;
		StoreDirectionModifierOrDie(Port.Direction.In, GetLocation(yyVals[0+yyTop]));
	  }

void case_847()
#line 6820 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	    yyVal = Modifiers.NONE;
	    StoreDirectionModifierOrDie(Port.Direction.Out, GetLocation(yyVals[0+yyTop]));
	  }

void case_850()
#line 6839 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if( ParsingPortOrInterface ) {
			report.Error( 99901, GetLocation(yyVals[0+yyTop]),
				"Base types are not yet supported for ports." );
		}
	 
		current_type.SetBaseTypes ((List<FullNamedExpression>) yyVals[0+yyTop]);
	 }

void case_851()
#line 6848 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		current_type.SetBaseTypes ((List<FullNamedExpression>) yyVals[-1+yyTop]);
	  }

void case_854()
#line 6871 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var constraints = new List<Constraints> (1);
		constraints.Add ((Constraints) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_855()
#line 6877 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var constraints = (List<Constraints>) yyVals[-1+yyTop];
		Constraints new_constraint = (Constraints)yyVals[0+yyTop];

		foreach (Constraints c in constraints) {
			if (new_constraint.TypeParameter.Value == c.TypeParameter.Value) {
				report.Error (409, new_constraint.Location,
					"A constraint clause has already been specified for type parameter `{0}'",
					new_constraint.TypeParameter.Value);
			}
		}

		constraints.Add (new_constraint);
		yyVal = constraints;
	  }

void case_856()
#line 6896 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), (List<FullNamedExpression>) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_857()
#line 6902 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_858()
#line 6912 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var constraints = new List<FullNamedExpression> (1);
		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_859()
#line 6918 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var constraints = (List<FullNamedExpression>) yyVals[-2+yyTop];
		var prev = constraints [constraints.Count - 1] as SpecialContraintExpr;
		if (prev != null && (prev.Constraint & SpecialConstraint.Constructor) != 0) {			
			report.Error (401, GetLocation (yyVals[-1+yyTop]), "The `new()' constraint must be the last constraint specified");
		}
		
		prev = yyVals[0+yyTop] as SpecialContraintExpr;
		if (prev != null) {
			if ((prev.Constraint & (SpecialConstraint.Class | SpecialConstraint.Struct)) != 0) {
				report.Error (449, prev.Location, "The `class' or `struct' constraint must be the first constraint specified");			
			} else {
			 	prev = constraints [0] as SpecialContraintExpr;
			 	if (prev != null && (prev.Constraint & SpecialConstraint.Struct) != 0) {			
					report.Error (451, GetLocation (yyVals[0+yyTop]), "The `new()' constraint cannot be used with the `struct' constraint");
				}
			}
		}

		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_860()
#line 6944 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast)
			report.Error (706, GetLocation (yyVals[0+yyTop]), "Invalid constraint type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
	  
	  	yyVal = yyVals[0+yyTop];
	  }

void case_861()
#line 6951 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new SpecialContraintExpr (SpecialConstraint.Constructor, GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_865()
#line 6971 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (lexer.Location, "generic type variance");
		
		yyVal = yyVals[0+yyTop];
	  }

void case_868()
#line 7011 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		++lexer.parsing_block;
		
		/*parsing_block_in_with = parsing_connection_with;*/
		
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_869()
#line 7019 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = yyVals[0+yyTop];
		
	  }

void case_870()
#line 7027 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_871()
#line 7032 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (lexer.Location);
	  }

void case_872()
#line 7041 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		++lexer.parsing_block;
		current_block.StartLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_873()
#line 7046 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_881()
#line 7073 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_924()
#line 7147 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_925()
#line 7152 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_926()
#line 7157 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_927()
#line 7165 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		/* Uses lexer.Location because semicolon location is not kept in quick mode*/
		yyVal = new EmptyStatement (lexer.Location);
	  }

void case_928()
#line 7173 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		LabeledStatement labeled = new LabeledStatement (lt.Value, current_block, lt.Location);
		lbag.AddLocation (labeled, GetLocation (yyVals[0+yyTop]));
		current_block.AddLabel (labeled);
		current_block.AddStatement (labeled);
	  }

void case_931()
#line 7186 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (yyVals[-1+yyTop] is VarExpr)
			yyVals[-1+yyTop] = new SimpleName ("var", ((VarExpr) yyVals[-1+yyTop]).Location);
	  
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_932()
#line 7202 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{ 
		/* Ok, the above "primary_expression" is there to get rid of*/
		/* both reduce/reduce and shift/reduces in the grammar, it should*/
		/* really just be "type_name".  If you use type_name, a reduce/reduce*/
		/* creeps up.  If you use namespace_or_type_name (which is all we need*/
		/* really) two shift/reduces appear.*/
		/* */

		/* So the super-trick is that primary_expression*/
		/* can only be either a SimpleName or a MemberAccess. */
		/* The MemberAccess case arises when you have a fully qualified type-name like :*/
		/* Foo.Bar.Blah i;*/
		/* SimpleName is when you have*/
		/* Blah i;*/
		
		var expr = (ATypeNameExpression) yyVals[-1+yyTop];
		if (yyVals[0+yyTop] == null) {
			if (expr.Name == "var" && expr is SimpleName)
				yyVal = new VarExpr (expr.Location);
			else
				yyVal = yyVals[-1+yyTop];
		} else {
			yyVal = new ComposedCast (expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		}
	  }

void case_933()
#line 7228 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var expr = (ATypeNameExpression) yyVals[-1+yyTop];
		yyVal = new ComposedCast (expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_937()
#line 7239 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_941()
#line 7268 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariable ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_942()
#line 7275 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		if (yyVals[-2+yyTop] != null)
			lbag.AddLocation (yyVal, PopLocation (), GetLocation (yyVals[0+yyTop]));
		else
			lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_943()
#line 7284 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockConstant ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_944()
#line 7291 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_946()
#line 7301 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		PushLocation (GetLocation (yyVals[-1+yyTop]));
		yyVal = current_variable;
	  }

void case_947()
#line 7307 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	if (yyToken == Token.OPEN_BRACKET_EXPR) {
			report.Error (650, lexer.Location,
				"Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type");
		} else {
			Error_SyntaxError (yyToken);
		}
	  }

void case_951()
#line 7325 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		foreach (var d in current_variable.Declarators) {
			if (d.Initializer == null)
				Error_MissingInitializer (d.Variable.Location);
		}
	  }

void case_954()
#line 7340 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclarator (li, null);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-1+yyTop]));
	  }

void case_955()
#line 7349 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_962()
#line 7382 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		var d = new BlockVariableDeclarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_964()
#line 7395 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new StackAlloc ((Expression) yyVals[-3+yyTop], (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_965()
#line 7400 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		report.Error (1575, GetLocation (yyVals[-1+yyTop]), "A stackalloc expression requires [] after type");
		yyVal = new StackAlloc ((Expression) yyVals[0+yyTop], null, GetLocation (yyVals[-1+yyTop]));		
	  }

void case_966()
#line 7414 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_968()
#line 7420 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		report.Error (1002, GetLocation (yyVals[0+yyTop]), "; expected");
		lexer.putback ('}');
	  }

void case_971()
#line 7438 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		ExpressionStatement s = yyVals[0+yyTop] as ExpressionStatement;
		if (s == null) {
			var expr = yyVals[0+yyTop] as Expression;
			yyVal = new StatementErrorExpression (expr);
		} else {
			yyVal = new StatementExpression (s);
		}
	  }

void case_972()
#line 7451 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Expression expr = (Expression) yyVals[0+yyTop];
		yyVal = new StatementExpression (new OptionalAssign (expr, lexer.Location));
	  }

void case_973()
#line 7456 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_976()
#line 7470 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{ 
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		yyVal = new If ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_977()
#line 7479 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new If ((BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		
		if (yyVals[-2+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[-2+yyTop]));
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_978()
#line 7489 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new If ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_980()
#line 7503 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Switch ((Expression) yyVals[-5+yyTop], (ExplicitBlock) current_block.Explicit, GetLocation (yyVals[-7+yyTop]));	
		end_block (GetLocation (yyVals[0+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]));
	  }

void case_981()
#line 7509 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		yyVal = new Switch ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));	
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_988()
#line 7540 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	var label = (SwitchLabel) yyVals[0+yyTop];
	  	label.SectionStart = true;
		current_block.AddStatement (label);
	  }

void case_990()
#line 7553 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	 	yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	 	lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	 }

void case_991()
#line 7558 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_997()
#line 7589 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new While ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_998()
#line 7597 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new While ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_999()
#line 7607 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Do ((Statement) yyVals[-5+yyTop], (BooleanExpression) yyVals[-2+yyTop], GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_1000()
#line 7612 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Do ((Statement) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]), Location.Null);
	  }

void case_1001()
#line 7617 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		yyVal = new Do ((Statement) yyVals[-4+yyTop], (BooleanExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_1002()
#line 7627 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		start_block (GetLocation (yyVals[0+yyTop]));
		current_block.IsCompilerGenerated = true;
		For f = new For (GetLocation (yyVals[-1+yyTop]));
		current_block.AddStatement (f);
		yyVal = f;
	  }

void case_1004()
#line 7643 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		((For) yyVals[-2+yyTop]).Initializer = (Statement) yyVals[-1+yyTop];

		/* Pass the "For" object to the iterator_part4*/
		oob_stack.Push (yyVals[-2+yyTop]);
	  }

void case_1005()
#line 7651 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var locations = (Tuple<Location,Location>) yyVals[-1+yyTop];
		oob_stack.Pop ();
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		For f = ((For) yyVals[-5+yyTop]);
		f.Statement = (Statement) yyVals[0+yyTop];
		lbag.AddStatement (f, current_block.StartLocation, GetLocation (yyVals[-3+yyTop]), GetLocation (locations.Item1), GetLocation (locations.Item2));

		yyVal = end_block (GetLocation (yyVals[-3+yyTop]));
	  }

void case_1006()
#line 7664 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = end_block (current_block.StartLocation);
	  }

void case_1007()
#line 7672 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		For f = (For) oob_stack.Peek ();
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
	  }

void case_1009()
#line 7682 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol `}'");
		For f = (For) oob_stack.Peek ();
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
		yyVal = new Tuple<Location,Location> (GetLocation (yyVals[0+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_1010()
#line 7691 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	For f = (For) oob_stack.Peek ();
		f.Iterator = (Statement) yyVals[-1+yyTop];
		yyVal = GetLocation (yyVals[0+yyTop]);
	  }

void case_1011()
#line 7696 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol expected ')'");
		For f = (For) oob_stack.Peek ();
		f.Iterator = (Statement) yyVals[-1+yyTop];
		yyVal = GetLocation (yyVals[0+yyTop]);
	  }

void case_1016()
#line 7716 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariable ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_1017()
#line 7723 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = current_variable;
		if (yyVals[-1+yyTop] != null)
			lbag.AddLocation (current_variable, PopLocation ());

		current_variable = null;
	  }

void case_1025()
#line 7750 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	var sl = yyVals[-2+yyTop] as StatementList;
	  	if (sl == null) {
	  		sl = new StatementList ((Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop]);
			lbag.AddStatement (sl, GetLocation (yyVals[-1+yyTop]));
	  	} else {
	  		sl.Add ((Statement) yyVals[0+yyTop]);
	  		lbag.AppendTo (sl, GetLocation (yyVals[-1+yyTop]));
	  	}
	  		
		yyVal = sl;
	  }

void case_1026()
#line 7766 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		report.Error (230, GetLocation (yyVals[-3+yyTop]), "Type and identifier are both required in a foreach statement");

		start_block (GetLocation (yyVals[-2+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		Foreach f = new Foreach ((Expression) yyVals[-1+yyTop], null, null, null, null, GetLocation (yyVals[-3+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_1027()
#line 7779 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	
		start_block (GetLocation (yyVals[-3+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		var lt = (LocatedToken) yyVals[-1+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		
		Foreach f = new Foreach ((Expression) yyVals[-2+yyTop], li, null, null, null, GetLocation (yyVals[-4+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-3+yyTop]));
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_1028()
#line 7796 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		start_block (GetLocation (yyVals[-5+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		var lt = (LocatedToken) yyVals[-3+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		yyVal = li;
	  }

void case_1029()
#line 7806 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		Foreach f = new Foreach ((Expression) yyVals[-6+yyTop], (LocalVariable) yyVals[-1+yyTop], (Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], current_block, GetLocation (yyVals[-8+yyTop]));
		lbag.AddStatement (f, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		end_block (GetLocation (yyVals[-2+yyTop]));
		
		yyVal = f;
	  }

void case_1036()
#line 7829 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Break (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1037()
#line 7837 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1038()
#line 7842 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
	  }

void case_1039()
#line 7850 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new Goto (lt.Value, GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_1040()
#line 7856 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new GotoCase ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_1041()
#line 7861 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new GotoDefault (GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_1042()
#line 7869 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1043()
#line 7874 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_1044()
#line 7879 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Return (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_1045()
#line 7887 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1046()
#line 7892 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_1047()
#line 7897 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Throw (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_1048()
#line 7905 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_1049()
#line 7921 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		var lt = (LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_1050()
#line 7939 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.ParametersBlock.TopBlock.IsIterator = true;
		yyVal = new YieldBreak (lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_1054()
#line 7965 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new TryFinally ((Statement) yyVals[-2+yyTop], (ExplicitBlock) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_1055()
#line 7970 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new TryFinally (new TryCatch ((Block) yyVals[-3+yyTop], (List<Catch>) yyVals[-2+yyTop], Location.Null, true), (ExplicitBlock) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_1056()
#line 7975 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (1524, yyToken);
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]), false);
	  }

void case_1057()
#line 7983 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var l = new List<Catch> (2);

		l.Add ((Catch) yyVals[0+yyTop]);
		yyVal = l;
	  }

void case_1058()
#line 7990 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var l = (List<Catch>) yyVals[-1+yyTop];
		
		Catch c = (Catch) yyVals[0+yyTop];
		var prev_catch = l [l.Count - 1];
		if (prev_catch.IsGeneral && prev_catch.Filter == null) {
			report.Error (1017, c.loc, "Try statement already has an empty catch block");
		}
		
		l.Add (c);
		yyVal = l;
	  }

void case_1061()
#line 8011 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	var c = new Catch ((ExplicitBlock) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  	c.Filter = (CatchFilterExpression) yyVals[-1+yyTop];
	  	yyVal = c;
	  }

void case_1062()
#line 8017 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		start_block (GetLocation (yyVals[-3+yyTop]));
		var c = new Catch ((ExplicitBlock) current_block, GetLocation (yyVals[-4+yyTop]));
		c.TypeExpression = (FullNamedExpression) yyVals[-2+yyTop];

		if (yyVals[-1+yyTop] != null) {
			var lt = (LocatedToken) yyVals[-1+yyTop];
			c.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
			current_block.AddLocalName (c.Variable);
		}
		
		lbag.AddLocation (c, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = c;
		lexer.parsing_catch_when = true;
	  }

void case_1063()
#line 8033 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	((Catch) yyVals[-1+yyTop]).Filter = (CatchFilterExpression) yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }

void case_1064()
#line 8038 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	if (yyToken == Token.CLOSE_PARENS) {
			report.Error (1015, lexer.Location,
				"A type that derives from `System.Exception', `object', or `string' expected");
		} else {
			Error_SyntaxError (yyToken);
		}
		
		yyVal = new Catch (null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_1066()
#line 8056 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		end_block (Location.Null);
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_1069()
#line 8072 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (lang_version <= LanguageVersion.V_5)
			FeatureIsNotAvailable (GetLocation (yyVals[-4+yyTop]), "exception filter");

		yyVal = new CatchFilterExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_1072()
#line 8097 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_1074()
#line 8107 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Lock ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_1075()
#line 8115 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Lock ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_1076()
#line 8125 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.FixedVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Fixed.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_1077()
#line 8135 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_1078()
#line 8140 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Fixed f = new Fixed ((Fixed.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		current_block.AddStatement (f);
		lbag.AddStatement (f, GetLocation (yyVals[-8+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_1079()
#line 8159 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.UsingVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Using.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_1080()
#line 8169 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = current_variable;	  
		current_variable = null;
	  }

void case_1081()
#line 8174 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Using u = new Using ((Using.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-8+yyTop]));
		current_block.AddStatement (u);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_1082()
#line 8183 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Using ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_1083()
#line 8191 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new Using ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_1085()
#line 8202 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  }

void case_1087()
#line 8214 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		yyVal = current_variable;
	  }

void case_1088()
#line 8227 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		lexer.query_parsing = false;
			
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_1089()
#line 8239 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_1090()
#line 8250 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	        lexer.query_parsing = false;
		yyVal = yyVals[-1+yyTop];

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_1091()
#line 8257 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	        yyVal = yyVals[-1+yyTop];
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_1092()
#line 8266 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		var clause = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (clause, GetLocation (yyVals[-1+yyTop]));
		yyVal = new Linq.QueryExpression (clause);
	  }

void case_1093()
#line 8276 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		var clause = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
		};
		lbag.AddLocation (clause, GetLocation (yyVals[-1+yyTop]));
		yyVal = new Linq.QueryExpression (clause);
	  }

void case_1094()
#line 8291 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		var clause = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (clause, GetLocation (yyVals[-1+yyTop]));
		yyVal = new Linq.QueryExpression (clause);
	  }

void case_1095()
#line 8301 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		var clause = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
		};
		lbag.AddLocation (clause, GetLocation (yyVals[-1+yyTop]));
		yyVal = new Linq.QueryExpression (clause);
	  }

void case_1097()
#line 8320 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_1099()
#line 8336 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);

		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop])) {
			IdentifierType = (FullNamedExpression)yyVals[-4+yyTop]
		};
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_1100()
#line 8355 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[-1+yyTop];
		
		if (yyVals[0+yyTop] != null)
			head.Next = (Linq.AQueryClause)yyVals[0+yyTop];
				
		if (yyVals[-2+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-2+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_1101()
#line 8370 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[0+yyTop];

		if (yyVals[-1+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-1+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_1103()
#line 8383 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		report.Error (742, GetLocation (yyVals[0+yyTop]), "Unexpected symbol `{0}'. A query body must end with select or group clause", GetSymbolName (yyToken));
		yyVal = yyVals[-1+yyTop];
	  }

void case_1104()
#line 8388 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_1106()
#line 8400 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Linq.Select ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_1107()
#line 8407 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
	  	if (linq_clause_blocks == null)
	  		linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  	linq_clause_blocks.Push ((Linq.QueryBlock)current_block);
	  }

void case_1108()
#line 8415 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_1109()
#line 8422 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var obj = (object[]) yyVals[0+yyTop];

		yyVal = new Linq.GroupBy ((Linq.QueryBlock)current_block, (Expression)yyVals[-2+yyTop], linq_clause_blocks.Pop (), (Expression)obj[0], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, (Location) obj[1]);
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_1111()
#line 8439 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new object[2] { null, Location.Null };
	  }

void case_1113()
#line 8448 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-1+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }

void case_1120()
#line 8468 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
	  	yyVal = new Linq.Let ((Linq.QueryBlock) current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  	
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_1122()
#line 8487 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Linq.Where ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_1123()
#line 8497 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_1124()
#line 8505 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_1125()
#line 8513 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_1126()
#line 8521 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();

		var lt = (LocatedToken) yyVals[-10+yyTop];	
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-11+yyTop]));
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]));
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
			
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location);

			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-11+yyTop]));	
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		}

		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);
	  }

void case_1127()
#line 8559 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_1128()
#line 8567 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_1129()
#line 8575 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_1130()
#line 8583 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();
		
		var lt = (LocatedToken) yyVals[-10+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;		
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};
			lbag.AddLocation (yyVal, GetLocation (yyVals[-10+yyTop]), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]));
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
		
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location); /* TODO:*/
			
			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};			
		}
		
		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);		
	  }

void case_1134()
#line 8639 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		yyVal = yyVals[0+yyTop];
	  }

void case_1136()
#line 8650 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_1137()
#line 8657 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	  }

void case_1139()
#line 8666 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock ((Linq.QueryBlock) current_block, lexer.Location);	 
	 }

void case_1140()
#line 8673 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	 }

void case_1142()
#line 8685 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1143()
#line 8690 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Linq.OrderByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1145()
#line 8702 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1146()
#line 8707 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		yyVal = new Linq.ThenByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1148()
#line 8717 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		/* query continuation block is not linked with query block but with block*/
		/* before. This means each query can use same range variable names for*/
		/* different identifiers.*/

		current_block.SetEndLocation (GetLocation (yyVals[-1+yyTop]));
		current_block = current_block.Parent;
	
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);		
	  }

void case_1149()
#line 8733 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var current_block = linq_clause_blocks.Pop ();	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
  		yyVal = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, null, rv, GetLocation (yyVals[-3+yyTop])) {
  			next = (Linq.AQueryClause)yyVals[0+yyTop]
  		};
	  }

void case_1152()
#line 8766 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{ 
		current_container = current_type = new Class (current_container, new MemberName ("<InteractiveExpressionClass>"), Modifiers.PUBLIC, null);

		/* (ref object retval)*/
		Parameter [] mpar = new Parameter [1];
		mpar [0] = new Parameter (new TypeExpression (compiler.BuiltinTypes.Object, Location.Null), "$retval", Parameter.Modifier.REF, null, Location.Null);

		ParametersCompiled pars = new ParametersCompiled (mpar);
		var mods = Modifiers.PUBLIC | Modifiers.STATIC;
		if (settings.Unsafe)
			mods |= Modifiers.UNSAFE;

		current_local_parameters = pars;
		var method = new InteractiveMethod (
			current_type,
			new TypeExpression (compiler.BuiltinTypes.Void, Location.Null),
			mods,
			pars);
			
		current_type.AddMember (method);			
		oob_stack.Push (method);

		interactive_async = false;

		++lexer.parsing_block;
		start_block (lexer.Location);
	  }

void case_1153()
#line 8794 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		--lexer.parsing_block;
		var method = (InteractiveMethod) oob_stack.Pop ();
		method.Block = (ToplevelBlock) end_block(lexer.Location);

		if (interactive_async == true) {
			method.ChangeToAsync ();
		}

		InteractiveResult = (Class) pop_current_class ();
		current_local_parameters = null;
	  }

void case_1163()
#line 8840 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-1+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		yyVal = null;
	  }

void case_1164()
#line 8846 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		yyVal = null;
	  }

void case_1165()
#line 8852 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-3+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value);
	  }

void case_1168()
#line 8867 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-6+yyTop], MemberCache.IndexerNameAlias, Location.Null);
	  }

void case_1169()
#line 8872 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Explicit;
		yyVal = null;
	  }

void case_1170()
#line 8880 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Implicit;
		yyVal = null;
	  }

void case_1171()
#line 8888 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop];
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = (Operator.OpType) yyVals[-1+yyTop];
		yyVal = null;
	  }

void case_1179()
#line 8926 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var parameters = new List<DocumentationParameter> ();
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_1180()
#line 8932 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		var parameters = yyVals[-2+yyTop] as List<DocumentationParameter>;
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_1181()
#line 8941 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"
{
		if (yyVals[-1+yyTop] != null)
			yyVal = new DocumentationParameter ((Parameter.Modifier) yyVals[-1+yyTop], (FullNamedExpression) yyVals[0+yyTop]);
		else
			yyVal = new DocumentationParameter ((FullNamedExpression) yyVals[0+yyTop]);
	  }

#line default
   static readonly short [] yyLhs  = {              -1,
    0,    4,    0,    0,    1,    1,    1,    1,    2,    2,
   11,   11,   12,   12,   13,   13,   14,   15,   15,   15,
   16,   16,   20,   21,   18,   18,   23,   23,   23,   19,
   19,   19,   24,   24,   25,   25,    7,    7,    6,    6,
   22,   22,    8,    8,   26,   26,   26,   27,   27,   27,
   27,   27,   27,   27,   35,   35,   39,   41,   43,   45,
   34,   44,   44,   46,   46,   47,   47,   47,   47,   47,
   47,   47,   47,   47,   47,   47,   47,   47,   47,   60,
   61,   63,   64,   65,   67,   33,   33,   68,   68,   66,
   66,   69,   69,   72,   70,   73,   73,   75,   75,   77,
   77,   71,   71,   78,   78,   79,   81,   82,   83,   84,
    9,    9,   10,   10,   87,   85,   90,   86,   86,   86,
   86,   88,   88,   88,   89,   89,   94,   91,   92,   93,
   93,   95,   95,   95,   95,   95,   96,   96,   96,   99,
   97,   98,  102,  101,  101,  101,  104,  104,  105,  105,
  106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
  106,  106,  106,  106,  108,   56,  110,  112,  113,  114,
  115,   29,   29,  118,   48,   48,  119,  119,  120,  120,
  121,  123,  117,  117,  122,  122,  128,   49,  132,   49,
   49,  127,  135,  127,  129,  129,  136,  136,  137,  138,
  137,  133,  133,  139,  139,  140,  141,  131,  131,  134,
  134,  134,  144,   50,  147,  148,  142,  149,  150,  151,
  142,  142,  142,  143,  143,  153,  153,  156,  154,  146,
  146,   74,   74,   74,   74,   74,   74,   74,   74,   74,
   74,  157,  157,  160,  160,  160,  160,  163,  160,  161,
  161,  164,  164,  165,  165,  165,  158,  158,  158,  166,
  166,  166,  159,  168,  170,  171,  173,   51,  174,   51,
  172,  176,  172,  175,  175,  178,  180,   53,  179,  179,
  169,  169,  169,  169,  169,  184,  181,  185,  182,  183,
  183,  183,  186,  187,  188,  190,   30,   30,  189,  189,
  191,  191,  192,  192,  192,  192,  192,  192,  192,  192,
  192,  194,   54,  195,  195,  198,  193,  193,  197,  197,
  197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
  197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
  197,  200,  199,  201,  199,  199,  199,   55,  204,  206,
  202,  203,  203,  205,  205,  210,  208,  211,  208,  208,
  208,  212,   57,  214,   52,  217,  218,   52,   52,  213,
  220,  213,  215,  215,  221,  221,  222,  223,  222,  224,
  219,  216,  216,  216,  216,  216,  228,  225,  229,  226,
  227,  227,   58,   59,  231,  233,  234,   31,  230,  230,
  230,  232,  232,  232,  235,  235,  236,  237,  236,  236,
  236,  238,  239,  240,   32,  241,  241,   17,   17,   17,
  242,  242,  242,  246,  246,  244,  244,  244,  247,  247,
  249,   38,  167,  145,  145,  177,  177,  250,  250,  250,
  248,  248,  251,  251,  252,  252,  254,  254,  126,  116,
  116,  130,  130,  162,  162,  196,  196,  256,  256,  256,
  255,  259,  259,  259,  261,  261,  262,  260,  260,  260,
  260,  260,  260,  260,  263,  263,  263,  263,  263,  263,
  263,  263,  263,  264,  264,  264,  264,  264,  264,  264,
  264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
  264,  264,  264,  264,  265,  265,  265,  266,  266,  266,
  287,  287,  285,  285,  288,  288,  289,  289,  290,  289,
  291,  289,  292,  292,  293,  293,  268,  268,  286,  286,
  286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
  270,  270,  270,  294,  294,  295,  295,  296,  296,  298,
  298,  298,  299,  299,  299,  299,  299,  299,  299,  300,
  300,  209,  209,   80,   80,   80,   80,   80,  305,  305,
  304,  304,  306,  306,  306,  306,  306,  306,  308,  308,
  308,  307,  271,  271,  271,  271,  303,  303,  310,  310,
  311,  311,  272,  273,  273,  274,  275,  276,  276,  267,
  267,  267,  267,  267,  316,  312,  277,  277,  317,  317,
  318,  318,  319,  319,  319,  319,  320,  320,  320,  320,
  313,  313,  257,  257,  315,  315,  321,  321,  314,  314,
  125,  125,  322,  322,  278,  323,  323,  245,  243,  279,
  279,  280,  280,  281,  281,  282,  325,  283,  326,  283,
  324,  324,  328,  327,  269,  329,  329,  329,  329,  329,
  329,  329,  329,  329,  330,  330,  330,  330,  330,  330,
  330,  330,  330,  330,  330,  330,  330,  331,  331,  331,
  331,  331,  331,  331,  332,  332,  332,  332,  332,  332,
  332,  332,  332,  332,  332,  332,  333,  335,  335,  335,
  335,  335,  335,  335,  335,  335,  336,  337,  339,  339,
  340,  341,  341,  338,  338,  342,  342,  343,  343,  344,
  344,  344,  344,  344,  345,  345,  345,  345,  345,  345,
  345,  345,  345,  346,  346,  346,  346,  346,  347,  347,
  347,  348,  348,  348,  349,  349,  349,  350,  350,  350,
  351,  351,  351,  352,  352,  353,  353,  353,  353,  353,
  354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
  354,  355,  355,  356,  356,  356,  356,  357,  357,  359,
  358,  358,  358,  103,  103,  361,  360,  362,  360,  363,
  360,  364,  365,  360,  366,  367,  360,   76,   76,  301,
  301,  301,  301,  284,  284,  284,  124,  369,  111,  111,
  370,   40,   40,   40,   40,  372,   40,  373,  373,  374,
  375,  376,  377,   28,   37,   37,   36,   36,  152,  152,
  378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
  378,  378,  378,  378,  378,  378,  378,   62,   62,  371,
  371,   42,   42,  379,  379,  380,  380,  381,  381,  382,
  382,  382,  382,  253,  253,  383,  383,  384,  155,  109,
  109,  385,  207,  107,  107,  386,  386,  387,  387,  387,
  387,  391,  391,  392,  392,  392,  389,  389,  389,  389,
  389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
  389,  389,  389,  389,  393,  393,  393,  393,  393,  393,
  393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
  393,  393,  407,  407,  407,  407,  394,  408,  390,  309,
  309,  409,  409,  409,  409,  258,  258,  410,  100,  100,
  412,  388,  415,  388,  411,  411,  411,  413,  413,  419,
  419,  418,  418,  420,  420,  414,  414,  416,  416,  421,
  421,  422,  417,  417,  417,  395,  395,  395,  406,  406,
  423,  424,  424,  396,  396,  425,  425,  425,  428,  426,
  426,  427,  427,  429,  429,  429,  430,  431,  431,  432,
  432,  432,  397,  397,  397,  397,  433,  433,  434,  434,
  434,  438,  435,  441,  437,  437,  444,  440,  440,  443,
  443,  445,  445,  439,  439,  448,  447,  447,  442,  442,
  446,  446,  450,  449,  449,  436,  436,  451,  436,  398,
  398,  398,  398,  398,  398,  452,  453,  453,  454,  454,
  454,  455,  455,  455,  456,  456,  456,  457,  457,  457,
  458,  458,  399,  399,  399,  399,  459,  459,  334,  334,
  460,  463,  460,  460,  462,  462,  461,  464,  461,  400,
  401,  465,  404,  402,  402,  467,  468,  405,  470,  471,
  403,  403,  403,  469,  469,  466,  466,  368,  368,  368,
  368,  472,  472,  474,  474,  476,  475,  477,  475,  473,
  473,  473,  473,  473,  481,  479,  482,  484,  479,  483,
  483,  478,  478,  485,  485,  485,  485,  485,  490,  486,
  491,  487,  492,  493,  494,  488,  496,  497,  498,  488,
  495,  495,  500,  489,  499,  503,  499,  502,  505,  502,
  501,  501,  501,  504,  504,  504,  480,  506,  480,    3,
    3,  507,    3,    3,  508,  508,  302,  302,  297,  297,
    5,  509,  509,  509,  509,  509,  513,  509,  509,  509,
  509,  510,  510,  511,  514,  511,  512,  512,  515,  515,
  516,
  };
   static readonly short [] yyLen = {           2,
    2,    0,    3,    1,    2,    4,    3,    1,    0,    1,
    1,    2,    4,    2,    1,    2,    1,    4,    6,    2,
    0,    1,    0,    0,   11,    3,    0,    1,    1,    1,
    3,    1,    0,    1,    0,    1,    0,    1,    0,    1,
    0,    1,    1,    2,    1,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    0,    0,    0,    0,
   15,    0,    1,    1,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    0,    0,    0,    0,    0,   16,    5,    1,    2,    0,
    1,    1,    1,    0,    5,    1,    0,    7,    1,    1,
    2,    0,    1,    0,    1,    4,    3,    4,    3,    3,
    0,    1,    1,    2,    0,    3,    0,    6,    3,    2,
    1,    1,    1,    1,    1,    3,    0,    3,    1,    0,
    3,    0,    1,    1,    3,    3,    1,    1,    1,    0,
    4,    4,    1,    0,    1,    1,    0,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    0,    4,    0,    0,    0,    0,
    0,   17,    5,    0,    9,    5,    0,    1,    1,    2,
    3,    0,    3,    1,    1,    1,    0,    8,    0,    9,
    6,    0,    0,    3,    0,    1,    1,    2,    2,    0,
    5,    0,    1,    1,    2,    3,    0,    4,    2,    1,
    1,    1,    0,    3,    0,    0,   10,    0,    0,    0,
   12,    8,    5,    1,    1,    1,    1,    0,    4,    0,
    1,    1,    3,    3,    3,    5,    3,    5,    1,    1,
    1,    1,    3,    4,    6,    2,    4,    0,    7,    0,
    1,    1,    2,    1,    1,    1,    4,    6,    4,    1,
    2,    2,    1,    0,    0,    0,    0,   12,    0,    6,
    0,    0,    4,    1,    1,    0,    0,   10,    3,    1,
    1,    2,    1,    2,    1,    0,    5,    0,    5,    1,
    1,    1,    0,    0,    0,    0,   15,    5,    0,    1,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    0,    5,    1,    1,    0,    7,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    0,    7,    0,    7,    2,    2,    2,    0,    0,
    9,    1,    1,    0,    1,    0,    6,    0,    6,    2,
    1,    0,    8,    0,    9,    0,    0,   10,    5,    0,
    0,    3,    0,    1,    1,    2,    2,    0,    5,    0,
    2,    2,    2,    1,    1,    1,    0,    5,    0,    5,
    1,    1,    2,    4,    0,    0,    0,   12,    0,    2,
    2,    0,    1,    2,    1,    3,    2,    0,    5,    3,
    1,    0,    0,    0,   13,    0,    1,    1,    3,    3,
    1,    4,    4,    2,    2,    0,    3,    2,    1,    3,
    0,    3,    1,    1,    3,    1,    2,    3,    4,    4,
    0,    3,    1,    3,    3,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    2,    2,    1,
    1,    2,    2,    2,    1,    3,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    2,    1,    1,    1,    1,
    1,    1,    3,    1,    1,    3,    1,    3,    0,    4,
    0,    6,    1,    1,    1,    1,    3,    3,    4,    4,
    5,    4,    4,    4,    3,    3,    3,    4,    3,    4,
    4,    4,    3,    0,    1,    3,    4,    0,    1,    1,
    3,    2,    3,    3,    1,    2,    3,    5,    2,    1,
    1,    0,    1,    1,    3,    3,    3,    2,    1,    1,
    1,    1,    2,    2,    2,    2,    4,    3,    3,    2,
    4,    1,    4,    5,    4,    3,    1,    3,    1,    3,
    1,    1,    1,    4,    3,    2,    2,    6,    3,    7,
    4,    3,    7,    3,    0,    2,    4,    3,    1,    2,
    0,    1,    1,    3,    1,    2,    3,    1,    1,    1,
    0,    1,    1,    2,    2,    3,    1,    2,    0,    1,
    2,    4,    1,    3,    4,    1,    1,    1,    2,    4,
    4,    4,    2,    4,    2,    4,    0,    4,    0,    5,
    0,    1,    0,    4,    4,    1,    2,    2,    4,    2,
    2,    2,    4,    2,    1,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    1,    3,    3,
    3,    3,    3,    3,    1,    3,    3,    3,    3,    3,
    4,    3,    3,    3,    3,    3,    1,    1,    2,    2,
    1,    1,    4,    1,    1,    1,    4,    4,    1,    3,
    3,    1,    2,    0,    1,    1,    3,    1,    3,    1,
    3,    3,    3,    3,    1,    3,    3,    3,    3,    3,
    3,    3,    3,    1,    3,    3,    3,    3,    1,    3,
    3,    1,    3,    3,    1,    3,    3,    1,    3,    3,
    1,    3,    3,    1,    3,    1,    5,    4,    5,    5,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    1,    3,    3,    2,    1,    1,    0,    1,    0,
    2,    1,    1,    1,    1,    0,    4,    0,    4,    0,
    5,    0,    0,    7,    0,    0,    8,    1,    1,    1,
    1,    1,    1,    6,    4,    4,    1,    1,    0,    1,
    3,    0,    1,    1,    2,    0,    6,    1,    1,    0,
    0,    0,    0,   15,    0,    1,    0,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    0,    1,    2,
    3,    0,    1,    1,    2,    4,    3,    1,    3,    1,
    3,    1,    1,    0,    1,    1,    1,    0,    4,    1,
    1,    0,    4,    0,    1,    1,    2,    1,    1,    1,
    1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    0,    4,    1,
    2,    2,    2,    1,    1,    1,    2,    1,    1,    1,
    0,    6,    0,    7,    0,    2,    1,    0,    1,    0,
    1,    1,    2,    2,    4,    0,    2,    0,    1,    1,
    2,    4,    1,    5,    2,    2,    2,    2,    2,    2,
    1,    1,    1,    1,    1,    5,    7,    4,    0,    8,
    4,    0,    1,    1,    2,    1,    2,    1,    2,    3,
    3,    1,    1,    1,    1,    1,    5,    4,    7,    3,
    6,    0,    4,    0,    5,    1,    0,    4,    2,    2,
    2,    1,    1,    0,    1,    0,    5,    1,    0,    1,
    0,    1,    1,    1,    3,    4,    5,    0,    9,    1,
    1,    1,    1,    1,    1,    2,    2,    2,    3,    4,
    3,    3,    3,    2,    3,    3,    2,    4,    4,    3,
    0,    1,    3,    4,    5,    3,    1,    2,    0,    1,
    3,    0,    7,    3,    2,    1,    0,    0,    5,    2,
    2,    0,    3,    5,    4,    0,    0,   10,    0,    0,
    9,    5,    4,    2,    1,    0,    2,    2,    2,    2,
    2,    4,    5,    4,    5,    0,    5,    0,    6,    3,
    2,    2,    2,    1,    0,    3,    0,    0,    5,    2,
    1,    1,    2,    1,    1,    1,    1,    1,    0,    5,
    0,    3,    0,    0,    0,   12,    0,    0,    0,   13,
    0,    2,    0,    3,    1,    0,    4,    1,    0,    4,
    1,    2,    2,    1,    2,    2,    0,    0,    4,    2,
    3,    0,    4,    2,    2,    3,    0,    1,    1,    1,
    2,    2,    2,    2,    4,    3,    0,    7,    4,    4,
    3,    1,    3,    0,    0,    4,    0,    1,    1,    3,
    2,
  };
   static readonly short [] yyDefRed = {            0,
    8,    0,    0,    0,    0,    0,    0,    0,    2,    4,
    0,    0,   11,   14,    0, 1150,    0,    0, 1154,    0,
    0,   15,   17,  470,  476,  483,  471,  473,    0,  472,
    0,  479,  481,  468,    0,  475,  477,  469,  480,  482,
  478,    0,  431, 1172,    0,  474, 1161,    0,   10,    1,
    0,    0,    0,   12,    0,  973,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  512,
    0,    0,    0,    0,    0,    0,    0,  510,    0,    0,
    0,  593,    0,  511,    0,    0,    0, 1072,    0,    0,
    0,  803,    0,    0,    0,    0,    0,    0,    0,    0,
  514,  868,    0,  927,    0,    0,    0,    0,    0,    0,
    0,    0,  509,    0,  792,    0,  972,  918,  919,  920,
  921,  922,    0,  905,    0,  505,  935,  934,    0,    0,
    0,  485,  486,  487,  488,  489,  490,  491,  492,  493,
  494,  495,  496,  497,  498,  499,  500,  501,  502,  503,
  504,  507,  508,  799,    0,  665,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  800,  798,
  801,  802,  884,  886,    0,  882,  885,  906,  908,  909,
  910,  911,  912,  913,  914,  915,  916,  917,  907,    0,
    0,  974,  975,  993,  994,  995,  996, 1030, 1031, 1032,
 1033, 1034, 1035,    0,    0,    0,   20,   22,    0, 1158,
   16, 1151,    0,    0,  324,  341,  323,  320,  325,  326,
  319,  338,  337,  330,  331,  327,  329,  328,  332,  321,
  322,  333,  334,  340,  339,  335,  336,    0, 1175, 1164,
    0,    0, 1163,    0, 1162,    3,  115,    0,    0,    0,
   46,   43,   45,   48,   49,   50,   51,   52,   53,   54,
  113,   13,    0,    0,    0,    0,    0,    0,  569,    0,
  572,    0,    0,  484,  564,  571,  570,    0,    0,    0,
    0,    0,    0,    0, 1036,  643,  523,  524, 1070,    0,
    0,    0,    0,    0,    0, 1038, 1037,    0,  653,  647,
  652,  926,  971,  900,  901,  902,  903,  904,  887,  924,
  923,  925,  888,  889,  890,  891,  892,  893,  894,  895,
  896,  897,  898,  899,    0,    0,    0, 1002,    0,    0,
    0,  940,  939,    0,    0,    0,    0,    0,    0,    0,
    0, 1044,    0,    0,    0,    0,    0,    0, 1047,    0,
    0,    0,    0,  645, 1071,    0,    0,    0,  938,  464,
    0,    0,    0,    0,    0,    0,  450,  418,    0,  421,
  451,    0,  460,    0,    0,    0,    0,    0,    0,    0,
  795,    0,  664,    0,    0,  788,    0,    0,  660,    0,
    0,  515,    0,    0,  662,  658,  672,  666,  673,  667,
  661,  657,  677,  671,  676,  670,  674,  668,  675,  669,
  786,  639,    0,  638,  506,  424,  425,    0,    0,    0,
    0,    0,  928,    0,  417,    0,  462,  463,    0,    0,
  596,  597,    0,    0,    0,  932,  933,  941,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1153,  883,  931,    0,  969,  970, 1104, 1121,    0,
    0, 1105, 1107,    0, 1133, 1090, 1088, 1114,    0,    0,
 1112, 1115, 1116, 1117, 1118, 1091, 1089,    0,    0,    0,
    0,    0,    0, 1171,    0,    0,  432,    0,    0, 1173,
    0,    0,   44,  836,  842,  846,  834,    0,  831,  847,
  841,  835,  833,  832,  839,  837,  838,  844,  840,  843,
  845,    0,    0,  829,   47,  114,    0,  582,  575,  576,
    0,  573,  574,    0,  568,    0,    0,  105,    0,    0,
  107,    0,  109,  110,  595,    0,  591,  592,    0,  589,
    0,  943,    0,    0,    0, 1000,    0,  968,  966,  967,
    0,    0,    0,  807,    0, 1041, 1039,  808,    0,    0,
  620,    0,    0,  608,  615,    0,    0,    0,  609,    0,
    0,  625,  627,    0,  604,    0,    0,    0,    0,    0,
  599,    0,  602,  606,  453,  452, 1043, 1042,    0,    0,
 1046, 1045, 1056,    0,    0,    0, 1057,  637,    0,  447,
  636,    0,    0, 1073,    0,    0,  937,    0,    0,  458,
  459,    0,    0,    0,  457,    0,    0,    0,  678,    0,
    0,  649,    0,  790,  696,  695,    0,    0,    0,  519,
    0,  513,  881,    0,    0,  876,  878,  879,  880,  527,
  528,    0,  428,  429,    0,  255,  254,  256,    0,  777,
    0,    0,    0,  454,    0,  772,    0,    0, 1050,    0,
    0,    0,  535,  536,    0,  539,    0,    0,    0,    0,
  537,    0,    0,  586,    0,  543,    0,    0,    0,  761,
  762,  763,  764,  765,  766,  767,  768,  769,  771,  770,
  682,  679,  684,  681,  683,  680,  693,  690,  694,    0,
    0,  704,    0,    0,    0,    0,    0,  697,    0,  692,
  705,  706,  688,    0,  689,    0,  723,    0,    0,  724,
    0,  730,    0,  731,    0,  732,    0,  733,    0,  737,
    0,  738,    0,  741,    0,  744,    0,  747,    0,  750,
    0,  753,    0,  755,    0,  624,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1103, 1102,    0, 1113,    0,
 1101,    0,   18, 1169, 1170,    0,    0,  252,    0,    0,
 1179,  446,    0,    0,    0,  443, 1165, 1167,  121,  123,
  124,    0,    0,  116,    0,    0,  125,  127,   32,   30,
    0,    0,    0,  826,    0,  830,    0,    0,  578,    0,
   94,  567,  566,  565,  106,  146,  145,    0,  108,  533,
  594,    0,  642,    0,  655,  241,  263,    0,    0,  231,
    0,    0,    0,    0,  242,  648,    0, 1076, 1006,    0,
 1024, 1003,    0, 1015,    0, 1026,    0, 1040,  978,    0,
 1075,    0,    0,  607,    0,  616,  626,  628,    0,    0,
    0,    0,  555,    0,    0,  550,    0,    0,  785,  784,
  587,    0,  630,  601,    0,    0,  212,  631,  210,  211,
  633,    0,  641,  640,  981,    0, 1068,    0,    0, 1054,
    0, 1058,  635,  644, 1083,    0, 1079,  998,    0,    0,
 1094,    0,  419,  420, 1092,    0,    0,  805,  806,    0,
    0,    0,  783,  782,  789,    0,  534,    0,    0,  516,
  870,  871,  869,  877,  787,    0,  427,  775,    0,    0,
    0,  663,  659, 1049, 1048,  929,  540,  532,    0,    0,
  538,  529,  530,  646,  585,  583,  542,  525,  526,  541,
  947,    0,    0,  699,  700,    0,    0,    0, 1060,  691,
  758,    0, 1122, 1096,    0, 1123,    0, 1106, 1108, 1119,
    0, 1134,    0, 1100, 1148,    0, 1181,  253, 1176,    0,
  867,  866,    0,  865,    0,  442,    0,  120,  117,    0,
    0,    0,    0,    0,    0,  449,    0,  819,    0,   56,
  818,    0,    0,   57,    0,  820,  579,    0,  577,    0,
  142,  143,  590,    0,    0,    0,    0,    0,  246,  654,
    0,    0,    0,    0,    0, 1016, 1004,    0, 1027,    0,
    0, 1074,  617,  614,    0,  559,    0,    0,    0, 1159,
 1160,  546,  552,    0,  556,    0,    0,    0,    0,    0,
    0,  979,    0, 1064,    0, 1061, 1055, 1082,    0,  997,
  422,  423, 1095, 1093,    0,  650,    0,  791,  781,  521,
  520,  430,  774,  773,  793,  531,  584,    0,  963,  946,
    0,    0,    0,  952,    0,    0,    0,  709,    0,    0,
  712,    0,  718,    0,  716,  759,  760,  757,    0, 1098,
    0, 1127,    0,    0, 1142, 1143, 1136,    0,   19, 1180,
  445,  444,    0,    0,  126,  119,    0,  128,   31,   24,
    0,    0,  395,   80,  298,    0,  173,    0,    0,   87,
    0,    0,  581,    0,    0,   99,    0,  100,    0,  213,
  957,  185,  186,    0,    0,    0,  960,  261,  262,    0,
    0,    0,    0,  234,  243,  235,  237, 1001,    0,    0,
    0,    0,    0, 1025,    0,    0,  560,  561,  554,  557,
  553,    0,  547,  551,    0,  622,    0,  588,  598,  545,
  634,  632,    0,    0,    0, 1085,    0,    0,  804,  796,
    0,    0,    0,    0,  942,  953,  703,    0,  708,    0,
    0,  713,  707,    0, 1097,    0,    0,    0, 1111,    0,
 1109, 1120,    0, 1149, 1168,    0,  139,    0,  137,    0,
  133,  134,  138,    0,  412,  401,  400,    0,  294,  168,
   58,   82,  821,    0,    0,   95,  101,    0,    0,  944,
  961,  247,    0,  259,    0,    0,    0,  999, 1087,    0,
    0,    0, 1020,    0,    0, 1028,  977,    0,  603,  600,
  986,    0,  992,    0,    0,  984,    0,  988,    0, 1062,
 1084, 1080,    0,  522,  794,    0,    0,  711,  710,  719,
  717, 1099, 1124,    0, 1110,    0,    0, 1138,    0,  140,
  131,    0,    0,    0,  396,    0,    0,    0,    0,    0,
    0,   96,    0,    0,  228,  227,  214,  224,  225,  226,
    0,    0,  248,    0,  238,  236, 1077, 1017, 1005, 1013,
 1012, 1007, 1009,    0,  558,    0,  980,  985,    0,  989,
 1069,    0,    0,  797,    0,  955,    0, 1128, 1145, 1146,
 1139,  118,    0,  135,  136,    0,    0,    0,    0,    0,
  849,    0,    0,  810,    0,    0,  813,   83,    0,    0,
  218,    0,  434,    0,    0,    0,    0,    0,  962,  245,
    0,  258,    0,    0, 1029,  991,  990, 1066,    0, 1063,
 1081,  964,    0,    0,    0,  141,    0,    0,  413,    0,
    0,  411,  397,    0,  405,  467,    0,  465,    0,  295,
    0,  854,    0,    0,   59,    0,    0,  822,    0,    0,
    0,  223,  215,    0,    0,    0,    0,  249, 1078, 1008,
    0,    0, 1022,  872, 1065, 1125,    0, 1140,    0,    0,
    0,  393,    0,    0,  851,    0,    0,    0,  855,  811,
  169,    0,  816,   84,    0,    0,    0,  438,    0,    0,
    0,    0,  435,  229, 1011, 1010,    0,    0, 1129,   29,
   28,   25,  414,  410,    0,    0,  406,  466,  857,    0,
    0,    0,    0,    0,    0,    0,   98,  219,    0,    0,
  439,  440,    0,    0,    0,    0,    0,   34,  398,  862,
    0,  863,  860,    0,  858,    0,  311,  303,  304,  305,
  306,  307,  308,  309,  310,    0,    0,  301,    0,  170,
   79,  165,    0,   76,    0,    0,   64,   66,   67,   68,
   69,   70,   71,   72,   73,   74,   75,   77,   78,    0,
    0,  164,  161,  151,  152,  153,  154,  155,  156,  157,
  158,  159,  160,  162,  163,    0,    0,  149,    0,  216,
  222,  873,    0, 1126,    0,  415,  409,    0,    0,    0,
  296,  302,  353,  348,  352,    0,    0,    0,   60,   65,
  817,    0,   92,   93,    0,    0,   88,  823,  150,    0,
    0, 1132, 1130,  861,  859,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  312,    0,    0,  318,    0,    0,
    0,  362,    0,    0,    0,   85,   89,    0,  220,  217,
    0,    0,  347,    0,    0,  346,    0,    0,  436,    0,
    0,    0,    0,    0,    0,    0,  297,  171,  166,    0,
  394,   61,    0,  824,    0,  176,  174,  369,  433,    0,
    0,    0,  189,    0,    0,    0,    0,    0,  276,  437,
  313,    0,    0,    0,   86,  221,    0,  366,    0,  344,
  191,    0,  342,    0,  193,    0,  265,  270,    0,  316,
  172,    0,  184,  182,    0,    0,  371,    0,    0,    0,
    0,    0,  350,    0,    0,    0,    0,  197,    0,    0,
    0,    0,    0,    0,    0,    0,  179,  386,    0,  367,
    0,    0,  380,    0,    0,    0,  375,    0,  209,    0,
    0,    0,    0,  204,    0,    0,  194,    0,  188,  198,
  285,    0,  266,    0,    0,  277,    0,  363,  183,    0,
  175,  180,    0,    0,    0,  382,    0,  383,  372,    0,
    0,  365,  376,  345,    0,    0,  190,  205,  343,  361,
    0,  351,  355,  200,    0,    0,  282,  284,    0,  317,
  181,  387,  389,  368,    0,    0,  381,  378,  208,  206,
  360,    0,    0,    0,  286,  288,  267,    0,  280,  278,
    0,    0,  380,  356,  358,  201,    0,    0,    0,    0,
  391,  392,  388,  390,  379,    0,    0,  292,  291,  290,
  287,  289,  272,  268,  279,    0,    0,    0,  357,  359,
  274,  275,    0,  273,
  };
  protected static readonly short [] yyDgoto  = {             7,
    8,   50,    9,   51,   10,   11,   52,  248,  838,  794,
   12,   13,   53,   22,   23,  209,  364,  251,  811, 1004,
 1234, 1398, 1472, 1801, 1001,  252,  253,  254,  255,  256,
  257,  258,  259,  260, 1014,  532,  815, 1373, 1139, 1365,
 1308, 1410, 1452, 1525, 1614, 1526, 1527, 1544, 1545, 1546,
 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1015,
 1141, 1360, 1309, 1417, 1485, 1585, 1643, 1586, 1587,  548,
 1147, 1020, 1311,  840, 1148,  303, 1149,  549,  304,  885,
  305,  306,  307,  308,  261,  804,  511,  805,  806, 1124,
  807,  808, 1128, 1002, 1230, 1231, 1232,  271, 1353,  123,
  828, 1021,  881, 1556, 1557, 1558,  654, 1577,  933, 1138,
 1363, 1307, 1482, 1576, 1663, 1406, 1685, 1667, 1705, 1706,
 1707, 1151, 1703, 1152,  890, 1314, 1676, 1656, 1696,  604,
 1691, 1672, 1722, 1089, 1694, 1697, 1698, 1784, 1723, 1724,
 1720, 1150, 1317, 1248, 1631,  841, 1459, 1591, 1420, 1559,
 1645,  533, 1318, 1319,  309, 1378,  842,  843,  844,  845,
  786,  672, 1381,  787,  788, 1028, 1632, 1657, 1733, 1699,
 1766, 1814, 1799, 1658, 1823, 1818, 1633, 1679, 1790, 1769,
 1734, 1735, 1811, 1797, 1798, 1136, 1306, 1448, 1516, 1609,
 1517, 1518, 1605, 1635, 1606,  367,  238, 1701, 1608, 1692,
 1689, 1519, 1574, 1628, 1762, 1726, 1435, 1763,  698, 1806,
 1807, 1640, 1688, 1669, 1715, 1710, 1686, 1744, 1749, 1713,
 1716, 1717, 1793, 1750, 1711, 1712, 1803, 1791, 1792, 1133,
 1238, 1403, 1358, 1443, 1404, 1405, 1475, 1304, 1440, 1496,
  427,  368,  125,  416,  417,  126,  665,  507,  241, 1377,
  795,  796,  993, 1006,  127,  372,  474,  360,  373,  273,
 1407, 1408,   46,  130,  274,  132,  133,  134,  135,  136,
  137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
  147,  148,  149,  150,  151,  152,  153,  391,  392,  929,
 1201,  290,  960, 1189, 1178,  874, 1052,  875,  876, 1179,
  154,  212,  882,  275,  276,  277,  539,  540,  155,  559,
  560,  339, 1187,  884,  475,  341,  588,  589,  590,  591,
  594,  892,  622,  300,  565,  920,  301,  564,  156,  157,
  158,  159, 1100,  970, 1101,  731,  732, 1102, 1097, 1098,
 1103, 1104, 1105,  160,  161,  162,  163,  164,  165,  166,
  167,  168,  169,  170,  675,  676,  677,  925,  926,  171,
  662,  647,  922,  418, 1202,  643, 1283,  172,  579, 1366,
 1361, 1484, 1016, 1142, 1310, 1455, 1618,  534, 1411, 1412,
 1504, 1505,  994,  393, 1467,  655,  656,  310,  311,  312,
  175,  176,  177,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  189,  325,  682,  190,  361,
  963,  699, 1092, 1025,  834, 1155, 1090, 1093, 1261, 1094,
 1156, 1157,  326,  191,  192,  193, 1274, 1193, 1275, 1276,
 1277, 1278,  194,  195,  196,  197,  852,  572,  853, 1264,
 1173, 1265, 1430, 1384, 1333, 1431,  854, 1172,  855, 1433,
 1334,  198,  199,  200,  201,  202,  203,  346,  616,  617,
  899, 1390, 1342, 1063,  357, 1171, 1035, 1383, 1198, 1069,
 1343,  204,  487,  205,  488, 1109, 1216,  489,  490,  781,
  772,  773, 1221, 1113,  491,  492,  493,  494,  495, 1114,
  767, 1111, 1347, 1468, 1564, 1218, 1394, 1495,  982,  775,
  983, 1297, 1223, 1298, 1395, 1118,   17,   19,   47,   48,
  240,  789,  997,  505,  790,  791,
  };
  protected static readonly short [] yySindex = {         -178,
    0, -177,  -88, -258, -180,20816,    0,  -83,    0,    0,
 -180, -258,    0,    0,   26,    0, 9599, -180,    0,  290,
 -246,    0,    0,    0,    0,    0,    0,    0,  102,    0,
  170,    0,    0,    0,12553,    0,    0,    0,    0,    0,
    0,  118,    0,    0,  814,    0,    0,  985,    0,    0,
  -83,  222, -180,    0,  236,    0,18594,18594,18594,18594,
18594,  431,  401, -175,20328,  115,  393,  228, 9760,    0,
  393,  393,  393,   61,  393,  393,  839,    0,11482,  393,
  393,    0,11622,    0,  430,  393,  -64,    0,  393,  426,
  393,    0,20998,20998,  465,  393,  393,  160,11762,19294,
    0,    0,19294,    0,12736,12874,13012,13150,13288,13426,
13564,13702,    0,  631,    0,21206,    0,    0,    0,    0,
    0,    0,  210,    0, -228,    0,    0,    0,  478,  746,
  227,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -228,    0, 1390,  646,  356,  323,
  680,  818,  530,  590,  599,  603,  635,  698,    0,    0,
    0,    0,    0,    0, 4749,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  725,
  186,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -130,  409,  222,    0,    0,  684,    0,
    0,    0,21206,21206,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  118,    0,    0,
  727,  695,    0, -237,    0,    0,    0,  222, 2664,  919,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -104,18734,18734,  -84,  785, 1027,    0,  201,
    0,  928,  890,    0,    0,    0,    0,  953,  201,  993,
  994, 1085, -228,19434,    0,    0,    0,    0,    0,19294,
 1008,  974,  629,  746, -228,    0,    0,21206,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  294,  303,20328,    0,21206,19294,
  981,    0,    0,  987,19294,19294, 7911,  789,  -50,  975,
21206,    0,11762,  631, 1132, 1004,21206,19294,    0, 1140,
 1011,  620, 5013,    0,    0,19294,  430,18874,    0,    0,
  426,19294,  571,  658, 1123, -228,    0,    0, 1031,    0,
    0,  725,    0,  227, 1150, -228,19294,19294,19294,  228,
    0, 1104,    0,21206,21206,    0,12598, -228,    0, 1025,
 1074,    0, 9921, -265,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 5185,    0,    0,    0,    0,20696,  571, 1080,
 1083,19294,    0,  515,    0, -250,    0,    0,   93,  266,
    0,    0, 1058,11900,10222,    0,    0,    0,19294,19294,
19294,19294,19294,19294,19294,19294,19294,19294,19294,13840,
13978,14116, 5355,16462,14254,14392,14530,14668,14806,14944,
15082,15220,15358,15496,15634,15772,15910,16048,16186,19854,
19294,    0,    0,    0,  725,    0,    0,    0,    0,20998,
20998,    0,    0, -228,    0,    0,    0,    0,  576, 1137,
    0,    0,    0,    0,    0,    0,    0,  222,  919,  808,
  892,  118,  118,    0,  749, -171,    0,  118, 1136,    0,
 -128, 2664,    0,    0,    0,    0,    0, -167,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -141,22283,    0,    0,    0,18734,    0,    0,    0,
 -228,    0,    0,18454,    0, 1146,10362,    0, 1141,  705,
    0, 1142,    0,    0,    0, 1101,    0,    0,  831,    0,
 1147,    0, 1151,  189,  430,    0,  393,    0,    0,    0,
 -228,10782, -152,    0, 1148,    0,    0,    0,  121,  140,
    0,  974,  629,    0,    0, 1144,    0, 1159,    0, 1154,
 1102,    0,    0,  867,    0,17968,  874,12040,  975,18594,
    0,10502,    0,    0,    0,    0,    0,    0,  151,  153,
    0,    0,    0, -247,  430,  570,    0,    0,  426,    0,
    0, 1163, 1167,    0,  157, -228,    0,  184, 1124,    0,
    0,19294, 1250,  515,    0,19294, 1251, 1169,    0, 1172,
 1174,    0,20696,    0,    0,    0,  215, 1101,19294,    0,
19294,    0,    0,   18, 9921,    0,    0,    0,    0,    0,
    0,  215,    0,    0, -239,    0,    0,    0,  426,    0,
  571, -228,21238,    0, 1176,    0, 1181,16324,    0, 1305,
 1178, 9921,    0,    0, 1128,    0, 1101, -228,19434, 1129,
    0,  515, 1101,    0,  141,    0, -163,  187, -148,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,19982,
19982,    0,21206,  472,    0,    0,    0,    0, -228,    0,
    0,    0,    0,  646,    0,  646,    0,12460,  356,    0,
  356,    0,  323,    0,  323,    0,  323,    0,  323,    0,
  680,    0,  680,    0,  818,    0,  530,    0,  590,    0,
  599,    0,  603,    0, -166,    0,12040, 1265, -228, 1268,
 -228,12040,12040, 1179,19294,    0,    0, 1137,    0, -228,
    0, 1143,    0,    0,    0,21238,  749,    0, 1187, 1188,
    0,    0,  414,  222,   32,    0,    0,    0,    0,    0,
    0,  -69, 1192,    0, 1191, 1193,    0,    0,    0,    0,
 1195,21282, 1152,    0,  419,    0, 1197, 1194,    0,  999,
    0,    0,    0,    0,    0,    0,    0,12040,    0,    0,
    0,19434,    0, 1196,    0,    0,    0,  943,  159,    0,
 1200, 1199, 1202, 1206,    0,    0,19294,    0,    0, -228,
    0,    0, 1198,    0, 1207,    0,  392,    0,    0, 9760,
    0, 9760,10922,    0,16695,    0,    0,    0,11062,11202,
  420,18594,    0,   84, -143,    0, 1153, 1160,    0,    0,
    0,  945,    0,    0, 1210, 1213,    0,    0,    0,    0,
    0, 1214,    0,    0,    0, 1220,    0, 5527,  430,    0,
  430,    0,    0,    0,    0, 9760,    0,    0, 9760,  515,
    0,19294,    0,    0,    0,19294,21206,    0,    0,  430,
 1217,  215,    0,    0,    0,19294,    0, 1218, 1175,    0,
    0,    0,    0,    0,    0,21206,    0,    0, -228,20696,
 1255,    0,    0,    0,    0,    0,    0,    0, 1101,  951,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,10642, 1221,    0,    0, 1225, -228,20110,    0,    0,
    0,11342,    0,    0, 1308,    0, 1310,    0,    0,    0,
 1113,    0, 1228,    0,    0,  903,    0,    0,    0,  749,
    0,    0, 1186,    0, -171,    0,  749,    0,    0, 1143,
 1235, 1236, 1190, 1239, 1152,    0, 1234,    0, 1318,    0,
    0, 1368, 1370,    0, 1371,    0,    0,19294,    0,  387,
    0,    0,    0,19014, 1242,  943,21238,21206,    0,    0,
  105, 1374, 1375,  188, 1241,    0,    0,19294,    0,19294,
 1347,    0,    0,    0,19154,    0,  807,19154,  956,    0,
    0,    0,    0,17828,    0, 1381,  725,12040, 1258,10922,
 1259,    0,  393,    0, -228,    0,    0,    0,  -52,    0,
    0,    0,    0,    0, 1256,    0, 1290,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,21206,    0,    0,
 -228, 1257, 1221,    0,19982, 1337,  859,    0,  498, -228,
    0, 1260,    0, 1261,    0,    0,    0,    0,12040,    0,
12040,    0,  257,12040,    0,    0,    0,  726,    0,    0,
    0,    0, 1264, 1143,    0,    0,12180,    0,    0,    0,
 1266, 6622,    0,    0,    0, 1152,    0, 1152, 1152,    0,
 1152, 1152,    0, 1267,22283,    0, 1272,    0,  387,    0,
    0,    0,    0, -228, 1269, 1242,    0,    0,    0, -120,
 -165, 1262, 1270,    0,    0,    0,    0,    0, 1271,10922,
 1221, -148,19294,    0, 1274, 9760,    0,    0,    0,    0,
    0, 1273,    0,    0, 1278,    0,  975,    0,    0,    0,
    0,    0, -131,19294, 1277,    0, 1221, 1281,    0,    0,
 1224,  215, 1219, 1276,    0,    0,    0,20219,    0, -228,
20219,    0,    0,20110,    0,12040, 1307,12040,    0,12040,
    0,    0,19294,    0,    0, 1193,    0,  456,    0, 1000,
    0,    0,    0, -258,    0,    0,    0, 1288,    0,    0,
    0,    0,    0,  189,21048,    0,    0,  440, 1279,    0,
    0,    0,  709,    0, 1282, 1415, 1416,    0,    0, 1221,
 1294, 1221,    0, 9760,  769,    0,    0,19154,    0,    0,
    0,19294,    0, 1300, -185,    0, 9421,    0, 1297,    0,
    0,    0,  215,    0,    0,19294,10642,    0,    0,    0,
    0,    0,    0, 1319,    0, 1122, 1296,    0, 1302,    0,
    0,12180, -180,  189,    0, 1301, 1312,  960, 1301,  960,
 1306,    0, 1348,18384,    0,    0,    0,    0,    0,    0,
19014, 1314,    0,19294,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 9760,    0,  -73,    0,    0, 9921,    0,
    0,  196, 9760,    0, 1315,    0,12040,    0,    0,    0,
    0,    0,19294,    0,    0,  222, 1316,  222,21206, 1351,
    0,  189, 1301,    0, 1351, 1301,    0,    0, 1351, 1352,
    0,  371,    0,  132,18384, 1275, 1283,19294,    0,    0,
19294,    0, 9760,19294,    0,    0,    0,    0, 1320,    0,
    0,    0, 1353,12040,19294,    0,  222, 1324,    0, 1284,
 1110,    0,    0, 1321,    0,    0,  128,    0, 1285,    0,
 1351,    0, 1342, 1351,    0, 1325, 1351,    0,19294, 1298,
 1344,    0,    0, 1350, 1101, 1072, 1339,    0,    0,    0,
  966, 1207,    0,    0,    0,    0, 1378,    0,  119, 1351,
 1475,    0, 1355,  222,    0,21206,  -48, 1357,    0,    0,
    0, 1358,    0,    0, 1359, 1343, 1356,    0,  189,  189,
 1360, 1363,    0,    0,    0,    0, 9921,12040,    0,    0,
    0,    0,    0,    0, 1349, 1361,    0,    0,    0,20884,
  222, 1362,  200,18594, 1364,  295,    0,    0, 1366, 1367,
    0,    0, 1372, 1380,12040, 1365,19294,    0,    0,    0,
 1373,    0,    0, 1369,    0,22283,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1377,  222,    0,  524,    0,
    0,    0,22283,    0, 1382,  200,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1376,
  222,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1383,  295,    0,  189,    0,
    0,    0, -228,    0, 1380,    0,    0, 1384,20884,20503,
    0,    0,    0,    0,    0,  295, 9921,20435,    0,    0,
    0,22283,    0,    0, 1387,  222,    0,    0,    0, 1385,
 1351,    0,    0,    0,    0,21206,21206,  385,21206,  425,
  426, 1348,  571,18290,    0, 1445,    0,    0, 1361, 1393,
   18,    0, 7183, 1361,20895,    0,    0, 1361,    0,    0,
 -139, -125,    0,21206, -114,    0,21206, 1391,    0,  371,
  132,    0, 1389, -231,  440,12553,    0,    0,    0, 1331,
    0,    0, 1361,    0, 1351,    0,    0,    0,    0, 1396,
 1394, 1388,    0, 1395,  189, 1386, 1403, 1413,    0,    0,
    0, 1401, 1361, 1402,    0,    0,  -22,    0, 1397,    0,
    0, 1410,    0, 1408,    0, 1407,    0,    0,  189,    0,
    0, 1412,    0,    0, 1411,  194,    0, 1428,  189, 1539,
 1429,  189,    0,10922, 1398, 1433, 1407,    0,  207, 1417,
  189,  720,19014, 1399, 1435, 1411,    0,    0,22283,    0,
  222,  222,    0, 1400, 1436, 1428,    0, 1441,    0,19294,
 1405, 1439, 1429,    0, 1448,  -29,    0, 1424,    0,    0,
    0,22283,    0,  207,  207,    0, 1449,    0,    0,  -22,
    0,    0,  134, 1457,22283,    0,22283,    0,    0,10922,
 1446,    0,    0,    0, 1458, 1410,    0,    0,    0,    0,
  374,    0,    0,    0, 1127, 1461,    0,    0,  540,    0,
    0,    0,    0,    0, 1519, 1574,    0,    0,    0,    0,
    0, 1463, 1464,10922,    0,    0,    0,  207,    0,    0,
  728,  728,    0,    0,    0,    0,  120,  120, 1456, 1472,
    0,    0,    0,    0,    0,18594,18594,    0,    0,    0,
    0,    0,    0,    0,    0, 1469, 1471,19014,    0,    0,
    0,    0, 1468,    0,
  };
  protected static readonly short [] yyRindex = {         4048,
    0,    0,10082, 4048,    0,    0,    0, 1858,    0,    0,
 4310, 2061,    0,    0,    0,    0,    0, 4310,    0, 1430,
   65,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1860,    0,    0, 1860,    0,    0, 1860,    0,    0,
 1858, 2203, 4143,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1482,    0,    0,
    0,    0,    0,    0,    0,    0,21320,    0, 1474,    0,
    0,    0, 1474,    0,    0,    0,    0,    0,    0, 3888,
    0,    0,    0,    0,    0,    0,    0,    0,  321,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 6451,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 7213, 6388,
 5775,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 7326, 7511, 7948, 8204,
 1741, 1579, 8900, 9044, 9188, 5984, 1884, 2694,    0,    0,
    0,    0,    0,    0,   65,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 7398,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 4384,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1860,    0,    0,
  302,    0,    0,    0,    0,    0,    0, 4451,  947, 4518,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -144,    0,    0, 1476,
    0,    0,    0,    0,    0,    0,    0,    0, 1476,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 5184,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1483,    0,    0,    0,
    0,    0,    0, 5356, 1477,    0,    0,    0,    0, 1477,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 3470,    0,  502, 3604,    0,    0,    0,    0,    0,    0,
    0, 3738,    0, 3604,    0,    0,    0,    0,    0, 1482,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1131,
    0,    0,   89,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1486, 3320,    0,
    0, 1474,    0, 5184,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  281,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2404,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3850,
    0,    0,    0,    0,    0,    0,    0, 4585, 4659,  924,
    0, 1860, 1860,    0,21080,  220,    0, 1860, 1868,    0,
    0,  217,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  761,17602,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,12320,
    0,    0,    0,    0,    0, 5184,    0,    0,    0,    0,
    0,    0,    0,20543,    0,    0,    0,    0,    0,    0,
    0, 1484,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  317, 1022,    0,    0,  338, 1109,    0,    0, 1493,
  862,    0,    0,    0,    0,  274,    0,    0, 5872, 1490,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1496,    0, 2844,    0,    0,18337,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 3170,    0,    0,    0,    0,    0,    0,
    0,    0, 1486,    0,    0,    0,19574, 5184,    0,    0,
    0,    0,    0,    0,  334,    0,    0,    0,    0,    0,
    0,19574,    0,    0,    0,    0,    0,    0,  -19,    0,
  881,    0,    0,    0, 1492,    0,    0,    0,    0, 1477,
    0,    0,    0,    0, 5012,    0, 5184,    0,    0, 4840,
    0, 5184, 6044,    0,    0,    0,  291,    0, 1002,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 6623, 6736, 6895, 7054,    0, 7583,    0,
    0,    0,    0, 7696,    0, 7768,    0,    0, 8020,    0,
 8132,    0, 8316,    0, 8388,    0, 8500,    0, 8572,    0,
 8684,    0, 8756,    0, 8828,    0, 8972,    0, 9116,    0,
 9260,    0, 6156,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 3850,    0,    0,
    0,    0,    0,    0,    0,    0,21364,    0,    0, 1009,
    0,    0, 1450,16825,    0,    0,    0,    0,    0,    0,
    0,  934,  888,    0,    0, 1497,    0,    0,    0,    0,
 2591,    0,    0,    0,    0,    0,    0,  -99,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1012,    0,    0,    0,21396,20736,    0,
    0, 1036, 1046, 1047,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1495,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1504,    0,    0,    0,    0,    0,
 5591,    0,    0,    0,  345,    0,  131, 5528,    0,    0,
    0,    0,    0,    0, 1494,    0,    0,    0,    0,    0,
    0, 1505,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3170,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,19574,    0,    0,    0,    0,    0, 1133,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 5184,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1499,    0,    0,    0,    0, 1502,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  114,    0,  626,    0,    0,    0,    0,    0,    0,21396,
    0,    0,    0,    0,  220,    0,21124,    0,    0, 1506,
    0,  969,    0,    0,    0,    0, 1510,    0,   26,    0,
    0, 1460, 1462,    0, 1465,    0,    0,    0,    0,21917,
    0,    0,    0,    0, 1503,21440,    0,    0,    0,    0,
20776,    0,    0,    0, 1020,    0,    0,    0,    0,    0,
 3025,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 5700,    0, 6216, 1513,
    0,    0,    0,    0, 1213,    0,    0,    0, 1020,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1509,    0,    0,    0,    0,    0, 1038,  742,
    0,    0,    0, 1517,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1048,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,21162,    0,    0,    0,21996,    0,
    0,    0,    0,    0,    0, 1514,    0,    0,    0,    0,
    0, 1055, 1063,    0,    0,    0,    0,    0,    0,    0,
 1521, 1002,  835,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 5872,    0,    0,    0,
    0,    0, 1523,    0,    0,    0, 1521,    0,    0,    0,
    0,19574,  897,  910,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1497,    0, 6798,    0,    0,
    0,    0,    0,21528,    0,    0,    0,    0,    0,    0,
    0,    0,    0,20583,    0,    0,    0,    0,    0,    0,
    0,    0,  944,    0,  950,    0,    0,    0,    0, 1522,
    0, 1499,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1527,    0,    0,    0,    0,    0,
    0,    0,19574,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  379,  763,    0,    0,    0,
    0,    0,21621,20543,    0, -187,  614,  531, -187,  531,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -197,    0,
    0, 1496,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,21694,    0,  365,    0, 1515,
    0,20543, -187,    0, 1515,  623,    0,    0, 1515,    0,
    0,  447,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  968,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,21761,    0,    0,    0,
17318,    0,    0, 1528,    0,    0,  560,    0,    0,    0,
  541,    0,    0, 1515,    0,  719, 1515,    0,    0,    0,
    0,    0,    0,    0,  890,  567,    0,    0,    0,    0,
    0,  977,    0,    0,    0,    0,    0,    0, 4217, 1524,
  750,    0,    0,  368,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,20543,20543,
    0,    0,    0,    0,    0,    0, 1529,    0,    0,    0,
    0,    0,    0,    0,    0, 2308,    0,    0,    0,    0,
17414,    0,16934, 1490,    0,17030,    0,    0,    0,    0,
    0,    0,    0,  780,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  514,    0,17760,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,17508,    0,    0,    0,
    0,    0,17686,    0,    0,17126,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
18109,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,17222,    0,20543,    0,
    0,    0,    0,    0,  780,    0,    0,    0,    0,  761,
    0,    0,    0,    0,    0,17030,   89,  761,    0,    0,
    0,20966,    0,    0,    0,18188,    0,    0,    0,    0,
  624,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 6385,  885,18252,    0,    0,    0, 7024,    0, 2308,    0,
    0,    0,    0, 2308,    0,    0,    0, 2308,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  284,
  548,  566,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2308,    0,  624,    0,    0,    0,    0,  845,
    0,    0,    0,    0,20543, 1070,    0,    0,    0,    0,
    0,    0, 2308,    0,    0,    0,    0,    0, 1079,    0,
    0,    0,    0,    0,    0, 1525,    0,    0,20623,    0,
    0,    0,    0,    0, 1526,22245,    0, 1530,20543,19714,
 1531,20543,    0,    0,    0,    0, 1532,    0,22207,    0,
20543,    0,    0,    0,    0, 1533,    0,    0,  441,    0,
22131,22169,    0,    0,    0, 1534,    0,    0,    0,    0,
    0,    0, 1535,    0,    0,  754,    0, 1086,    0,    0,
    0, 1139,    0,22055,22093,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1593,    0, 1653,    0,    0,    0,
 1094,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,22207,    0,    0,
21799,21837,    0,    0,    0,    0,    0,    0,16615,    0,
    0,    0,    0,    0,    0, 1490, 1490,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,
  };
  protected static readonly short [] yyGindex = {            0,
    0, 1875,    0,    0,    0,   -3,  -12, -195,  -47,    1,
    0, 1916, 1926,  701,    0,    0, -188,    0,    0,    0,
    0,    0,    0,-1388, -831, -233, -517,    0,    0,    0,
    0,    0,    0,    0,    0,-1086,    0,   45,    0,  636,
    0,-1264,    0,    0,    0,    0,  407, -488, -567, -964,
 -540, -511, -444, -421, -290, -877, -698,-1116, -683,    0,
    0, -875,    0,    0,    0,    0,    0,    0,  359,    0,
    0,    0,    0,  703,  799,  -17,    0, 1670,   78,  -33,
  130,  139,  150,  158, -242,    0,    0,    0,  826,    0,
  952,    0,    0,    0,    0,  651,  654, -254,    0,   13,
    0,    0, -673,  383,    0,  404,-1365,    0,  352,    0,
    0,    0,    0,    0,    0,  389,  225,    0,    0,    0,
  263,-1261,    0, -312, -330, -792,    0,    0,    0,-1040,
  214,    0,    0, -580,    0,    0,  275,    0,    0,  248,
    0,    0,  339,    0,-1232,-1068,    0,    0,    0,    0,
    0,-1250,  271,-1205,  -10,    0,    0,  959,  963,  964,
 1145, -616,    0,    0, -373,  970,  376,    0, -991,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  202,    0,    0,    0,    0,    0,    0,    0,
    0,  470,    0,    0,    0, -322,  363,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  483,    0, -597,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  211,    0,
    0,  287,    0,    0,  296,  299,  219,    0,    0,    0,
    0,    0,    0,    0,    0,  563,    0,    0,    0,    0,
  -93,    0, 1419, -415, -366, 1498,    0,  586,    0, -424,
    0, 1019,    0, 1662,  667, -325, -304,  -79,  335,  961,
    0,  572,    0,  -46,  641, -420,    0,    0, -407,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -405,    0,
    0,    0,    0,    0,    0, -291,    0,    0, 1379,    0,
    0,   43,    0,    0, -307,    0,    0,    0,  965, -981,
 -340, -142, 1155,    0, 1470,    0, 1755, -189,  -51, -365,
 1201,    0,    0,  836, 1945,    0,    0,    0,    0, 1162,
    0,    0,    0, 1648,    0,    0,    0,    0,    0, 1614,
 1064, 1065, 1575, -499, 1577,    0,    0,    0,    0,  822,
  164,    0,  820,  906, 1061, 1570, 1571, 1569, 1572, 1573,
    0, 1568,    0,    0,    0, 1099, 1404, -623,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -333,  734,
 -529,    0,    0,    0,    0,    0,    0, -516,    0,  632,
    0,  475,    0,    0,    0,  768, -619,  -15, -381,  -13,
    0, 1871,    0,  161,    0,  180,  181,  182,  185,  198,
  199,  218,  223,  246,  293,    0, -727,    0,    0,    0,
  876,    0,  788,    0,    0,    0,  764, -208,  855,-1009,
    0,  898, -549,    0,    0,    0,    0,    0,    0,  778,
    0,  779,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  671,    0,
    0,    0,    0,    0,    0,    0,    0,  -28,    0, 1442,
  715,    0,    0,    0,    0,  990,    0,    0,    0,    0,
    0,    0, -192,    0,    0,    0,    0,    0, 1578, 1309,
    0,    0,    0,    0, 1596,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  495,    0,    0,    0,    0,    0,
    0,    0,    0,  668,    0,    0,    0,    0,    0,    0,
  106, 1071,    0,    0,    0, 1096,
  };
  protected static readonly short [] yyTable = {           117,
   18,  173,  886,  174,  249,  206,  124,  536,  683,  603,
  498,  658,  497,  295,  513,  606,  816,  575,  294, 1005,
  501,  891,  851,  270,  278,  279,  280,  281,  628,  558,
  620,  601,  472,  725,  599,  934,  638,  436,  935,  269,
  269,  269,  269,  269,  673,  587,  726, 1203,  727,  428,
   44,  437,  250,  289,  351, 1146,  939,  684, 1245, 1379,
 1061,  345,  946, 1375, 1157,  350, 1181,  635,  695,  272,
  272,  272,  272,  272,  352,  543,  355,    1,   14,  987,
  286, 1374,  390, 1206,  792,  394,  334, 1499,  809,  971,
 1254, 1272,  957,  973,  118,  674,  509,   20,  978,  979,
 1415, 1493, 1660,  856, 1418,  365,  375,  961,    2,  298,
  382,  803, 1053,  327,  328,  329, 1646,  335,  336,  660,
  803,  332,  347,  348, 1271,  478,  897,  799,  353,  356,
 1648,  358, 1041,  362, 1042, 1252,  287,  424,  378,  379,
  830, 1652, 1424,  332,  812, 1272,  119,  936,  813, 1451,
  243,  286, 1454,  245, 1022,  120,  580,  117,  249,  173,
  848,  174,  800,   20,  124,  580,  121,  438,   16,  987,
  766,  354,  435,   49,  122, 1473,  661,  178, 1068,  558,
  685, 1070, 1386,  987, 1146,  288,  998, 1457,    2,  937,
  686,  354,  848,   43,  801,  210,  179,  180,  181, 1426,
  512,  182,  333, 1196,  102,  595,  499, 1479,  287,  814,
  247, 1611,  541,  541,  183,  184,    6,  479,  913,  332,
 1637,  972,  480,  547,  481, 1642, 1760,  482,  483, 1644,
  484,  485,  927, 1683,  185, 1357,  455,  987,  803,  186,
  803, 1402,  803, 1054,  803,  962,  538,  538,  499, 1273,
 1206,  332,  118,   15, 1665,  877,  536,  288,    3,    4,
    5,    6,  187,  810,  513, 1255,  557,  914,  883,  673,
  630,  948,  561,  658, 1681,  571,  952,  954,  333,  287,
  294,  627, 1043,  580,  631,  580, 1335,  580,  510,  580,
  294, 1647,  823, 1413,  428,  556,  272,  803, 1078,  287,
  658,  441,  802, 1273,  119, 1372,  626,  562,  356,  188,
  333,  486,  574,  120, 1387,  102, 1653,  578,  580,  287,
  674, 1157,  803,  950,  121,  953, 1620, 1402,  288,  596,
  610,  597,  122,  287,  412,  178,  435,  330,  623, 1480,
  625, 1170,  580,  504,  578,  331,  624,  817,  288,  586,
  674,  128,  455, 1375,  179,  180,  181,  413, 1761,  182,
  640,  641, 1375,  455,  414,  455, 1538,  455,  288, 1141,
  296, 1684,  183,  184, 1470, 1808,  859,  657,  633,  659,
 1666,  600,  288, 1445, 1188,  598, 1157, 1422,  637, 1649,
 1489, 1490,  185,  681, 1299,  861,  955,  186,  931,  128,
  648,  697,  728,  128,  680, 1772,  893,  294,  895, 1538,
 1160,  455,  905,  988, 1029,  213,  557,  269,  995, 1570,
  187,  700,  701,  702,  703,  704,  705,  706,  707,  708,
  709,  710,  332, 1368,  558, 1215, 1578, 1217,  687,  908,
 1222, 1739,  692, 1168,  836,  380,  272,  272, 1267, 1708,
  249, 1388, 1678,  765, 1162, 1521,   55, 1773,  793,  932,
  996, 1141, 1731,  674, 1050,  546, 1141,  188, 1141,  874,
  923, 1141, 1141,    6, 1141, 1141,  827,  827,  688, 1191,
  827,  366,  376,  214,  421,  541,  247, 1414, 1174,  620,
 1590,  333,  768,  770, 1071, 1615,  774,  827,  499,  102,
 1141,  239,  827,  297,  420,  860,  827, 1471, 1809,  128,
  820, 1157, 1219, 1034, 1446, 1423, 1510, 1157, 1530,  394,
  850,  827,  111,  956,  862, 1051,  269,  832,  689,  269,
  874,  332,  422, 1086,  111,  894, 1329,  896,  837,  431,
  247,  906, 1292, 1072, 1294,  207, 1295,  725,  827,  566,
 1542,  536, 1510,  818,  846, 1141,  272,  441, 1625,  272,
  726, 1530,  727, 1789,  839, 1195,  673,  827,  909,  897,
  247,  958, 1169,  587,  476,  247, 1584,  558, 1285, 1522,
  880,  247,  269,  848,  889,  857, 1674,  547,  247, 1259,
  333,  381,  425,  986,  102,  940,  536,  423,  128,  128,
 1212,  502,  503,  247,  900, 1536, 1385,  784,  785,  847,
 1700,  299,  272,  797,  911, 1391, 1220,  674,  915,  208,
 1718, 1584, 1743, 1725,  262,  359,  453,  477,  959, 1781,
  436,  928, 1737,  390, 1144,  431,  924,  332,  907,  657,
 1623,  659,  567,  940,  437, 1765, 1782, 1039, 1536,  441,
  111,  924, 1158,  441,  548, 1429,  898,  131, 1775, 1344,
 1776,  128,  454,  431,  478,  562,  657,  431,  659,  426,
  187,  557,  187, 1393, 1522,  563,  247,  187, 1008, 1009,
 1626,  441, 1010,  568,  938,  441,  563,  441,  441,  441,
  441,  569,  128, 1153, 1040,  441,  690,  940, 1624, 1011,
  949,  272,  431,  940,  674,  131,  691, 1783,  940,  131,
  940,  431,  827,  877,  875,  548,  991,  573,  618,  934,
 1437,  211,  562, 1012,  618,  549, 1144,  128,  992,  457,
  458, 1144,  563, 1144, 1055,  609, 1144, 1144, 1627, 1144,
 1144,  969, 1767, 1768,  570,  402,  455,  456,  404,  880,
 1013, 1190, 1186,  211,  880,  880,  479,  981,  940,  371,
  371,  480,  606,  481,  827, 1144,  482,  483,  247,  484,
  485,  411,  645,  646,  412,  875,  287, 1604, 1367,  618,
 1367,  975,  371,  977, 1537, 1613,  549,  725,  128,  285,
  725, 1315,  985,  725, 1494,  111, 1800,  413,  111, 1539,
  726,  664,  727,  726,  939,  727,  726,  411,  727,  102,
  880,  803,  282, 1048,  557,  131,  283, 1144,  294,  102,
 1144, 1565,  441,  412,  359,  288,  431, 1537, 1316,  578,
  431,  776,  426,  431,  851,  431, 1416,  425, 1049, 1263,
  431,  718, 1539,  425,  272,  889,  413,  614,  377, 1300,
  496,  967,  880,  414,  269,  968,  883, 1007,  816,  412,
  415,  856, 1036,  426,  901,  856,  284,  426,  769,  771,
  359,  128, 1233,  426,  431,  613,  359,  586,  812,  371,
  371, 1135,  413,  426,  272, 1211, 1540,  426, 1066,  414,
 1067, 1315,  853,  856, 1073,  658,  415,  614, 1074,  433,
  426,  412,  856, 1434,  131,  131,  128,  850, 1079, 1076,
  812,  924, 1573, 1509,  615, 1529,  728,  269,  441, 1788,
  853,  294,  620,  479,  413, 1224,  465,  433,  480,  853,
  481,  414,  426,  482,  483,  803,  484,  485,  415,  850,
 1511,  413, 1531,  850,  889,  264,  441,  793,  414, 1509,
  441, 1083,  426,  441, 1108,  441, 1421,  658, 1529, 1336,
  441,  809, 1260, 1507,  371, 1524,   45,  131, 1543, 1512,
  814, 1532, 1145, 1135,  412,  852, 1511,  129, 1135, 1096,
 1135,  478,  411, 1135, 1135, 1531, 1135, 1135, 1260,  128,
 1153,  466, 1508,  809, 1528,  371,  467,  413,  131, 1507,
 1143,  809,  814,  852,  414, 1512,  574,  605, 1524, 1461,
 1462, 1382,  852,  371, 1532,  468,  128,  777, 1137,  826,
  825,  825, 1175,  425,  825,  129,  827, 1177, 1508,  129,
 1177,  839,  412,  131,  412, 1131, 1513, 1528, 1533, 1543,
  880,  825,  889,  629,  450,  451,  452, 1233,  469, 1131,
  371,  371, 1583,  374,  374,  413,  359,  413, 1543, 1514,
  470, 1534,  414,  666,  414,  825,  815, 1135, 1428,  415,
  667,  415, 1513,  479,  459,  460,  374,  969,  480,  371,
  481, 1533,  668,  482,  483,  658,  484,  485,  461,  462,
 1322,  880,  825,  880,  724, 1514,  880, 1583,  815,  102,
  471, 1145, 1323, 1204, 1534, 1194,  338,  102, 1316, 1229,
 1137,  966,  969, 1727,  500, 1137, 1498, 1137,  429,  371,
 1137, 1137, 1059, 1137, 1137,  508, 1059, 1131, 1059,  287,
  407,  430, 1131,  354, 1131,  129,  407, 1131, 1131,  272,
 1131, 1131,  354,  408,  826,  826,  371,  371,  826, 1330,
  431,  432,  889, 1331,  506,  578,  728, 1332,  536,  728,
 1397,  294,  728,  513,  294,  826, 1249,  294,  544, 1777,
  433,  592, 1253,  374,  374,  593, 1279,  131,  288, 1634,
 1239,  434, 1240, 1241, 1567, 1242, 1243, 1180, 1634,  826,
 1515,  924, 1535, 1058,  128,  658,  128,  239,  880,  242,
  880,  782,  880, 1796, 1137, 1296,  827,  827, 1816, 1817,
  827,  412,  131,  831, 1421, 1019,  826,  832,  337, 1019,
  338, 1131, 1096, 1019,  129,  129, 1515,  827,  463,  464,
 1303,  364,  827,  364,  413, 1535,  827, 1320,  364, 1209,
  128,  414,  613,  128,  839, 1210,  426, 1607,  613,  867,
 1177,  827,  426,  868,  574, 1607,  878,  666,  374, 1026,
  593,  657,  426,  659,  667,  776,  426,  776, 1345,  889,
  129,  129,  924,  606,  129,  426,  668,  629,  827,  426,
  783,  965,  545,  965, 1229,  965, 1065,  129,  629,  374,
 1356, 1119,  620,  380,  954,  131,  954,  827,  954,  535,
  247,  374,  128,  574,  839, 1075,  574,  374,  249,  426,
 1400,  426,  426,  374,  272,  550,  426,  426,  129,  426,
  426,  122,  131,  657, 1082,  659,  244, 1057,  244,  880,
  244, 1058,  257, 1087,  257, 1396,  257,  832, 1182,  547,
  555,  551,  547, 1362,  374,  374, 1465, 1359, 1021,  249,
 1466,  130, 1021,  129,  602,  130,  499, 1023, 1401,  388,
 1427, 1023,  839,  574,  743,  745,  747,  749,  239,  576,
  244, 1288, 1153,  374, 1290,  577,  880, 1296,  374,  547,
  547,  553,  554, 1019, 1301,  547, 1302,  607,  945,  371,
  945, 1178,  608, 1178,  426,  611, 1400,  499,  956,  612,
  956, 1456,  939,  426, 1086,  426, 1086,  426,  939,  426,
  426,  649,  650,  374,  129,  939, 1161,  426,  232,  426,
  232,  426,  426,  426,  426,  632,  426,  426,  239,  240,
  239,  240,  132, 1506,  132, 1523,  426,  263, 1523,  263,
  374,  374,  426,  426, 1401,  233,  426,  233,  651,  652,
  880,  657,  636,  659,  426,  644,  192,  426,  192,  839,
  839,  634,  426,  939,  678,  370,  269,  370,  426, 1506,
  426,  679,  199,  426,  199, 1115, 1116,  880, 1523,  574,
  377,  507,  377, 1401, 1349, 1350, 1401, 1822,  693,  619,
 1442,  247,  507, 1582,  507,  619,  272,  129,  413,  506,
  131,  780,  131, 1785, 1786,  517,  517,  518,  518, 1523,
  128,  369,  369,  507,  507,  827,  827,  798,  734,  736,
 1237,  739,  741,  751,  753,  821, 1401,  413, 1523,  825,
  829,  833,  129,  507,  369,  835,  858,  863, 1582,  864,
  865,  507,  128,  866,  507,  128,  131,  903,  128,  131,
  619,  904,  912,  916,  910,  917,  918, 1401,  919,  839,
  944,  657,  940,  659,  371,  941,  945,  974,  947,  951,
  976,  989,  980,  419,  990, 1592, 1401,  629,  999, 1000,
 1003, 1017,   43,  371, 1030, 1031, 1037, 1018, 1032, 1024,
  370,  370, 1033, 1038,  210, 1056,  547, 1059,  128, 1062,
 1060, 1077,  371,  374, 1081, 1080, 1085, 1091,  724, 1095,
 1110,  128, 1112,  370, 1117,  129, 1121, 1126, 1130, 1127,
 1129, 1132, 1134, 1135, 1320, 1137, 1140,  369, 1154, 1166,
 1167,  369,  369,  374, 1170, 1176, 1185,  596, 1709, 1192,
 1199, 1200,  129, 1208, 1213, 1205, 1225, 1214, 1256, 1235,
 1244, 1732, 1246, 1284, 1286,  839, 1257, 1250, 1266, 1258,
 1269, 1280, 1293, 1745, 1747, 1282, 1268, 1305,  128, 1287,
 1325, 1326, 1321,  128, 1348, 1324,  889,  128, 1327,  839,
 1337, 1341, 1351,  374, 1352,  574, 1732, 1732, 1359,  839,
 1370, 1320,  839, 1371,  371, 1362, 1380, 1392, 1409, 1434,
 1399,  839, 1755, 1419, 1439, 1425,  370, 1444, 1453, 1436,
  370,  370,  389, 1426, 1441, 1447,  369,  128,  396,  398,
  400,  402,  404,  406,  408,  410, 1450, 1464, 1372, 1458,
 1474, 1487,  889, 1460, 1469, 1476, 1481, 1483, 1486, 1488,
 1732, 1520, 1497, 1541, 1563, 1491,  374,  369, 1492, 1498,
 1560, 1561, 1562, 1566,  605, 1569, 1568, 1571, 1636,  369,
 1581, 1664, 1579, 1588, 1315,  369,  889, 1616, 1594, 1619,
 1659,  369,  374, 1638, 1655, 1668, 1671, 1670, 1673, 1675,
 1802, 1802, 1677,  439, 1680, 1682, 1810, 1810,  269,  269,
 1687, 1690, 1693, 1695, 1719,  370, 1702, 1704,  371, 1736,
 1821,  128,  369,  369,  440,  441,  442,  443,  444,  445,
  446,  447,  448,  449, 1714, 1721,  131, 1764,  272,  272,
  129, 1729,  129, 1741, 1752, 1754,  370, 1757, 1728, 1740,
 1751,  369, 1759, 1770,  739, 1756,  369, 1774,  370, 1778,
 1779, 1787, 1773,  739,  370, 1772, 1794, 1795,  724, 1813,
  370,  724, 1815, 1819,  724, 1820, 1824,    9,  374, 1174,
   21,  651, 1051,  611,  104, 1052,  129, 1166, 1503,  129,
  778,  369, 1014,  612,  562, 1067,  779,  374,  563,   35,
  864,  370,  370, 1018,  610,   35,  714,  948,   36,  399,
  293,  958,  167,   36,  852,   81,  374,  949,  369,  369,
  374,  715,  959,  982,  131,  950,  951,  983,  403,  874,
  370,  128,  852,  195,  177,  370,  827,  131,  373,  202,
  196,  178,  374,  203,  827,  246,  739,   54,  129,  369,
   21,  739, 1580,  739,  739,  739,  739,  739,  739,  739,
  739,  739,  739,  739, 1617, 1369, 1312, 1247,  552, 1226,
  370, 1125, 1354,  739,  739, 1355,  389, 1503, 1610,  739,
 1589,  739, 1639,  739, 1771,  739,  739,  739, 1742, 1780,
 1758, 1730, 1738, 1661,  131,  739,  739,  370,  370,  131,
  739,  739, 1027,  131, 1621, 1622, 1572,  374,  374, 1163,
  639,  739,  739, 1164, 1165, 1159,  734, 1650, 1662, 1812,
  389, 1575, 1753, 1805,  739,  734, 1477, 1748,  370, 1746,
 1804, 1463, 1651, 1122,  621, 1654,  824, 1478, 1184,  542,
  739,  340, 1270,  131, 1047,  371, 1044,  642,  729,  930,
  730, 1289, 1023, 1291,  755,  759,  757,  764, 1084,  761,
 1364,  763, 1449, 1595, 1339,  473,  921, 1262,  374, 1328,
 1346, 1281, 1338, 1251, 1432, 1340, 1389,  902, 1197, 1593,
   40,  369, 1438,  712,  714,  716,  778, 1123,  639,  639,
  639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
  639,  639,  639,  639,  779, 1120,  984,    0,  734,    0,
    0,  369,  374,  734,    0,  734,  734,  734,  734,  734,
  734,  734,  734,  734,  734,  734,    0,  131,    0,    0,
    0,    0,  371,    0,    0,  734,  734,    0,    0,    0,
    0,  734,    0,  734,    0,  734,    0,  734,  734,  734,
    0,    0,    0,    0,    0,    0,  129,  734,  734,  754,
  370,  369,  734,  734,    0,    0,  371,    0,  754,    0,
    0,  734,  734,  734,  734,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  734,    0,  129,    0,
  370,  129,    0,    0,  129,    0,    0,    0,    0,    0,
    0,    0,  734,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  369,    0,    5,    0,  369,  374,    0,    0,    0,  639,
    0,    0,    0,    0,    0,    0,    0,  131,    0,    0,
  370,    0,    0,    0,  129,    0,    0,    0,    0,    0,
  369,  754,    0,    0,    0,  371,  754,  129,  754,  754,
  754,  754,  754,  754,  754,  754,  754,  754,  754,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  754,  754,
    0,    0,  371,  371,  754,  605,  754,    0,  754,    0,
  754,  754,  754,    0,    0,    0,    0,    0,    0,  370,
    0,    0,    0,  370,    0,    0,  754,    0,    0,    0,
  371,  943,    0,  371,  129,    0,    0,    0,    0,  129,
    0,    0,    0,  129,    0,    0,    0,   33,    0,  370,
    0,    0,    0,    0,    0,    0,  369,   40,    0,  374,
   40,   40,    0,    0,   40,  754,    0,    0,    0,    0,
   40,    0,    0,  964,  965,  369,    0,    0,    0,    0,
    0,   40,    0,  129,    0,    0,   40,    0,    0,    0,
   40,  389,    0,   40,  369,    0,    0,    0,  369,    0,
    0,    0,    0,   40,    0,   40,   40,    0,    0,    0,
   40,   40,    0,    0,    0,   40,   40,    0,   40,   40,
   40,   40,    0,    0,    0,    0,   40,    0,    0,    0,
   40,    0,   40,    0,    0,  370,    0,    0,    0,    0,
    0,    0,   40,  623,   40,   40,  374,   40,    0,    0,
    0,   40,    0,    0,  370,    0,    0,    0,  369,    0,
    0,    0,    0,    0,    0,    0,    0,  129,    0,    0,
    0,   40,    0,  370,    0,    0,    0,  370,    0,    0,
  374,   40,   40,    0,    0,  369,  369,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    5,
    0,    0,  111,  111,    0,    0,  111,    0,    0,    0,
    0,    0,  111,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  389,  111,    0,    0,    0,    0,  111,    0,
    0,    0,  111,    0,    0,  111,    0,  370,    0,    0,
    0,    0,    0,    0,    0,  111,  369,  111,  111,    0,
    0,    0,  111,  111,    0,    0,    0,  111,  111,    0,
  111,  111,  111,  111,  370,  370,    0,    0,  111,  374,
  374,    0,  111,    0,  111,    0,    0,  129,  374,    0,
    0,    0,  369,    0,  111,    0,    0,  111,    0,  111,
  369,    0,    0,  111,    0,    0,  374,  374,    0,  374,
    0,    0,    0,   33,   33,    0,    0,   33,   33,    0,
    0,   33,    0,  111,    0,  374,    0,   33,    0,    0,
    0,   33,    0,   33,  374,  370,   33,  374,   33,   33,
   26,   33,    0,   33,    0,   33,    0,   33,   33,   33,
   33,    0,    0,   33,   33,    0,    0,    0,    0,   33,
   33,   33,   33,   33,    0,    0,   33,   33,   33,    0,
   33,  370,   33,   33,    0,   33,   33,   33,   33,  370,
    0,    0,   33,   33,   33,    0,    0,   33,   33,   33,
    0,    0,    0,    0,    0,    0,   33,   33,    0,   33,
   33,    0,   33,   33,   33,    0,    0,    0,   33,  623,
    0,    0,    0,  369,    0,    0,    0,  639,  623,    0,
    0,    0,    0,  623,  623,    0,    0,    0,   33,    0,
    0,    0,    0,    0,    0,    0,    0,   33,   33,   33,
    0,    0,    0,    0,    0,    0,  623,   33,    0,    0,
    0,    0,    0,    0,    0,    0,  623,    0, 1207,  623,
  623,    0,    0,    0,  623,    0,    0,  623,  623,  623,
    0,  623,  623,  623,  623,    0,    0,    0,    0,  623,
    0,    0, 1376,  623,    0,    0,    0,  623,   33,    0,
    0,    0,  370,    0,    0,  623,    0,    0,  623,    0,
  623,  623,    0,    0,    0,  623,  623,    0,  623,  623,
  623,  623,  623,  623,  623,  623,  623,  623,  623,    0,
    0,    0,    0,    0,  623,  623,  623,  369,  623,  623,
    0,    0,    0,  623,  623,    0,  623,  623,  623,  623,
  623,  623,  623, 1376,  623,  623,    0,  623,  623,  623,
  623,  623,  623,  623,  623,  623,  623,    0,  623,  623,
  623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
  623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
    0,    0,  623,    0,  623,    0,  623,    0, 1376,  623,
    0,    0,    0, 1053,    0,  623,    0,   26,    0,    0,
   26,   26,    0,    0,   26,    0,  370,    0,    0,    0,
   26,    0,    0,    0,  369,    0,    0,    0,    0,    0,
    0,   26,    0,    0,    0,    0,   26,    0,    0,    0,
   26,    0,    0,   26,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   26,    0,   26,   26,    0,  369,    0,
   26,   26,    0,    0,    0,   26,   26,    0,   26,   26,
   26,   26,    0,    0,    0,    0,   26,    0,    0,    0,
   26,    0,   26,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   26,  514,    0,   26,    0,   26,    0,    0,
    0,   26,    0,  370,    0,    0,    0,    0,    0,  756,
    0,    0,    0,    0,    0,    0,  515,    0,  756,    0,
    0,   26,    0,    0,    0,    0,  516,    0,    0,  517,
   23,   26,   26,  518,  519,    0,    0,  370,  520,  521,
    0,  522,  523,  524,  525,    0,    0,  369,  369,  526,
    0,    0,    0,  527,    0,    0,  369,    0,    0,    0,
    0,    0,    0,    0,    0,  528,    0,    0,  529,    0,
  530,    0,    0,    0,  369,  369,    0,  369,    0,    0,
    0,    0, 1376,    0,  976,    0,    0,    0,    0,    0,
    0, 1376,    0,  369,  531,    0,    0,    0,    0,    0,
 1376,  756,  369,    0,    0,  369,  756,    0,  756,  756,
  756,  756,  756,  756,  756,  756,  756,  756,  756,    0,
    0,    0,    0,    0,    0,    0,  370,  370,  756,  756,
    0,    0,    0,    0,  756,  370,  756,    0,  756,    0,
  756,  756,  756,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  370,  370,    0,  370,    0,    0, 1053,
 1053,    0,    0,    0,    0, 1053, 1053,    0,    0, 1053,
 1053, 1053,  370,    0,    0,    0, 1053, 1053, 1053, 1053,
 1053,  370, 1053, 1053,  370, 1053, 1053, 1053, 1053, 1053,
 1053, 1053, 1053,    0,    0,  756,    0, 1053,    0, 1053,
 1053, 1053, 1053, 1053, 1053,    0,    0, 1053,    0,    0,
    0, 1053, 1053,    0, 1053, 1053, 1053,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1053,    0, 1053,  426,
 1053, 1053,    0,    0, 1053,    0, 1053, 1053, 1053, 1053,
 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,    0, 1053,
    0,    0, 1053, 1053,    0,    0, 1053, 1053,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1053, 1053, 1053, 1053, 1053,    0,    0, 1053, 1053,
    0,    0,    0, 1053, 1053,    0,    0, 1053,    0,    0,
    0,    0, 1053, 1053, 1053, 1053, 1053,    0,    0,    0,
 1053,    0, 1053,    0,    0,    0,    0,    0, 1053, 1053,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1053, 1053, 1053, 1053,    0, 1053,    0,
  976,  976,    0,    0,    0, 1053,  976,  976,    0,    0,
  976,  976,  976,    0,    0,    0,    0,  976,  976,  976,
  976,  976,    0,  976,  976,    0,  976,  976,  976,  976,
  976,  976,  976,    0,    0,    0,    0,    0,  976,  426,
  976,  976,  976,  976,  976,  976,    0,    0,  976,    0,
    0,    0,  976,  976,    0,  976,  976,  976,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  976,    0,  976,
    0,  976,  976,    0,    0,  976,    0,  976,  976,  976,
  976,  976,  976,  976,  976,  976,  976,  976,  976,    0,
  976,    0,    0,  976,  976,    0,    0,  976,  976,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  976,  976,  976,  976,  976,    0,    0,  976,
  976,    0,    0,    0,  976,  976,    0,    0,  976,    0,
    0,    0,    0,  976,  976,  976,  976,  976,    0,    0,
    0,  976,    0,  976,    0,  426,    0,    0,    0,  976,
  976,    0,    0,    0,  426,    0,    0,    0,    0,  426,
  426,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  976,  976,  976,  976,    0,  976,
    0,    0,  426,    0,    0,    0,  976,    0,    0,  936,
    0,    0,  426,    0,    0,  426,  426,    0,    0,    0,
  426,    0,    0,  426,  426,  426,    0,  426,  426,  426,
  426,    0,    0,    0,    0,  426,    0,    0,    0,  426,
    0,    0,    0,  426,    0,    0,    0,    0,    0,    0,
    0,  426,    0,    0,  426,    0,  426,  426,    0,    0,
    0,  426,  426,    0,  426,  426,  426,  426,  426,  426,
  426,  426,  426,  426,  426,  426,    0,    0,    0,    0,
  426,  426,    0,    0,  426,  426,    0,    0,    0,  426,
  426,  426,  426,  426,  426,  426,  426,  426,  426,    0,
  426,  426,    0,    0,  426,  426,  426,  426,  426,    0,
    0,  426,  426,    0,    0,  426,  426,  426,  426,  426,
  426,  426,  426,  426,  426,    0,    0,    0,    0,  426,
  426,    0,    0,    0,    0,  426,    0,    0,  426,    0,
  426,    0,  426,  416,    0,  426,    0,    0,    0,    0,
    0,  426,  426,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  426,    0,    0,  426,  426,    0,    0,    0,
  426,    0,    0,    0,  426,  426,    0,  426,  426,  426,
  426,    0,    0,    0,    0,  426,    0,    0,    0,  426,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  426,    0,    0,  426,    0,  426,  426,    0,    0,
    0,  426,  426,    0,  426,  426,  426,  426,  426,  426,
  426,  426,  426,  426,  426,  426,    0,    0,    0,    0,
  426,  426,    0,    0,  426,  426,    0,    0,    0,  426,
  426,  426,  426,  426,  426,  426,  426,  426,  426,    0,
  426,  426,    0,    0,  426,  426,  426,  426,  426,    0,
    0,  426,  426,    0,    0,  936,  426,  426,  426,  426,
  426,  426,  426,  426,  936,    0,    0,  456,    0,  936,
  936,    0,    0,    0,    0,  426,    0,    0,  426,    0,
  426,    0,  426,    0,    0,  426,    0,    0,    0,    0,
    0,  426,  936,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  936,    0,    0,  936,  936,    0,    0,    0,
  936,    0,    0,  936,  936,  936,    0,  936,  936,  936,
  936,    0,    0,    0,    0,  936,    0,    0,    0,  936,
    0,    0,    0,  936,    0,    0,    0,    0,    0,    0,
    0,  936,    0,    0,  936,    0,  936,  936,    0,    0,
    0,  936,  936,    0,  936,  936,  936,  936,  936,  936,
  936,  936,  936,  936,  936,    0,    0,    0,    0,    0,
  936,  936,    0,    0,  936,  936,    0,    0,    0,  936,
  936,  936,  936,  936,  936,    0,  936,  936,  936,  416,
  936,  936,    0,    0,  936,  936,  936,  936,  416,    0,
    0,  936,  936,  416,  416,    0,  936,  936,  936,  936,
  936,  936,  936,  936,    0,    0,    0,  461,    0,    0,
    0,    0,    0,    0,    0,  936,  416,    0,  936,    0,
  936,    0,  936,    0,    0,  936,  416,    0,    0,  416,
  416,  936,    0,    0,  416,    0,    0,  416,  416,  416,
    0,  416,  416,  416,  416,    0,    0,    0,    0,  416,
    0,    0,    0,  416,    0,    0,    0,  416,    0,    0,
    0,    0,    0,    0,    0,  416,    0,    0,  416,    0,
  416,  416,    0,    0,    0,  416,  416,    0,  416,  416,
  416,  416,  416,  416,  416,  416,  416,  416,  416,    0,
    0,    0,    0,    0,  416,  416,    0,    0,  416,  416,
    0,    0,    0,  416,  416,  416,  416,  416,  416,    0,
  416,  416,  416,  456,  416,  416,    0,    0,  416,  416,
  416,  416,  456,    0,    0,  416,  416,  456,  456,    0,
  416,  416,  416,  416,  416,  416,  416,  416,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  416,
  456,    0,  416,    0,  416,    0,  416,    0,    0,  416,
  456,    0,    0,  456,  456,  416,    0,   39,  456,    0,
    0,  456,  456,  456,    0,  456,  456,  456,  456,    0,
    0,    0,    0,  456,    0,    0,    0,  456,    0,    0,
    0,  456,    0,    0,    0,    0,    0,    0,    0,  456,
    0,    0,  456,    0,  456,  456,    0,    0,    0,  456,
  456,    0,  456,  456,  456,  456,  456,  456,  456,  456,
  456,  456,  456,    0,    0, 1147,    0,    0,  456,  456,
    0,    0,  456,  456, 1147,    0,    0,  456,  456,    0,
  456,  456,  456,    0,  456,  456,  456,    0,  456,  456,
    0,    0,  456,  456,  456,  456,    0,    0,    0,  456,
  456,    0,   38,  461,  456,  456,  456,  456,  456,  456,
  456,  456,  461,    0,    0,    0,    0,    0,  461,    0,
    0,    0,    0,  456,    0,    0,  456,    0,  456,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  456,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  461,    0,    0, 1147,    0,    0,
    0,    0, 1147,    0, 1147, 1147, 1147, 1147, 1147, 1147,
 1147, 1147, 1147, 1147,    0,    0,   27,    0,    0,    0,
    0,    0,    0,    0, 1147, 1147,    0,    0,    0,    0,
 1147,    0, 1147,    0, 1147,  461, 1147, 1147, 1147,  461,
  461,    0,  461,  461,  461,  461,  461,  461,  461,  461,
  461,  461,  461,    0,    0,    0,    0,    0,    0,  461,
    0,    0,  461,  461,    0,    0,    0,  461,  461,  461,
  461,  461,  461,    0,  461,  461,  461,    0,  461,  461,
    0,    0,  461,  461,  461,  461,    0,    0,    0,  461,
  461, 1147,    0,    0,  461,  461,  461,  461,  461,  461,
  461,  461,    0,    0,   39,    0,    0,   39,   39,   37,
    0,   39,    0,  461,    0,    0,  461,   39,  461,    0,
  461,    0,    0,  461,    0,    0,    0,    0,   39,  461,
    0,    0,    0,   39,    0,    0,    0,   39,    0,    0,
   39,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   39,    0,   39,   39,    0,    0,    0,   39,   39,    0,
    0,    0,   39,   39,    0,   39,   39,   39,   39,    0,
    0,    0,    0,   39,    0,    0,    0,   39,    0,   39,
    0,    0,    0, 1155,    0,    0,    0,    0,    0,   39,
    0,   39,   39,    0,   39,    0,    0,    0,   39,   38,
    0,    0,   38,   38,    0,    0,   38,    0,    0,    0,
    0,    0,   38,    0,    0,    0,    0,    0,   39,    0,
    0,    0,    0,   38,    0,    0,    0,    0,   38,   39,
    0,    0,   38,    0,    0,   38,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   38,    0,   38,   38,    0,
  111,    0,   38,   38,    0,    0,    0,   38,   38,    0,
   38,   38,   38,   38,    0,    0,    0,    0,   38,    0,
    0,    0,   38,   27,   38,    0,   27,   27,    0,    0,
   27,    0,    0,    0,   38,    0,   27,   38,    0,   38,
    0,    0,    0,   38,    0,    0,    0,   27,    0,    0,
    0,    0,   27,    0,    0,    0,   27,    0,    0,   27,
    0,    0,    0,   38,    0,    0,    0,    7,    0,   27,
    0,   27,   27,   38,   38,    0,   27,   27,    0,    0,
    0,   27,   27,    0,   27,   27,   27,   27,    0,    0,
    0,    0,   27,    0,    0,    0,   27,    0,   27,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   27,    0,
    0,   27,    0,   27,    0,    0,   37,   27,    0,   37,
   37,    0,    0,   37,    0,    0,    0,    0,    0,   37,
    0,    0,    0,    0, 1156,    0,    0,   27,    0,    0,
   37,    0,    0,    0,    0,   37,    0,   27,   27,   37,
    0,    0,   37,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   37,    0,   37,   37,    0,    0,    0,   37,
   37,    0,    0,    0,   37,   37,    0,   37,   37,   37,
   37,    0,    0,    0,    0,   37,    0,    0,    0,   37,
 1155,   37,    0,  111,  111,    0,    0,  111,    0,    0,
    0,   37,    0,  111,   37,    0,   37,    0,  112,    0,
   37,    0,    0,    0,  111,    0,    0,    0,    0,  111,
    0,    0,    0,  111,    0,    0,  111,    0,    0,    0,
   37,    0,    0,    0,    0,    0,  111,    0,  111,  111,
    0,   37,    0,  111,  111,    0,    0,    0,  111,  111,
    0,  111,  111,  111,  111,    0,    0,  111,    0,  111,
  111,  111,    0,  111,  111,  111,    0,    0,    0,    0,
  111,    0,    0,    0,    0,  111,    0,    0,  111,    0,
  111,  111,    0,    0,  111,    0,  111,    0,    0,    0,
  111,    0,    0,  111,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  111,  111,  111,  111,    0,    0,    0,
  111,  111,    0,    0,    0,  111,  111,    0,  111,  111,
  111,  111,    0,    0,    7,    0,  111,  112,  112,    0,
  111,  112,  111,    0,    0,    0,    0,  112,    0,    0,
    0,    0,  111,    0,    0,  111,    0,  111,  112,    0,
    0,  111,    0,  112,    0,    0,    0,  112,    0,    0,
  112,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  112,  111,  112,  112,    0,    0,    0,  112,  112,    0,
    0,    0,  112,  112,    0,  112,  112,  112,  112,    0,
    0, 1156,    0,  112,  111,  111,    0,  112,  111,  112,
    0,    0,    0,    0,  111,    0,    0,    0,    0,  112,
    0,    0,  112,    0,  112,  111,    0,    0,  112,    0,
  111,    0,    0,    0,  111,    0,    0,  111,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  111,  112,  111,
  111,    0,    0,    0,  111,  111,    0,    0,    0,  111,
  111,    0,  111,  111,  111,  111,    0,    0,    0,    0,
  111,    0,    0,    0,  111,  112,  111,    0,  112,  112,
    0,    0,  112,    0,    0,    0,  111,    0,  112,  111,
    0,  111,    0,    0,    0,  111,    0,    0,    0,  112,
    0,    0,    0,    0,  112,    0,    0,    0,  112,    0,
    0,  112,    0,    0,    0,  111,    0,    0,    0,    0,
    0,  112,    0,  112,  112,    0,    0,    0,  112,  112,
    0,    0,    0,  112,  112,    0,  112,  112,  112,  112,
    0,    0,    0,    0,  112,    0,    0,    0,  112,    0,
  112,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  112,    0,    0,  112,   56,  112,    0,    0,    0,  112,
   57,   58,    0,    0,   59,   60,   61,    0,    0,    0,
    0,   62,   24,   63,   25,    0,    0,   26,   64,  112,
   65,   66,   27,   67,   68,   69,   28,    0,    0,    0,
    0,    0,   70,    0,   71,   30,   72,   73,   74,   75,
    0,    0,   32,    0,    0,    0,   76,   33,    0,   77,
   78,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   79,    0,   36,    0,   37,   80,    0,    0,   38,
    0,   81,   82,   83,   84,   85,   86,   39,   40,   87,
   88,   41,   89,    0,   90,  939,    0,   91,   92,    0,
    0,   93,   94,    0,  939,    0,    0,    0,    0,    0,
  939,    0,    0,    0,    0,    0,   95,   96,   97,   98,
   99,    0,    0,  100,  101,    0,    0,    0,  102,    0,
    0,    0,  103,    0,    0,    0,    0,  104,  105,  106,
  107,  108,    0,    0,    0,  109,  939,  110,    0,    0,
    0,    0,    0,  111,  112,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  113,  114,
  115,  116,    0,    0,    0,    0,    0,  939,    0,    0,
  210,    0,  939,    0,  939,  939,  939,  939,  939,  939,
  939,  939,  939,  939,  939,  939,    0,    0,    0,    0,
    0,  939,  939,    0,  939,  939,    0,    0,    0,  939,
  939,  939,  939,  939,  939,  939,  939,  939,  939,    0,
  939,  939,    0,  939,  939,  939,  939,  939,  939,  939,
  939,  939,  939,    0,  939,  939,  939,  939,  939,  939,
  939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
  939,  939,  939,  939,  939,  939,  939,  939,  618,    0,
  939,    0,  939,  939,    0,  939,  939,    0,    0,    0,
    0,  939,  939,    0,    0,    0,   24,    0,   25,    0,
    0,   26,    0,    0,    0,    0,   27,    0,    0,    0,
   28,    0,    0,    0,    0,    0,    0,    0,    0,   30,
    0,    0,    0,    0,    0,    0,   32,    0,  939,    0,
    0,   33,    0,    0,    0,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
    0,    0,    0,   38,    0,    0,    0,    0,    0,    0,
    0,   39,   40,    0,    0,   41,    0,    0,  619,  939,
    0,    0,    0,    0,  939,    0,  939,  939,  939,  939,
  939,  939,  939,  939,  939,  939,  939,  939,    0,    0,
    0,    0,    0,  939,  939,    0,  939,  939,    0,    0,
    0,  939,  939,  939,  939,  939,  939,  939,  939,  939,
  939,    0,  939,  939,    0,  939,  939,  939,  939,  939,
  939,  939,  939,  939,  939,    0,  939,  939,  939,  939,
  939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
  939,  939,  939,  939,  939,  939,  939,  939,  939,  426,
  663,    0,  939,  419,  939,    0,    0,  939,  426,    0,
    0,    0,    0,  939,  426,    0,    0,    0,   24,    0,
   25,    0,    0,   26,    0,    0,    0,    0,   27,    0,
    0,    0,   28,    0,    0,    0,    0,    0,    0,    0,
    0,   30,    0,    0,    0,    0,    0,    0,   32,    0,
  426,    0,    0,   33,    0,    0,    0,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,   37,    0,    0,    0,   38,    0,    0,    0,    0,
    0,    0,    0,   39,   40,    0,    0,   41,    0,    0,
   90,  426,    0,    0,    0,    0,  426,    0,  426,  426,
  426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
    0,    0,    0,    0,    0,  426,  426,    0,  426,  426,
    0,    0,    0,  426,  426,  426,  426,  426,  426,  426,
  426,  426,  426,    0,  426,  426,    0,  426,  426,  426,
  426,  426,  426,  426,  426,  426,  426,    0,  426,  426,
  426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
  426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
  717,  426,    0,    0,  426,  419,  426,    0,    0,  426,
  426,    0,    0,    0,    0,  426,  426,    0,   24,    0,
   25,    0,    0,   26,    0,    0,    0,    0,   27,    0,
    0,    0,   28,    0,    0,    0,    0,    0,    0,    0,
    0,   30,    0,    0,    0,    0,    0,    0,   32,    0,
    0,    0,  426,   33,    0,    0,    0,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,   37,    0,    0,    0,   38,    0,    0,    0,    0,
    0,    0,    0,   39,   40,    0,    0,   41,    0,    0,
   90,    0,    0,  426,    0,    0,    0,    0,  426,    0,
  426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
  426,  426,    0,    0,    0,    0,    0,  426,  426,    0,
  426,  426,    0,    0,    0,    0,  426,  426,  426,  426,
  426,  426,  426,  426,  426,    0,  426,  426,    0,  426,
  426,  426,  426,  426,  426,  426,  426,  426,  426,    0,
  426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
  426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
  426,  426, 1064,  625,    0,  419,  426,    0,  426,    0,
    0,  426,  625,    0,    0,    0,    0,  426,  625,    0,
   24,    0,   25,    0,    0,   26,    0,    0,    0,    0,
   27,    0,    0,    0,   28,    0,    0,    0,    0,    0,
    0,    0,    0,   30,    0,    0,    0,    0,    0,    0,
   32,    0,    0,    0,  625,   33,    0,    0,    0,   34,
    0,    0,    0,    0,    0,    0,  426,    0,    0,    0,
    0,   36,    0,   37,    0,    0,    0,   38,    0,    0,
    0,  426,    0,    0,    0,   39,   40,    0,    0,   41,
    0,    0,   90,    0,    0,  625,    0,    0,    0,    0,
  625,    0,  625,  625,  625,  625,  625,  625,  625,  625,
  625,  625,  625,    0,    0,    0,    0,  426,    0,    0,
  625,    0,  625,  625,    0,    0,    0,  625,  625,  625,
  625,  625,  625,  625,  625,  625,  625,    0,  625,  625,
    0,  625,  625,  625,  625,  625,  625,  625,  625,  625,
  625,    0,  625,  625,  625,  625,  625,  625,  625,  625,
  625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
  625,  625,  625,  625,    0,  621,    0,  419,    0,    0,
  625,    0,    0,  426,  621,    0,    0,    0,    0,  625,
  621,  426,    0,    0,  426,    0,  426,  426,    0,    0,
    0,  426,  426,    0,    0,  426,  426,  426,  426,  426,
  426,  426,  426,  426,    0,  426,  426,  426,  426,  426,
  426,  426,  426,  426,  426,    0,  621,    0,    0,    0,
    0,    0,    0,    0,    0,  426,  426,    0,    0,    0,
    0,    0,    0,  426,    0,    0,  426,    0,    0,    0,
  484,    0,  426,    0,    0,    0,    0,    0,    0,  484,
    0,    0,    0,    0,    0,  484,    0,  621,    0,    0,
    0,    0,  621,    0,  621,  621,  621,  621,  621,  621,
  621,  621,  621,  621,  621,    0,    0,    0,    0,    0,
    0,    0,  621,    0,  621,  621,    0,    0,    0,  621,
  621,  484,  621,  621,  621,  621,  621,  621,  621,    0,
  621,  621,    0,  621,  621,  621,  621,  621,  621,  621,
  621,  621,  621,    0,  621,  621,  621,  621,  621,  621,
  621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
  621,  621,  621,  621,  621,  621,    0,  629,    0,    0,
    0,    0,  621,    0,    0,  621,  629,    0,    0,    0,
    0,  621,  629,    0,    0,    0,  416,  484,    0,    0,
    0,    0,    0,    0,    0,  484,  416,  484,  484,  484,
  484,  484,    0,  484,    0,  484,  484,    0,  484,  484,
  484,  484,  484,    0,  484,  484,  484,  484,  629,  484,
  484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
  484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
  484,    0,    0,    0,    0,  416,    0,  484,    0,    0,
  484,    0,    0,    0,    0,    0,  484,    0,    0,  629,
    0,    0,    0,    0,  629,    0,  629,  629,  629,  629,
  629,  629,  629,  629,  629,  629,  629,    0,    0,  751,
    0,    0,    0,    0,  629,    0,  629,  629,  751,    0,
    0,    0,  629,    0,  629,  629,  629,  629,  629,  629,
  629,    0,  629,  629,    0,  629,  629,  629,  629,  629,
  629,  629,  629,  629,  629,    0,  629,  629,  629,  629,
  629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
  629,  629,  629,  629,  629,  629,  629,  629,    0,  426,
    0,    0,    0,    0,  629,    0,    0,  629,  426,    0,
    0,    0,    0,  629,  426,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  751,    0,    0,    0,    0,  751,    0,  751,  751,
  751,  751,  751,  751,  751,  751,  751,  751,  751,    0,
  426,    0,    0,    0,    0,    0,    0,    0,  751,  751,
    0,    0,    0,    0,  751,    0,  751,    0,  751,    0,
  751,  751,  751,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  751,    0,    0,    0,
    0,  426,    0,    0,    0,    0,  426,  751,  426,  426,
  426,  426,  426,  426,  426,  426,  426,  426,  426,  751,
    0,  752,    0,    0,    0,    0,  426,    0,  426,  426,
  752,    0,    0,    0,  426,  751,  426,  426,  426,  426,
  426,  426,  426,    0,  426,  426,    0,  426,  426,  426,
  426,  426,  426,  426,  426,  426,  426,    0,  426,  426,
  426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
  426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
    0,  544,    0,    0,    0,    0,  426,    0,    0,  426,
  544,    0,    0,    0,    0,  426,  544,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  752,    0,    0,    0,    0,  752,    0,
  752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
  752,    0,  544,    0,    0,    0,    0,    0,    0,    0,
  752,  752,    0,    0,    0,    0,  752,    0,  752,    0,
  752,    0,  752,  752,  752,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  752,    0,
    0,    0,    0,  544,    0,    0,    0,    0,  544,  752,
  544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
  544,  752,    0,    0,    0,    0,    0,    0,  544,    0,
  544,  544,    0,    0,    0,    0,  544,  752,  544,  544,
  544,  544,  544,  544,  544,    0,  544,  544,    0,  544,
  544,  544,  544,  544,  544,  544,  544,  544,  544,    0,
  544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
  544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
  544,  544,    0,  656,    0,    0,    0,    0,  544,    0,
    0,  544,  656,    0,  448,    0,    0,  544,  656,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  448,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  448,    0,    0,
  448,    0,    0,    0,  656,  448,    0,    0,  315,  448,
  448,    0,  448,  448,  448,  448,  426,    0,    0,    0,
  448,    0,    0,    0,  448,  426,    0,    0,  448,    0,
    0,  426,    0,    0,    0,  939,  448,    0,    0,  448,
    0,  448,    0,    0,    0,  656,    0,    0,    0,    0,
  656,    0,  656,  656,  656,  656,  656,  656,  656,  656,
  656,  656,  656,    0,    0,  448,    0,  426,    0,    0,
    0,    0,  656,  656,    0,  448,    0,    0,  656,    0,
  656,    0,  656,  939,  656,  656,  656,    0,  656,  656,
    0,  656,  656,  656,  656,  656,  656,  656,  656,  656,
  656,    0,    0,    0,  656,  656,  656,  656,  656,  656,
  656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
  656,  656,    0,  656,    0,  448,  426,    0,    0,    0,
    0,    0,  426,  426,    0,    0,    0,    0,    0,  656,
    0,  426,  426,  426,  426,  426,  426,  426,  939,  426,
    0,  426,  426,    0,  426,  426,  426,  426,  426,  426,
  426,  426,  426,  426,    0,  426,  426,  426,  426,  426,
  426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
  426,  426,  426,  426,  426,  426,  426, 1236,  416,    0,
    0,  426,    0,  426,    0,    0,  426,  416,    0,    0,
    0,    0,  426,  416,    0,   24,    0,   25,    0,    0,
   26,    0,    0,    0,    0,   27,    0,    0,    0,   28,
    0,    0,    0,    0,    0,    0,    0,    0,   30,    0,
    0,    0,    0,    0,    0,   32,    0,    0,    0,  416,
   33,    0,    0,    0,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,    0,
    0,    0,   38,    0,    0,    0,    0,    0,    0,    0,
   39,   40,    0,    0,   41,    0,    0,   90,    0,    0,
  416,    0,    0,    0,    0,  416,    0,  416,  416,  416,
  416,  416,  416,  416,  416,  416,  416,  416,    0,    0,
    0,  698,    0,    0,  416,  484,    0,  416,  416,    0,
  698,    0,    0,  416,  416,  416,  698,  416,  484,  416,
  416,  416,    0,  416,  416,    0,    0,  416,  416,  416,
  416,    0,    0,    0,  416,  416,    0,  484,  484,  416,
  416,  416,  416,  416,  416,  416,  416,    0,    0,    0,
    0,    0,  698,    0,    0,    0,    0,  484,  416,    0,
    0,    0,  419,  416,    0,  484,    0,    0,  484,    0,
    0,    0,    0,    0,  416,    0,    0,    0,  426,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  698,    0,    0,    0,    0,  698,    0,
  698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
  698,    0,    0,    0,  426,    0,    0,    0,  485,    0,
  698,  698,    0,    0,    0,    0,  698,    0,  698,  485,
  698,  485,  698,  698,  698,    0,  698,  698,    0,    0,
  698,  698,  698,  698,    0,    0,    0,  698,  698,    0,
  485,  485,  698,  698,  698,  698,  698,  698,  698,  698,
  702,    0,    0,    0,    0,    0,    0,    0,    0,  702,
  485,  698,    0,    0,    0,  702,    0,    0,  485,    0,
  426,  485,    0,    0,    0,    0,    0,  698,    0,    0,
    0,  426,  426,  426,  426,  939,    0,    0,  426,  426,
    0,    0,  426,  426,  426,  426,  426,  426,  426,  426,
  426,  702,  426,  426,  426,  426,  426,  426,  426,  426,
  426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
  426,  426,  426,  426,    0,    0,    0,    0,    0,    0,
  426,    0,    0,  426,    0,    0,    0,    0,    0,    0,
    0,    0,  702,    0,    0,    0,    0,  702,    0,  702,
  702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
    0,    0,    0,    0,    0,    0,    0,  488,    0,  702,
  702,    0,    0,    0,    0,  702,    0,  702,  488,  702,
  488,  702,  702,  702,    0,  702,  702,    0,    0,  702,
  702,  702,  702,  447,    0,    0,  702,  702,    0,  488,
  488,  702,  702,  702,  702,  702,  702,  702,  702,  701,
    0,    0,    0,    0,    0,    0,  447,    0,  701,  488,
  702,    0,    0,    0,  701,    0,  447,  488,    0,  447,
  488,    0,    0,    0,  447,    0,  702,  314,  447,  447,
    0,  447,  447,  447,  447,    0,    0,    0,    0,  447,
    0,    0,    0,  447,    0,    0,    0,  447,    0,    0,
  701,    0,    0,    0,    0,  447,    0,    0,  447,    0,
  447,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  447,    0,    0,    0,    0,    0,
    0,  701,    0,    0,  447,    0,  701,    0,  701,  701,
  701,  701,  701,  701,  701,  701,  701,  701,  701,    0,
    0,    0,    0,    0,    0,    0,  498,    0,  701,  701,
    0,    0,    0,    0,  701,    0,  701,  498,  701,  498,
  701,  701,  701,    0,  701,  701,    0,    0,  701,  701,
  701,  701,  514,    0,  447,  701,  701,    0,  498,  498,
  701,  701,  701,  701,  701,  701,  701,  701,  416,    0,
    0,    0,    0,    0,    0,  515,    0,  416,  498,  701,
    0,    0,    0,  416,    0,  516,  498,    0,  517,  498,
    0,    0,    0,  519,    0,  701,    0,  520,  521,    0,
  522,  523,  524,  525,    0,    0,    0,    0,  526,    0,
    0,    0,  527,    0,    0,    0, 1629,    0,    0,  416,
    0,    0,    0,    0,  528,    0,    0,  529,    0,  530,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  531,    0,    0,    0,    0,    0,    0,
  416,    0,    0, 1641,    0,  416,    0,  416,  416,  416,
  416,  416,  416,  416,  416,  416,  416,  416,    0,    0,
    0,  678,    0,    0,  416,    0,    0,  416,  416,    0,
  678,    0,    0,  416,  416,  416,  678,  416,    0,  416,
  416,  416,    0,  416,  416,    0,    0,  416,  416,  416,
  416,    0,    0, 1630,  416,  416,    0,    0,    0,  416,
  416,  416,  416,  416,  416,  416,  416,    0,    0,    0,
    0,    0,  678,    0,    0,    0,    0,    0,  416,    0,
    0,    0,    0,  416,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  930,  416,    0,    0,    0,    0,    0,
    0,    0,  930,    0,    0,    0,    0,    0,  930,    0,
    0,    0,    0,  678,    0,    0,    0,    0,  678,    0,
  678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
  678,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  678,  678,    0,    0,  930,    0,  678,    0,  678,    0,
  678,    0,  678,  678,  678,    0,  678,  678,    0,    0,
  678,  678,  678,  678,  678,  678,  678,  678,  678,    0,
    0,    0,  678,  678,  678,  678,  678,  678,  678,  678,
    0,    0,    0,    0,    0,  930,    0,    0,    0,    0,
  930,  678,  930,  930,  930,  930,  930,  930,  930,  930,
  930,  930,  930,    0,    0,    0,  685,  678,    0,  930,
    0,    0,  930,  930,    0,  685,    0,    0,  930,    0,
  930,  685,  930,    0,  930,  930,  930,    0,  930,  930,
    0,    0,  930,  930,  930,  930,    0,    0,    0,  930,
  930,    0,    0,    0,  930,  930,  930,  930,  930,  930,
  930,  930,    0,    0,    0,    0,    0,  685,    0,    0,
    0,    0,    0,  930,    0,    0,    0,    0,  930,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1059,  930,
    0,    0,    0,    0,    0,    0,    0, 1059,    0,    0,
    0,    0,    0, 1059,    0,    0,    0,    0,  685,    0,
    0,    0,    0,  685,    0,  685,  685,  685,  685,  685,
  685,  685,  685,  685,  685,  685,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  685,  685,    0,    0, 1059,
    0,  685,    0,  685,    0,  685,    0,  685,  685,  685,
    0,  685,  685,    0,    0,  685,  685,  685,  685,    0,
    0,    0,  685,  685,    0,    0,    0,  685,  685,  685,
  685,  685,  685,  685,  685,    0,    0,    0,    0,    0,
 1059,    0,    0,    0,    0, 1059,  685, 1059, 1059, 1059,
 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,    0,    0,
    0,  686,  685,    0,    0,    0,    0, 1059, 1059,    0,
  686,    0,    0, 1059,    0, 1059,  686, 1059,    0, 1059,
 1059, 1059,    0, 1059, 1059,    0,    0, 1059, 1059, 1059,
 1059,    0,    0,    0, 1059, 1059,    0,    0,    0, 1059,
 1059, 1059, 1059, 1059, 1059, 1059, 1059,    0,    0,    0,
    0,    0,  686,    0,    0,    0,    0,    0, 1059,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  687, 1059,    0,    0,    0,    0,    0,
    0,    0,  687,    0,    0,    0,    0,    0,  687,    0,
    0,    0,    0,  686,    0,    0,    0,    0,  686,    0,
  686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
  686,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  686,  686,    0,    0,  687,    0,  686,    0,  686,    0,
  686,    0,  686,  686,  686,    0,  686,  686,    0,    0,
  686,  686,  686,  686,    0,    0,    0,  686,  686,    0,
    0,    0,  686,  686,  686,  686,  686,  686,  686,  686,
    0,    0,    0,    0,    0,  687,    0,    0,    0,    0,
  687,  686,  687,  687,  687,  687,  687,  687,  687,  687,
  687,  687,  687,    0,    0,    0,    0,  686,    0,    0,
    0,    0,  687,  687,    0,    0,    0,    0,  687,    0,
  687,    0,  687,    0,  687,  687,  687,    0,  687,  687,
    0,    0,  687,  687,  687,  687,  581,    0,    0,  687,
  687,    0,    0,    0,  687,  687,  687,  687,  687,  687,
  687,  687,    0,   62,   24,    0,   25,    0,    0,   26,
  263,    0,    0,  687,   27,   67,   68,    0,   28,    0,
    0,    0,    0,  720,   70,    0,    0,   30,    0,  687,
    0,    0,  720,    0,   32,    0,    0,    0,    0,   33,
    0,   77,   78,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   36,    0,   37,   80,    0,
    0,   38,    0,    0,   82,    0,   84,    0,   86,   39,
   40,  266,    0,   41,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  721,    0,    0,   95,   96,
   97,  291,  582,    0,  721,  100,  101,    0,    0,    0,
    0,    0,    0,    0,  103,  720,    0,    0,    0,    0,
  720,    0,  720,  720,  720,  720,  720,  720,  720,  720,
  720,  720,  720,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  720,  720,    0,    0,    0,    0,  720,    0,
  720,    0,  720,    0,  720,  720,  720,    0,    0,    0,
  113,  583,  720,  720,  720,  720,    0,    0,    0,  720,
  720,  584,  585,    0,  720,  720,  720,  720,  720,  720,
  720,  720,    0,    0,    0,    0,    0,  721,    0,    0,
    0,    0,  721,  720,  721,  721,  721,  721,  721,  721,
  721,  721,  721,  721,  721,    0,    0,  722,    0,  720,
    0,    0,    0,    0,  721,  721,  722,    0,    0,    0,
  721,    0,  721,    0,  721,    0,  721,  721,  721,    0,
    0,    0,    0,    0,  721,  721,  721,  721,    0,    0,
    0,  721,  721,    0,    0,    0,  721,  721,  721,  721,
  721,  721,  721,  721,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  721,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  725,
    0,  721,    0,    0,    0,    0,    0,    0,  725,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  722,
    0,    0,    0,    0,  722,    0,  722,  722,  722,  722,
  722,  722,  722,  722,  722,  722,  722,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  722,  722,    0,    0,
    0,    0,  722,    0,  722,    0,  722,    0,  722,  722,
  722,    0,    0,    0,    0,    0,  722,  722,  722,  722,
    0,    0,    0,  722,  722,    0,    0,    0,  722,  722,
  722,  722,  722,  722,  722,  722,    0,    0,    0,    0,
    0,  725,    0,    0,    0,    0,  725,  722,  725,  725,
  725,  725,  725,  725,  725,  725,  725,  725,  725,    0,
    0,  726,    0,  722,    0,    0,    0,    0,  725,  725,
  726,    0,    0,    0,  725,    0,  725,    0,  725,    0,
  725,  725,  725,    0,    0,    0,    0,    0,  725,  725,
  725,  725,    0,    0,    0,  725,  725,    0,    0,    0,
    0,    0,  725,  725,  725,  725,  725,  725,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  725,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  727,    0,  725,    0,    0,    0,    0,
    0,    0,  727,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  726,    0,    0,    0,    0,  726,    0,
  726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
  726,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  726,  726,    0,    0,    0,    0,  726,    0,  726,    0,
  726,    0,  726,  726,  726,    0,    0,    0,    0,    0,
  726,  726,  726,  726,    0,    0,    0,  726,  726,    0,
    0,    0,    0,    0,  726,  726,  726,  726,  726,  726,
    0,    0,    0,    0,    0,  727,    0,    0,    0,    0,
  727,  726,  727,  727,  727,  727,  727,  727,  727,  727,
  727,  727,  727,    0,    0,  728,    0,  726,    0,    0,
    0,    0,  727,  727,  728,    0,    0,    0,  727,    0,
  727,    0,  727,    0,  727,  727,  727,    0,    0,    0,
    0,    0,  727,  727,  727,  727,    0,    0,    0,  727,
  727,    0,    0,    0,    0,    0,  727,  727,  727,  727,
  727,  727,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  727,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  729,    0,  727,
    0,    0,    0,    0,    0,    0,  729,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  728,    0,    0,
    0,    0,  728,    0,  728,  728,  728,  728,  728,  728,
  728,  728,  728,  728,  728,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  728,  728,    0,    0,    0,    0,
  728,    0,  728,    0,  728,    0,  728,  728,  728,    0,
    0,    0,    0,    0,  728,  728,  728,  728,    0,    0,
    0,  728,  728,    0,    0,    0,    0,    0,  728,  728,
  728,  728,  728,  728,    0,    0,    0,    0,    0,  729,
    0,    0,    0,    0,  729,  728,  729,  729,  729,  729,
  729,  729,  729,  729,  729,  729,  729,    0,    0,  735,
    0,  728,    0,    0,    0,    0,  729,  729,  735,    0,
    0,    0,  729,    0,  729,    0,  729,    0,  729,  729,
  729,    0,    0,    0,    0,    0,  729,  729,  729,  729,
    0,    0,    0,  729,  729,    0,    0,    0,    0,    0,
  729,  729,  729,  729,  729,  729,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  729,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  736,    0,  729,    0,    0,    0,    0,    0,    0,
  736,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  735,    0,    0,    0,    0,  735,    0,  735,  735,
  735,  735,  735,  735,  735,  735,  735,  735,  735,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  735,  735,
    0,    0,    0,    0,  735,    0,  735,    0,  735,    0,
  735,  735,  735,    0,    0,    0,    0,    0,    0,    0,
  735,  735,    0,  740,    0,  735,  735,    0,    0,    0,
    0,    0,  740,    0,  735,  735,  735,  735,    0,    0,
    0,    0,    0,  736,    0,    0,    0,    0,  736,  735,
  736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
  736,    0,    0,    0,    0,  735,    0,    0,    0,    0,
  736,  736,    0,    0,    0,    0,  736,    0,  736,    0,
  736,    0,  736,  736,  736,    0,    0,    0,    0,    0,
    0,    0,  736,  736,    0,  742,    0,  736,  736,    0,
    0,    0,    0,    0,  742,    0,  736,  736,  736,  736,
    0,    0,    0,    0,    0,  740,    0,    0,    0,    0,
  740,  736,  740,  740,  740,  740,  740,  740,  740,  740,
  740,  740,  740,    0,    0,    0,    0,  736,    0,    0,
    0,    0,  740,  740,    0,    0,    0,    0,  740,    0,
  740,    0,  740,    0,  740,  740,  740,    0,    0,    0,
    0,    0,    0,    0,  740,  740,    0,  743,    0,  740,
  740,    0,    0,    0,    0,    0,  743,    0,    0,    0,
  740,  740,    0,    0,    0,    0,    0,  742,    0,    0,
    0,    0,  742,  740,  742,  742,  742,  742,  742,  742,
  742,  742,  742,  742,  742,    0,    0,    0,    0,  740,
    0,    0,    0,    0,  742,  742,    0,    0,    0,    0,
  742,    0,  742,    0,  742,    0,  742,  742,  742,    0,
    0,    0,    0,    0,    0,    0,    0,  742,    0,  745,
    0,  742,  742,    0,    0,    0,    0,    0,  745,    0,
    0,    0,  742,  742,    0,    0,    0,    0,    0,  743,
    0,    0,    0,    0,  743,  742,  743,  743,  743,  743,
  743,  743,  743,  743,  743,  743,  743,    0,    0,    0,
    0,  742,    0,    0,    0,    0,  743,  743,    0,    0,
    0,    0,  743,    0,  743,    0,  743,    0,  743,  743,
  743,    0,    0,    0,    0,    0,    0,    0,    0,  743,
    0,  746,    0,  743,  743,    0,    0,    0,    0,    0,
  746,    0,    0,    0,  743,  743,    0,    0,    0,    0,
    0,  745,    0,    0,    0,    0,  745,  743,  745,  745,
  745,  745,  745,  745,  745,  745,  745,  745,  745,    0,
    0,    0,    0,  743,    0,    0,    0,    0,  745,  745,
    0,    0,    0,    0,  745,    0,  745,    0,  745,    0,
  745,  745,  745,    0,    0,    0,    0,    0,    0,    0,
    0,  745,    0,  748,    0,    0,  745,    0,    0,    0,
    0,    0,  748,    0,    0,    0,  745,  745,    0,    0,
    0,    0,    0,  746,    0,    0,    0,    0,  746,  745,
  746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
  746,    0,    0,    0,    0,  745,    0,    0,    0,    0,
  746,  746,    0,    0,    0,    0,  746,    0,  746,    0,
  746,    0,  746,  746,  746,    0,    0,    0,    0,    0,
    0,    0,    0,  746,    0,  749,    0,    0,  746,    0,
    0,    0,    0,    0,  749,    0,    0,    0,  746,  746,
    0,    0,    0,    0,    0,  748,    0,    0,    0,    0,
  748,  746,  748,  748,  748,  748,  748,  748,  748,  748,
  748,  748,  748,    0,    0,    0,    0,  746,    0,    0,
    0,    0,  748,  748,    0,    0,    0,    0,  748,    0,
  748,    0,  748,    0,  748,  748,  748,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  748,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  748,  748,    0,    0,    0,    0,    0,  749,    0,    0,
    0,    0,  749,  748,  749,  749,  749,  749,  749,  749,
  749,  749,  749,  749,  749,    0,    0,    0,    0,  748,
    0,    0,    0,    0,  749,  749,    0,    0,    0,    0,
  749,    0,  749,    0,  749,    0,  749,  749,  749,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  749,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  749,  749,    0,    0,  653,    0,    0,    0,
    0,    0,   57,   58,    0,  749,   59,   60,   61,    0,
    0,    0,    0,   62,   24,   63,   25, 1272,    0,   26,
   64,  749,   65,   66,   27,   67,   68,   69,   28,    0,
    0,    0,    0,    0,   70,    0,   71,   30,   72,   73,
   74,   75,    0,    0,   32,    0,    0,    0,   76,   33,
    0,   77,   78,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   79,    0,   36,    0,   37,   80,    0,
    0,   38,    0,   81,   82,   83,   84,   85,   86,   39,
   40,   87,   88,   41,   89,    0,   90,    0,    0,   91,
   92,    0,    0,   93,   94,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   95,   96,
   97,   98,   99,    0,    0,  100,  101,    0,    0,    0,
  102,    0,    0,    0,  103,    0,    0,    0,    0,  104,
  105,  106,  107,  108,    0,    0,    0,  109,    0,  110,
    0,    0,    0,    0,    0,  111,  112,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  113,  114,  115,  116,   56, 1273,    0,    0,    0,    0,
   57,   58,    0,    0,   59,   60,   61,    0,    0,    0,
    0,   62,   24,   63,   25,    0,    0,   26,   64,    0,
   65,   66,   27,   67,   68,   69,   28,    0,    0,    0,
    0,    0,   70,    0,   71,   30,   72,   73,   74,   75,
    0,    0,   32,    0,    0,    0,   76,   33,    0,   77,
   78,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   79,    0,   36,    0,   37,   80,    0,    0,   38,
    0,   81,   82,   83,   84,   85,   86,   39,   40,   87,
   88,   41,   89,    0,   90,    0,    0,   91,   92,    0,
    0,   93,   94,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   95,   96,   97,   98,
   99,    0,    0,  100,  101,    0,    0,    0,  102,    0,
    0,    0,  103,    0,    0,    0,    0,  104,  105,  106,
  107,  108,    0,    0,    0,  109,    0,  110,    0,    0,
    0,    0,    0,  111,  112,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  302,    0,    0,    0,    0,
    0,   57,   58,    0,    0,   59,   60,   61,  113,  114,
  115,  116,   62,   24,   63,   25,    0,    0,   26,   64,
    0,   65,   66,   27,   67,   68,   69,   28,    0,    0,
    0,    0,    0,   70,    0,   71,   30,   72,   73,   74,
   75,    0,    0,   32,    0,    0,    0,   76,   33,    0,
   77,   78,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   79,    0,   36,    0,   37,   80,    0,    0,
   38,    0,   81,   82,   83,   84,   85,   86,   39,   40,
   87,   88,   41,   89,    0,   90,    0,    0,   91,   92,
    0,    0,   93,   94,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   95,   96,   97,
   98,   99,    0,    0,  100,  101,    0,    0,    0,  102,
    0,    0,    0,  103,    0,    0,    0,    0,  104,  105,
  106,  107,  108,    0,    0,    0,  109,    0,  110,    0,
    0,    0,    0,    0,  111,  112,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  653,    0,    0,    0,
    0,    0,   57,   58,    0,    0,   59,   60,   61,  113,
  114,  115,  116,   62,   24,   63,   25,    0,    0,   26,
   64,    0,   65,   66,   27,   67,   68,   69,   28,    0,
    0,    0,    0,    0,   70,    0,   71,   30,   72,   73,
   74,   75,    0,    0,   32,    0,    0,    0,   76,   33,
    0,   77,   78,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   79,    0,   36,    0,   37,   80,    0,
    0,   38,    0,   81,   82,   83,   84,   85,   86,   39,
   40,   87,   88,   41,   89,    0,   90,    0,    0,   91,
   92,    0,    0,   93,   94,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   95,   96,
   97,   98,   99,    0,    0,  100,  101,    0,    0,    0,
  102,    0,    0,    0,  103,    0,    0,    0,    0,  104,
  105,  106,  107,  108,    0,    0,    0,  109,    0,  110,
    0,    0,    0,    0,    0,  111,  112,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1152,    0,    0,
    0,    0,    0, 1152, 1152,    0,    0, 1152, 1152, 1152,
  113,  114,  115,  116, 1152, 1152, 1152, 1152,    0,    0,
 1152, 1152,    0, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
    0,    0,    0,    0,    0, 1152,    0, 1152, 1152, 1152,
 1152, 1152, 1152,    0,    0, 1152,    0,    0,    0, 1152,
 1152,    0, 1152, 1152, 1152,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1152,    0, 1152,    0, 1152, 1152,
    0,    0, 1152,    0, 1152, 1152, 1152, 1152, 1152, 1152,
 1152, 1152, 1152, 1152, 1152, 1152,    0, 1152,    0,    0,
 1152, 1152,    0,    0, 1152, 1152,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1152,
 1152, 1152, 1152, 1152,    0,    0, 1152, 1152,    0,    0,
    0, 1152,    0,    0,    0, 1152,    0,    0,    0,    0,
 1152, 1152, 1152, 1152, 1152,    0,    0,  696, 1152,    0,
 1152,    0,    0,    0,    0,    0, 1152, 1152,    0,    0,
    0,    0,    0,    0,   62,   24,    0,   25,    0,    0,
   26,  263,    0,    0,    0,   27,   67,   68,    0,   28,
    0, 1152, 1152, 1152, 1152,   70,    0,    0,   30,    0,
    0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
   33,    0,   77,   78,   34,    0,  264,    0,    0,    0,
    0,    0,    0,  265,    0,    0,   36,    0,   37,   80,
    0,    0,   38,    0,    0,   82,    0,   84,    0,   86,
   39,   40,  266,    0,   41,    0,    0,    0,    0,    0,
    0,  267,    0,    0,   93,   94,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   95,
   96,   97,   98,   99,    0,    0,  100,  101,    0,    0,
    0,    0,    0,    0,    0,  103,    0,    0,  268,    0,
    0,  105,  106,  107,  108,    0,    0,  822,  109,    0,
  110,    0,    0,    0,    0,    0,  111,  112,    0,    0,
    0,    0,    0,    0,   62,   24,    0,   25,    0,    0,
   26,  263,    0,    0,    0,   27,   67,   68,    0,   28,
    0,  113,  114,  115,  116,   70,    0,    0,   30,    0,
    0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
   33,    0,   77,   78,   34,    0,  264,    0,    0,    0,
    0,    0,    0,  265,    0,    0,   36,    0,   37,   80,
    0,    0,   38,    0,    0,   82,    0,   84,    0,   86,
   39,   40,  266,    0,   41,    0,    0,    0,    0,    0,
    0,  267,    0,    0,   93,   94,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   95,
   96,   97,   98,   99,    0,    0,  100,  101,    0,    0,
    0,    0,    0,    0,    0,  103,    0,    0,    0,    0,
    0,  105,  106,  107,  108,    0,    0,  887,  109,    0,
  110,    0,    0,    0,    0,    0,  111,  112,    0,    0,
    0,    0,    0,    0,   62,   24,    0,   25,    0,    0,
   26,  263,    0,    0,    0,   27,   67,   68,    0,   28,
    0,  113,  114,  115,  116,   70,    0,    0,   30,    0,
    0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
   33,    0,   77,   78,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   80,
    0,    0,   38,    0,    0,   82,    0,   84,    0,   86,
   39,   40,  266,    0,   41,    0,    0,    0,    0,    0,
    0,   92,    0,    0,   93,   94,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   95,
   96,   97,   98,  343,    0,    0,  100,  101,    0,    0,
    0,  602,  888,    0,    0,  103,    0,    0,    0,    0,
    0,  105,  106,  107,  108,    0,    0,  887,  109,    0,
  110,    0,    0,    0,    0,    0,  111,  112,    0,    0,
    0,    0,    0,    0,   62,   24,    0,   25,    0,    0,
   26,  263,    0,    0,    0,   27,   67,   68,    0,   28,
    0,  113,  344,  115,  116,   70,    0,    0,   30,    0,
    0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
   33,    0,   77,   78,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   80,
 1088,    0,   38,    0,    0,   82,    0,   84,    0,   86,
   39,   40,  266,    0,   41,    0,    0,    0,    0,    0,
    0,   92,    0,    0,   93,   94,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   95,
   96,   97,   98,  343,    0,    0,  100,  101,    0,    0,
    0,  602,    0,    0,    0,  103,    0,    0,    0,    0,
    0,  105,  106,  107,  108,    0,    0,  849,  109,    0,
  110,    0,    0,    0,    0,    0,  111,  112,    0,    0,
    0,    0,    0,    0,   62,   24,    0,   25,    0,    0,
   26,  263,    0,    0,    0,   27,   67,   68,    0,   28,
    0,  113,  344,  115,  116,   70,    0,    0,   30,    0,
    0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
   33,    0,   77,   78,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   80,
    0,    0,   38,    0,    0,   82,    0,   84,    0,   86,
   39,   40,  266,    0,   41,    0,    0,   90,    0,    0,
    0,   92,    0,    0,   93,   94,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   95,
   96,   97,   98,  343,    0,    0,  100,  101,    0,    0,
    0,    0,    0,    0,    0,  103,    0,    0,    0,    0,
    0,  105,  106,  107,  108,    0,    0,  887,  109,    0,
  110,    0,    0,    0,    0,    0,  111,  112,    0,    0,
    0,    0,    0,    0,   62,   24,    0,   25,    0,    0,
   26,  263,    0,    0,    0,   27,   67,   68,    0,   28,
    0,  113,  344,  115,  116,   70,    0,    0,   30,    0,
    0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
   33,    0,   77,   78,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   80,
    0,    0,   38,    0,    0,   82,    0,   84,    0,   86,
   39,   40,  266,    0,   41,    0,    0,    0,    0,    0,
    0,   92,    0,    0,   93,   94,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   95,
   96,   97,   98,  343,    0,    0,  100,  101,    0,    0,
    0,  602,    0,    0,    0,  103,    0,    0,    0,    0,
    0,  105,  106,  107,  108,    0,    0,  383,  109,    0,
  110,    0,    0,    0,    0,    0,  111,  112,    0,    0,
    0,    0,  384,    0,   62,   24,    0,   25,    0,    0,
   26,  263,    0,    0,    0,   27,   67,   68,    0,   28,
    0,  113,  344,  115,  116,   70,    0,    0,   30,    0,
    0,    0,    0,    0,    0,   32,    0,    0,  385,    0,
   33,    0,   77,   78,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   80,
    0,    0,   38,    0,    0,   82,    0,   84,    0,   86,
   39,   40,  266,    0,   41,    0,    0,    0,    0,    0,
    0,    0,    0,  386,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   95,
   96,   97,  291,  387,    0,    0,  100,  101,    0,    0,
    0,    0,    0,    0,    0,  103,    0,  388,    0,    0,
    0,  105,  106,  107,  108, 1045,    0,  879,  109,    0,
  110,    0,    0,    0,    0,    0,  111,  112,    0,    0,
    0,    0,    0,    0,   62,   24,    0,   25,    0,    0,
   26,  263,    0,    0,    0,   27,   67,   68,    0,   28,
    0,  113,  293,    0,  116,   70,    0,    0,   30,    0,
    0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
   33,    0,   77,   78,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   80,
    0,    0,   38,    0,    0,   82,    0,   84,    0,   86,
   39,   40,  266,    0,   41,    0,    0,    0,    0,    0,
    0,   92,    0,    0,   93,   94,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   95,
   96,   97,   98,  343,    0,    0,  100,  101,    0,    0,
    0,    0, 1046,    0,    0,  103,    0,    0,    0,    0,
    0,  105,  106,  107,  108,    0,    0, 1106,  109,    0,
  110,    0,    0,    0,    0,    0,  111,  112,    0,    0,
    0,    0,    0,    0,   62,   24,    0,   25,    0,    0,
   26,  263,    0,    0,    0,   27,   67,   68,    0,   28,
    0,  113,  344,  115,  116,   70,    0,    0,   30,    0,
    0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
   33,    0,   77,   78,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   80,
    0,    0,   38,    0,    0,   82,    0,   84,    0,   86,
   39,   40,  266,    0,   41,    0,    0,    0,    0,    0,
    0,   92,    0,    0,   93,   94,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   95,
   96,   97,   98,  343,    0,    0,  100,  101,    0,    0,
    0,    0, 1107,    0,    0,  103,    0,    0,    0,    0,
    0,  105,  106,  107,  108,    0,    0,  342,  109,    0,
  110,    0,    0,    0,    0,    0,  111,  112,    0,    0,
    0,    0,    0,    0,   62,   24,    0,   25,    0,    0,
   26,  263,    0,    0,    0,   27,   67,   68,    0,   28,
    0,  113,  344,  115,  116,   70,    0,    0,   30,    0,
    0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
   33,    0,   77,   78,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   80,
    0,    0,   38,    0,    0,   82,    0,   84,    0,   86,
   39,   40,  266,    0,   41,    0,    0,    0,    0,    0,
    0,   92,    0,    0,   93,   94,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   95,
   96,   97,   98,  343,    0,    0,  100,  101,    0,    0,
    0,    0,    0,    0,    0,  103,    0,    0,    0,    0,
    0,  105,  106,  107,  108,    0,    0,  349,  109,    0,
  110,    0,    0,    0,    0,    0,  111,  112,    0,    0,
    0,    0,    0,    0,   62,   24,    0,   25,    0,    0,
   26,  263,    0,    0,    0,   27,   67,   68,    0,   28,
    0,  113,  344,  115,  116,   70,    0,    0,   30,    0,
    0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
   33,    0,   77,   78,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   80,
    0,    0,   38,    0,    0,   82,    0,   84,    0,   86,
   39,   40,  266,    0,   41,    0,    0,    0,    0,    0,
    0,   92,    0,    0,   93,   94,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   95,
   96,   97,   98,  343,    0,    0,  100,  101,    0,    0,
    0,    0,    0,    0,    0,  103,    0,    0,    0,    0,
    0,  105,  106,  107,  108,    0,    0,  383,  109,    0,
  110,    0,    0,    0,    0,    0,  111,  112,    0,    0,
    0,    0,  384,    0,   62,   24,    0,   25,    0,    0,
   26,  263,    0,    0,    0,   27,   67,   68,    0,   28,
    0,  113,  344,  115,  116,   70,    0,    0,   30,    0,
    0,    0,    0,    0,    0,   32,    0,    0,  385,    0,
   33,    0,   77,   78,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   80,
    0,    0,   38,    0,    0,   82,    0,   84,    0,   86,
   39,   40,  266,    0,   41,    0,    0,    0,    0,    0,
    0,    0,    0,  386,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   95,
   96,   97,  291,  387,    0,    0,  100,  101,    0,    0,
    0,    0,    0,    0,    0,  103,    0,  388,    0,    0,
    0,  105,  106,  107,  108,  694,    0,    0,  109,    0,
  110,    0,    0,    0,    0,    0,  111,  112,    0,    0,
    0,    0,   62,   24,    0,   25,    0,    0,   26,  263,
    0,    0,    0,   27,   67,   68,    0,   28,    0,    0,
    0,  113,  293,   70,  116,    0,   30,    0,    0,    0,
    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,
   77,   78,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   80,    0,    0,
   38,    0,    0,   82,    0,   84,    0,   86,   39,   40,
  266,    0,   41,    0,    0,    0,    0,    0,    0,   92,
    0,    0,   93,   94,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   95,   96,   97,
   98,   99,    0,    0,  100,  101,    0,    0,    0,    0,
    0,    0,    0,  103,    0,    0,    0,    0,    0,  105,
  106,  107,  108,    0,    0,  879,  109,    0,  110,    0,
    0,    0,    0,    0,  111,  112,    0,    0,    0,    0,
    0,    0,   62,   24,    0,   25,    0,    0,   26,  263,
    0,    0,    0,   27,   67,   68,    0,   28,    0,  113,
  114,  115,  116,   70,    0,    0,   30,    0,    0,    0,
    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,
   77,   78,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   80,    0,    0,
   38,    0,    0,   82,    0,   84,    0,   86,   39,   40,
  266,    0,   41,    0,    0,    0,    0,    0,    0,   92,
    0,    0,   93,   94,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   95,   96,   97,
   98,  343,    0,    0,  100,  101,    0,    0,    0,    0,
    0,    0,    0,  103,    0,    0,    0,    0,    0,  105,
  106,  107,  108,    0,    0, 1227,  109,    0,  110,    0,
    0,    0,    0,    0,  111,  112,    0,    0,    0,    0,
    0,    0,   62,   24,    0,   25,    0,    0,   26,  263,
    0,    0,    0,   27,   67,   68,    0,   28,    0,  113,
  344,  115,  116,   70,    0,    0,   30,    0,    0,    0,
    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,
   77,   78,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   80,    0,    0,
   38,    0,    0,   82,    0,   84,    0,   86,   39,   40,
  266,    0,   41,    0,    0,    0,    0,    0,    0,   92,
    0,    0,   93,   94,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   95,   96,   97,
   98,   99,    0,    0,  100,  101,    0,    0,    0,    0,
    0,    0,    0,  103,    0,    0,    0,    0,    0,  105,
  106,  107,  108,    0,    0,  144,  109,    0,  110,    0,
    0,    0,    0,    0,  111,  112,    0,    0,    0,    0,
    0,    0,  144,  144,    0,  144,    0,    0,  144,  144,
    0,    0,    0,  144,  144,  144,    0,  144,    0,  113,
 1228,  115,  116,  144,    0,    0,  144,    0,    0,    0,
    0,    0,    0,  144,    0,    0,    0,    0,  144,    0,
  144,  144,  144,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  144,    0,  144,  144,    0,    0,
  144,    0,    0,  144,    0,  144,    0,  144,  144,  144,
  144,    0,  144,    0,    0,    0,    0,    0,    0,  144,
    0,    0,  144,  144,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  144,  144,  144,
  144,  144,    0,    0,  144,  144,    0,    0,    0,    0,
    0,    0,    0,  144,    0,    0,    0,    0,    0,  144,
  144,  144,  144,    0,    0,  383,  144,    0,  144,    0,
    0,    0,    0,    0,  144,  144,    0,    0,    0,    0,
  384,    0,   62,   24,    0,   25,    0,    0,   26,  263,
    0,    0,    0,   27,   67,   68,    0,   28,    0,  144,
  144,  144,  144,   70,    0,    0,   30,    0,    0,    0,
    0,    0,    0,   32,    0,    0,  385,    0,   33,    0,
   77,   78,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   80,    0,    0,
   38,    0,    0,   82,    0,   84,    0,   86,   39,   40,
  266,    0,   41,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   95,   96,   97,
  291,  387,    0,    0,  100,  101,    0,    0,    0,    0,
    0,    0,    0,  103,    0,  388,  215,    0,    0,  105,
  106,  107,  108,  383,    0,    0,  109,    0,  110,  216,
    0,    0,    0,    0,  111,  112,    0,    0,    0,    0,
   62,   24,    0,   25,    0,    0,   26,  263,    0,    0,
    0,   27,   67,   68,    0,   28,    0,    0,  217,  113,
  293,   70,  116,    0,   30,    0,    0,    0,    0,    0,
    0,   32,    0,    0,    0,    0,   33,    0,   77,   78,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,   80,    0,    0,   38,    0,
    0,   82,    0,   84,    0,   86,   39,   40,  266,    0,
   41,    0,  218,  219,  220,  221,    0,  222,  223,  224,
  225,  226,  227,  228,  229,    0,    0,  230,  231,  232,
  233,  234,  235,  236,  237,   95,   96,   97,  291,  387,
    0,    0,  100,  101,    0,    0,    0,    0,    0,    0,
    0,  103,    0,  388,    0,    0,    0,  105,  106,  107,
  108,  395,    0,    0,  109,    0,  110,    0,    0,    0,
    0,    0,  111,  112,    0,    0,    0,    0,   62,   24,
    0,   25,    0,    0,   26,  263,    0,    0,    0,   27,
   67,   68,    0,   28,    0,    0,    0,  113,  293,   70,
  116,    0,   30,    0,    0,    0,    0,    0,    0,   32,
    0,    0,    0,    0,   33,    0,   77,   78,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   36,    0,   37,   80,    0,    0,   38,    0,    0,   82,
    0,   84,    0,   86,   39,   40,  266,    0,   41,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   95,   96,   97,  291,  387,    0,    0,
  100,  101,    0,    0,    0,    0,    0,    0,    0,  103,
    0,    0,    0,    0,    0,  105,  106,  107,  108,  397,
    0,    0,  109,    0,  110,    0,    0,    0,    0,    0,
  111,  112,    0,    0,    0,    0,   62,   24,    0,   25,
    0,    0,   26,  263,    0,    0,    0,   27,   67,   68,
    0,   28,    0,    0,    0,  113,  293,   70,  116,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   77,   78,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   80,    0,    0,   38,    0,    0,   82,    0,   84,
    0,   86,   39,   40,  266,    0,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   95,   96,   97,  291,  387,    0,    0,  100,  101,
    0,    0,    0,    0,    0,    0,    0,  103,    0,    0,
    0,    0,    0,  105,  106,  107,  108,  399,    0,    0,
  109,    0,  110,    0,    0,    0,    0,    0,  111,  112,
    0,    0,    0,    0,   62,   24,    0,   25,    0,    0,
   26,  263,    0,    0,    0,   27,   67,   68,    0,   28,
    0,    0,    0,  113,  293,   70,  116,    0,   30,    0,
    0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
   33,    0,   77,   78,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   80,
    0,    0,   38,    0,    0,   82,    0,   84,    0,   86,
   39,   40,  266,    0,   41,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   95,
   96,   97,  291,  387,    0,    0,  100,  101,    0,    0,
    0,    0,    0,    0,    0,  103,    0,    0,    0,    0,
    0,  105,  106,  107,  108,  401,    0,    0,  109,    0,
  110,    0,    0,    0,    0,    0,  111,  112,    0,    0,
    0,    0,   62,   24,    0,   25,    0,    0,   26,  263,
    0,    0,    0,   27,   67,   68,    0,   28,    0,    0,
    0,  113,  293,   70,  116,    0,   30,    0,    0,    0,
    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,
   77,   78,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   80,    0,    0,
   38,    0,    0,   82,    0,   84,    0,   86,   39,   40,
  266,    0,   41,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   95,   96,   97,
  291,  387,    0,    0,  100,  101,    0,    0,    0,    0,
    0,    0,    0,  103,    0,    0,    0,    0,    0,  105,
  106,  107,  108,  403,    0,    0,  109,    0,  110,    0,
    0,    0,    0,    0,  111,  112,    0,    0,    0,    0,
   62,   24,    0,   25,    0,    0,   26,  263,    0,    0,
    0,   27,   67,   68,    0,   28,    0,    0,    0,  113,
  293,   70,  116,    0,   30,    0,    0,    0,    0,    0,
    0,   32,    0,    0,    0,    0,   33,    0,   77,   78,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,   80,    0,    0,   38,    0,
    0,   82,    0,   84,    0,   86,   39,   40,  266,    0,
   41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   95,   96,   97,  291,  387,
    0,    0,  100,  101,    0,    0,    0,    0,    0,    0,
    0,  103,    0,    0,    0,    0,    0,  105,  106,  107,
  108,  405,    0,    0,  109,    0,  110,    0,    0,    0,
    0,    0,  111,  112,    0,    0,    0,    0,   62,   24,
    0,   25,    0,    0,   26,  263,    0,    0,    0,   27,
   67,   68,    0,   28,    0,    0,    0,  113,  293,   70,
  116,    0,   30,    0,    0,    0,    0,    0,    0,   32,
    0,    0,    0,    0,   33,    0,   77,   78,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   36,    0,   37,   80,    0,    0,   38,    0,    0,   82,
    0,   84,    0,   86,   39,   40,  266,    0,   41,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   95,   96,   97,  291,  387,    0,    0,
  100,  101,    0,    0,    0,    0,    0,    0,    0,  103,
    0,    0,    0,    0,    0,  105,  106,  107,  108,  407,
    0,    0,  109,    0,  110,    0,    0,    0,    0,    0,
  111,  112,    0,    0,    0,    0,   62,   24,    0,   25,
    0,    0,   26,  263,    0,    0,    0,   27,   67,   68,
    0,   28,    0,    0,    0,  113,  293,   70,  116,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   77,   78,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   80,    0,    0,   38,    0,    0,   82,    0,   84,
    0,   86,   39,   40,  266,    0,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   95,   96,   97,  291,  387,    0,    0,  100,  101,
    0,    0,    0,    0,    0,    0,    0,  103,    0,    0,
    0,    0,    0,  105,  106,  107,  108,  409,    0,    0,
  109,    0,  110,    0,    0,    0,    0,    0,  111,  112,
    0,    0,    0,    0,   62,   24,    0,   25,    0,    0,
   26,  263,    0,    0,    0,   27,   67,   68,    0,   28,
    0,    0,    0,  113,  293,   70,  116,    0,   30,    0,
    0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
   33,    0,   77,   78,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   80,
    0,    0,   38,    0,    0,   82,    0,   84,    0,   86,
   39,   40,  266,    0,   41,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   95,
   96,   97,  291,  387,    0,    0,  100,  101,    0,    0,
    0,    0,    0,    0,    0,  103,    0,    0,    0,    0,
    0,  105,  106,  107,  108,  711,    0,    0,  109,    0,
  110,    0,    0,    0,    0,    0,  111,  112,    0,    0,
    0,    0,   62,   24,    0,   25,    0,    0,   26,  263,
    0,    0,    0,   27,   67,   68,    0,   28,    0,    0,
    0,  113,  293,   70,  116,    0,   30,    0,    0,    0,
    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,
   77,   78,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   80,    0,    0,
   38,    0,    0,   82,    0,   84,    0,   86,   39,   40,
  266,    0,   41,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   95,   96,   97,
  291,  387,    0,    0,  100,  101,    0,    0,    0,    0,
    0,    0,    0,  103,    0,    0,    0,    0,    0,  105,
  106,  107,  108,  713,    0,    0,  109,    0,  110,    0,
    0,    0,    0,    0,  111,  112,    0,    0,    0,    0,
   62,   24,    0,   25,    0,    0,   26,  263,    0,    0,
    0,   27,   67,   68,    0,   28,    0,    0,    0,  113,
  293,   70,  116,    0,   30,    0,    0,    0,    0,    0,
    0,   32,    0,    0,    0,    0,   33,    0,   77,   78,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,   80,    0,    0,   38,    0,
    0,   82,    0,   84,    0,   86,   39,   40,  266,    0,
   41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   95,   96,   97,  291,  387,
    0,    0,  100,  101,    0,    0,    0,    0,    0,    0,
    0,  103,    0,    0,    0,    0,    0,  105,  106,  107,
  108,  715,    0,    0,  109,    0,  110,    0,    0,    0,
    0,    0,  111,  112,    0,    0,    0,    0,   62,   24,
    0,   25,    0,    0,   26,  263,    0,    0,    0,   27,
   67,   68,    0,   28,    0,    0,    0,  113,  293,   70,
  116,    0,   30,    0,    0,    0,    0,    0,    0,   32,
    0,    0,    0,    0,   33,    0,   77,   78,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   36,    0,   37,   80,    0,    0,   38,    0,    0,   82,
    0,   84,    0,   86,   39,   40,  266,    0,   41,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   95,   96,   97,  291,  387,    0,    0,
  100,  101,    0,    0,    0,    0,    0,    0,    0,  103,
    0,    0,    0,    0,    0,  105,  106,  107,  108,  733,
    0,    0,  109,    0,  110,    0,    0,    0,    0,    0,
  111,  112,    0,    0,    0,    0,   62,   24,    0,   25,
    0,    0,   26,  263,    0,    0,    0,   27,   67,   68,
    0,   28,    0,    0,    0,  113,  293,   70,  116,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   77,   78,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   80,    0,    0,   38,    0,    0,   82,    0,   84,
    0,   86,   39,   40,  266,    0,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   95,   96,   97,  291,  387,    0,    0,  100,  101,
    0,    0,    0,    0,    0,    0,    0,  103,    0,    0,
    0,    0,    0,  105,  106,  107,  108,  735,    0,    0,
  109,    0,  110,    0,    0,    0,    0,    0,  111,  112,
    0,    0,    0,    0,   62,   24,    0,   25,    0,    0,
   26,  263,    0,    0,    0,   27,   67,   68,    0,   28,
    0,    0,    0,  113,  293,   70,  116,    0,   30,    0,
    0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
   33,    0,   77,   78,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   80,
    0,    0,   38,    0,    0,   82,    0,   84,    0,   86,
   39,   40,  266,    0,   41,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   95,
   96,   97,  291,  387,    0,    0,  100,  101,    0,    0,
    0,    0,    0,    0,    0,  103,    0,    0,    0,    0,
    0,  105,  106,  107,  108,  737,    0,    0,  109,    0,
  110,    0,    0,    0,    0,    0,  111,  112,    0,    0,
    0,    0,   62,   24,    0,   25,    0,    0,   26,  263,
    0,    0,    0,   27,   67,   68,    0,   28,    0,    0,
    0,  113,  293,   70,  116,    0,   30,    0,    0,    0,
    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,
   77,   78,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   80,    0,    0,
   38,    0,    0,   82,    0,   84,    0,   86,   39,   40,
  266,    0,   41,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   95,   96,   97,
  291,  738,    0,    0,  100,  101,    0,    0,    0,    0,
    0,    0,    0,  103,    0,    0,    0,    0,    0,  105,
  106,  107,  108,  740,    0,    0,  109,    0,  110,    0,
    0,    0,    0,    0,  111,  112,    0,    0,    0,    0,
   62,   24,    0,   25,    0,    0,   26,  263,    0,    0,
    0,   27,   67,   68,    0,   28,    0,    0,    0,  113,
  293,   70,  116,    0,   30,    0,    0,    0,    0,    0,
    0,   32,    0,    0,    0,    0,   33,    0,   77,   78,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,   80,    0,    0,   38,    0,
    0,   82,    0,   84,    0,   86,   39,   40,  266,    0,
   41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   95,   96,   97,  291,  738,
    0,    0,  100,  101,    0,    0,    0,    0,    0,    0,
    0,  103,    0,    0,    0,    0,    0,  105,  106,  107,
  108,  742,    0,    0,  109,    0,  110,    0,    0,    0,
    0,    0,  111,  112,    0,    0,    0,    0,   62,   24,
    0,   25,    0,    0,   26,  263,    0,    0,    0,   27,
   67,   68,    0,   28,    0,    0,    0,  113,  293,   70,
  116,    0,   30,    0,    0,    0,    0,    0,    0,   32,
    0,    0,    0,    0,   33,    0,   77,   78,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   36,    0,   37,   80,    0,    0,   38,    0,    0,   82,
    0,   84,    0,   86,   39,   40,  266,    0,   41,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   95,   96,   97,  291,  738,    0,    0,
  100,  101,    0,    0,    0,    0,    0,    0,    0,  103,
    0,    0,    0,    0,    0,  105,  106,  107,  108,  744,
    0,    0,  109,    0,  110,    0,    0,    0,    0,    0,
  111,  112,    0,    0,    0,    0,   62,   24,    0,   25,
    0,    0,   26,  263,    0,    0,    0,   27,   67,   68,
    0,   28,    0,    0,    0,  113,  293,   70,  116,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   77,   78,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   80,    0,    0,   38,    0,    0,   82,    0,   84,
    0,   86,   39,   40,  266,    0,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   95,   96,   97,  291,  738,    0,    0,  100,  101,
    0,    0,    0,    0,    0,    0,    0,  103,    0,    0,
    0,    0,    0,  105,  106,  107,  108,  746,    0,    0,
  109,    0,  110,    0,    0,    0,    0,    0,  111,  112,
    0,    0,    0,    0,   62,   24,    0,   25,    0,    0,
   26,  263,    0,    0,    0,   27,   67,   68,    0,   28,
    0,    0,    0,  113,  293,   70,  116,    0,   30,    0,
    0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
   33,    0,   77,   78,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   80,
    0,    0,   38,    0,    0,   82,    0,   84,    0,   86,
   39,   40,  266,    0,   41,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   95,
   96,   97,  291,  738,    0,    0,  100,  101,    0,    0,
    0,    0,    0,    0,    0,  103,    0,    0,    0,    0,
    0,  105,  106,  107,  108,  748,    0,    0,  109,    0,
  110,    0,    0,    0,    0,    0,  111,  112,    0,    0,
    0,    0,   62,   24,    0,   25,    0,    0,   26,  263,
    0,    0,    0,   27,   67,   68,    0,   28,    0,    0,
    0,  113,  293,   70,  116,    0,   30,    0,    0,    0,
    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,
   77,   78,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   80,    0,    0,
   38,    0,    0,   82,    0,   84,    0,   86,   39,   40,
  266,    0,   41,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   95,   96,   97,
  291,  738,    0,    0,  100,  101,    0,    0,    0,    0,
    0,    0,    0,  103,    0,    0,    0,    0,    0,  105,
  106,  107,  108,  750,    0,    0,  109,    0,  110,    0,
    0,    0,    0,    0,  111,  112,    0,    0,    0,    0,
   62,   24,    0,   25,    0,    0,   26,  263,    0,    0,
    0,   27,   67,   68,    0,   28,    0,    0,    0,  113,
  293,   70,  116,    0,   30,    0,    0,    0,    0,    0,
    0,   32,    0,    0,    0,    0,   33,    0,   77,   78,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,   80,    0,    0,   38,    0,
    0,   82,    0,   84,    0,   86,   39,   40,  266,    0,
   41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   95,   96,   97,  291,  738,
    0,    0,  100,  101,    0,    0,    0,    0,    0,    0,
    0,  103,    0,    0,    0,    0,    0,  105,  106,  107,
  108,  752,    0,    0,  109,    0,  110,    0,    0,    0,
    0,    0,  111,  112,    0,    0,    0,    0,   62,   24,
    0,   25,    0,    0,   26,  263,    0,    0,    0,   27,
   67,   68,    0,   28,    0,    0,    0,  113,  293,   70,
  116,    0,   30,    0,    0,    0,    0,    0,    0,   32,
    0,    0,    0,    0,   33,    0,   77,   78,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   36,    0,   37,   80,    0,    0,   38,    0,    0,   82,
    0,   84,    0,   86,   39,   40,  266,    0,   41,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   95,   96,   97,  291,  738,    0,    0,
  100,  101,    0,    0,    0,    0,    0,    0,    0,  103,
    0,    0,    0,    0,    0,  105,  106,  107,  108,  754,
    0,    0,  109,    0,  110,    0,    0,    0,    0,    0,
  111,  112,    0,    0,    0,    0,   62,   24,    0,   25,
    0,    0,   26,  263,    0,    0,    0,   27,   67,   68,
    0,   28,    0,    0,    0,  113,  293,   70,  116,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   77,   78,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   80,    0,    0,   38,    0,    0,   82,    0,   84,
    0,   86,   39,   40,  266,    0,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   95,   96,   97,  291,  738,    0,    0,  100,  101,
    0,    0,    0,    0,    0,    0,    0,  103,    0,    0,
    0,    0,    0,  105,  106,  107,  108,  756,    0,    0,
  109,    0,  110,    0,    0,    0,    0,    0,  111,  112,
    0,    0,    0,    0,   62,   24,    0,   25,    0,    0,
   26,  263,    0,    0,    0,   27,   67,   68,    0,   28,
    0,    0,    0,  113,  293,   70,  116,    0,   30,    0,
    0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
   33,    0,   77,   78,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   80,
    0,    0,   38,    0,    0,   82,    0,   84,    0,   86,
   39,   40,  266,    0,   41,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   95,
   96,   97,  291,  738,    0,    0,  100,  101,    0,    0,
    0,    0,    0,    0,    0,  103,    0,    0,    0,    0,
    0,  105,  106,  107,  108,  758,    0,    0,  109,    0,
  110,    0,    0,    0,    0,    0,  111,  112,    0,    0,
    0,    0,   62,   24,    0,   25,    0,    0,   26,  263,
    0,    0,    0,   27,   67,   68,    0,   28,    0,    0,
    0,  113,  293,   70,  116,    0,   30,    0,    0,    0,
    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,
   77,   78,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   80,    0,    0,
   38,    0,    0,   82,    0,   84,    0,   86,   39,   40,
  266,    0,   41,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   95,   96,   97,
  291,  738,    0,    0,  100,  101,    0,    0,    0,    0,
    0,    0,    0,  103,    0,    0,    0,    0,    0,  105,
  106,  107,  108,  760,    0,    0,  109,    0,  110,    0,
    0,    0,    0,    0,  111,  112,    0,    0,    0,    0,
   62,   24,    0,   25,    0,    0,   26,  263,    0,    0,
    0,   27,   67,   68,    0,   28,    0,    0,    0,  113,
  293,   70,  116,    0,   30,    0,    0,    0,    0,    0,
    0,   32,    0,    0,    0,    0,   33,    0,   77,   78,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,   80,    0,    0,   38,    0,
    0,   82,    0,   84,    0,   86,   39,   40,  266,    0,
   41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   95,   96,   97,  291,  738,
    0,    0,  100,  101,    0,    0,    0,    0,    0,    0,
    0,  103,    0,    0,    0,    0,    0,  105,  106,  107,
  108,  762,    0,    0,  109,    0,  110,    0,    0,    0,
    0,    0,  111,  112,    0,    0,    0,    0,   62,   24,
    0,   25,    0,    0,   26,  263,    0,    0,    0,   27,
   67,   68,    0,   28,    0,    0,    0,  113,  293,   70,
  116,    0,   30,    0,    0,    0,    0,    0,    0,   32,
    0,    0,    0,    0,   33,    0,   77,   78,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   36,    0,   37,   80,    0,    0,   38,    0,    0,   82,
    0,   84,    0,   86,   39,   40,  266,    0,   41,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   95,   96,   97,  291,  738,    0,    0,
  100,  101,    0,    0,    0,    0,    0,    0,    0,  103,
    0,    0,    0,    0,    0,  105,  106,  107,  108,  942,
    0,    0,  109,    0,  110,    0,    0,    0,    0,    0,
  111,  112,    0,    0,    0,    0,   62,   24,    0,   25,
    0,    0,   26,  263,    0,    0,    0,   27,   67,   68,
    0,   28,    0,    0,    0,  113,  293,   70,  116,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   77,   78,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   80,    0,    0,   38,    0,    0,   82,    0,   84,
    0,   86,   39,   40,  266,    0,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   95,   96,   97,  291,  387,    0,    0,  100,  101,
    0,    0,    0,    0,    0,    0,    0,  103,    0,    0,
    0,    0,    0,  105,  106,  107,  108,  719,    0,    0,
  109,    0,  110,    0,    0,    0,    0,    0,  111,  112,
    0,    0,    0,    0,   62,   24,    0,   25,    0,    0,
   26,  263,    0,    0,    0,   27,   67,   68,    0,   28,
    0,    0,    0,  113,  293,   70,  116,    0,   30,    0,
    0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
   33,    0,   77,   78,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   80,
    0,    0,   38,    0,    0,   82,    0,   84,    0,   86,
   39,   40,  266,    0,   41,    0,    0,   90,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   95,
   96,   97,  291,  292,    0,    0,  100,  101,    0,    0,
    0,    0,    0,    0,    0,  103,    0,    0,    0,    0,
    0,    0,  720,  721,    0,    0,    0,    0,    0,    0,
  722,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  271,    0,    0,    0,  271,  271,    0,    0,  271,    0,
    0,    0,    0,    0,  271,    0,    0,    0,  271,    0,
  271,  113,  293,  271,  723,  271,  271,    0,  271,    0,
  271,    0,  271,    0,  271,  271,  271,  271,    0,    0,
  271,  271,    0,    0,    0,    0,  271,  271,  271,  271,
  271,    0,    0,  271,    0,  271,    0,  271,    0,  271,
  271,    0,  271,  271,  271,  271,    0,    0,    0,  271,
  271,  271,    0,    0,  271,  271,  271,    0,    0,    0,
  581,    0,    0,  271,  271,    0,  271,  271,    0,  271,
  271,  271,    0,    0,    0,  271,    0,   62,   24,    0,
   25,    0,    0,   26,  263,    0,    0,    0,   27,   67,
   68,    0,   28,    0,    0,  271,    0,    0,   70,    0,
    0,   30,    0,    0,  271,  271,  271,    0,   32,    0,
    0,    0,    0,   33,  271,   77,   78,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,   37,   80,    0,    0,   38,    0,    0,   82,    0,
   84,    0,   86,   39,   40,  266,    0,   41,    0,    0,
    0,    0,    0,    0,    0,  271,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   95,   96,   97,  291,  582,    0,    0,  100,
  101,    0,    0,    0,    0,    0,    0,    0,  103,    0,
    0,    0,    0,    0,  112,  112,    0,    0,  112,    0,
    0,    0,    0,    0,  112,    0,  112,    0,  112,    0,
  112,    0,    0,  112,    0,  112,  112,    0,  112,    0,
  112,    0,  112,    0,  112,  112,  112,  112,    0,    0,
  112,  112,    0,    0,  113,  583,  112,  112,  112,  112,
  112,    0,    0,  112,    0,  112,    0,  112,    0,  112,
  112,    0,  112,  112,  112,  112,    0,    0,  112,  112,
  112,  112,    0,    0,  112,  112,  112,    0,    0,    0,
    0,    0,    0,  112,  112,    0,  112,  112,    0,  112,
  112,  112,    0,    0,    0,  112,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  111,  111,  112,    0,  111,    0,    0,
    0,  112,  112,  111,    0,    0,    0,  111,    0,  111,
    0,    0,  111,    0,  111,  111,    0,  111,    0,  111,
    0,  111,    0,  111,  111,  111,  111,    0,    0,  111,
  111,    0,    0,    0,    0,  111,  111,  111,  111,  111,
    0,    0,  111,    0,  111,    0,  111,    0,  111,  111,
    0,  111,  111,  111,  111,  112,    0,    0,  111,  111,
  111,    0,    0,  111,  111,  111,    0,    0,    0,    0,
    0,    0,  111,  111,    0,  111,  111,    0,  111,  111,
  111,    0,    0,    0,  111,    0,    0,    0,    0,  111,
  111,    0,    0,  111,    0,    0,    0,    0,    0,  111,
    0,    0,    0,  111,  111,  111,    0,    0,  111,    0,
  111,  111,    0,  111,   62,  111,    0,  111,    0,  111,
  111,  111,  111,  111,    0,  111,  111,    0,    0,    0,
    0,  111,  111,  111,  111,  111,    0,    0,  111,    0,
  111,    0,  111,    0,  111,  111,    0,  111,  111,  111,
  111,    0,    0,    0,  111,  111,  111,    0,    0,  111,
  111,  111,    0,    0,  111,    0,    0,    0,  111,  111,
    0,  111,  111,    0,  111,  111,  111,    0,    0,    0,
  111,    0,    0,    0,    0,  111,  111,    0,    0,  111,
    0,    0,    0,    0,    0,  111,    0,    0,    0,  111,
  111,  111,    0,    0,  111,    0,  111,  111,    0,  111,
  147,  111,    0,  111,    0,  111,  111,  111,  111,  111,
    0,  111,  111,    0,    0,    0,    0,  111,  111,  111,
  111,  111,    0,    0,  111,    0,  111,    0,  111,    0,
  111,  111,    0,  111,  111,  111,  111,    0,    0,    0,
  111,  111,  111,    0,    0,  111,  111,  111,    0,    0,
  111,    0,    0,    0,  111,  111,    0,  111,  111,    0,
  111,  111,  111,    0,    0,    0,  111,    0,    0,    0,
    0,  111,  111,    0,    0,  111,    0,    0,    0,    0,
    0,  111,    0,    0,    0,  111,  111,  111,    0,    0,
  111,    0,  111,  111,    0,  111,   63,  111,    0,  111,
    0,  111,  111,  111,  111,  111,    0,  111,  111,    0,
    0,    0,    0,  111,  111,  111,  111,  111,    0,    0,
  111,    0,  111,    0,  111,    0,  111,  111,    0,  111,
  111,  111,  111,    0,    0,    0,  111,  111,  111,    0,
    0,  111,  111,  111,    0,    0,  111,    0,    0,    0,
  111,  111,    0,  111,  111,    0,  111,  111,  111,    0,
    0,    0,  111,    0,    0,    0,    0,  112,  112,    0,
    0,  112,    0,    0,    0,    0,    0,  112,    0,    0,
    0,  112,  111,  112,    0,    0,  112,    0,  112,  112,
    0,  112,  148,  112,    0,  112,    0,  112,  112,  112,
  112,  111,    0,  112,  112,    0,    0,    0,    0,  112,
  112,  112,  112,  112,    0,    0,  112,    0,  112,    0,
  112,    0,  112,  112,    0,  112,  112,  112,  112,    0,
    0,    0,  112,  112,  112,    0,    0,  112,  112,  112,
    0,    0,  111,    0,    0,    0,  112,  112,    0,  112,
  112,    0,  112,  112,  112,    0,    0,    0,  112,    0,
    0,    0,    0,  111,  111,    0,    0,  111,    0,    0,
    0,    0,    0,  111,    0,    0,    0,  111,  112,  111,
    0,    0,  111,    0,  111,  111,    0,  111,    0,  111,
    0,  111,    0,  111,  111,  111,  111,  112,    0,  111,
  111,    0,    0,    0,    0,  111,  111,  111,  111,  111,
    0,    0,  111,    0,  111,    0,  111,    0,  111,  111,
    0,  111,  111,  111,  111,    0,    0,    0,  111,  111,
  111,    0,    0,  111,  111,  111,    0,    0,  112,    0,
    0,    0,  111,  111,    0,  111,  111,    0,  111,  111,
  111,    0,    0,    0,  111,    0,    0,  111,  111,    0,
    0,  111,    0,    0,    0,    0,    0,  111,    0,    0,
    0,  111,    0,  111,  111,    0,  111,    0,  111,  111,
    0,  111,    0,  111,  299,  111,    0,  111,  111,  111,
  111,    0,    0,  111,  111,    0,    0,    0,    0,  111,
  111,  111,  111,  111,    0,    0,  111,    0,  111,    0,
  111,    0,  111,  111,    0,  111,  111,  111,  111,    0,
    0,    0,  111,  111,  111,    0,    0,  111,  111,  111,
    0,    0,    0,    0,  111,    0,  111,  111,    0,  111,
  111,    0,  111,  111,  111,    0,    0,    0,  111,    0,
    0,  828,  828,    0,    0,  828,    0,    0,    0,    0,
    0,    0,    0,  828,    0,  828,    0,  828,  111,    0,
  828,    0,  828,  828,    0,  828,    0,  828,  300,  828,
    0,  828,  828,  828,    0,    0,    0,  828,  828,    0,
    0,    0,    0,  828,    0,  828,  828,    0,    0,    0,
  828,    0,    0,    0,  828,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  828,  828,    0,  828,    0,
    0,    0,  828,  828,    0,    0,    0,    0,  111,    0,
  828,  828,    0,    0,  828,  827,  827,  828,    0,  827,
    0,    0,  828,    0,    0,    0,    0,    0,    0,  827,
    0,  827,    0,    0,  827,    0,  827,  827,    0,  827,
    0,  827,    0,  827,    0,  827,  827,  827,  828,  828,
    0,  827,  827,    0,    0,    0,    0,  827,    0,  827,
  827,  828,    0,    0,  827,    0,    0,    0,  827,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  827,    0,  827,    0,    0,    0,  827,  827,    0,  827,
  827,    0,    0,  827,  827,  827,    0,    0,  827,    0,
    0,  827,  828,  827,    0,  827,  827,    0,  827,    0,
  827,  827,    0,  827,    0,  827,    0,  827,    0,  827,
  827,  827,    0,    0,    0,  827,  827,    0,    0,    0,
    0,  827,    0,  827,  827,    0,    0,    0,  827,    0,
    0,    0,  827,    0,    0,  827,    0,    0,    0,    0,
    0,    0,    0,    0,  827,    0,  827,    0,    0,    0,
  827,  827,    0,    0,    0,    0,    0,    0,  827,  827,
   62,   24,  827,   25,    0,  827,   26,  263,    0,    0,
  827,   27,   67,   68,    0,   28,  827,    0,    0,    0,
    0,   70,    0,    0,   30,    0,    0,    0,    0,    0,
    0,   32,    0,    0,    0,    0,   33,    0,   77,   78,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,   80,    0,    0,   38,    0,
    0,   82,    0,   84,    0,   86,   39,   40,  266,    0,
   41,    0,    0,    0,    0,    0,    0,   92,    0,    0,
   93,   94,    0,    0,    0,    0,    0,    0,    0,    0,
  827,    0,    0,    0,    0,   95,   96,   97,   98,  869,
    0,    0,  100,  101,    0,    0,    0,  870, 1183,    0,
    0,  103,    0,    0,    0,    0,    0,  105,  106,  107,
  108,    0,    0,    0,  109,    0,  110,    0,    0,    0,
    0,    0,  111,  112,    0,    0,    0,    0,    0,    0,
   62,   24,    0,   25,    0,    0,   26,  263,    0,    0,
    0,   27,   67,   68,    0,   28,    0,  113,  871,  115,
  116,   70,    0,  872,   30,    0,    0,    0,  873,    0,
    0,   32,    0,    0,    0,    0,   33,    0,   77,   78,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,   80,    0,    0,   38,    0,
    0,   82,    0,   84,    0,   86,   39,   40,  266,    0,
   41,    0,    0,    0,    0,    0,    0,   92,    0,    0,
   93,   94,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   95,   96,   97,   98,  869,
    0,    0,  100,  101,    0,    0,    0,  870,    0,    0,
    0,  103,    0,    0,    0,    0,    0,  105,  106,  107,
  108,    0,    0,    0,  109,    0,  110,    0,    0,    0,
    0,    0,  111,  112,    0,    0,    0,    0,  111,    0,
    0,    0,  111,    0,  111,    0,    0,  111,    0,    0,
  111,    0,  111,    0,    0,    0,  111,  113,  871,  115,
  116,  111,    0,  872,    0,  111,    0,    0,  873,    0,
    0,  111,  111,    0,  111,    0,    0,  111,    0,  111,
    0,  111,    0,  111,  111,    0,  111,  111,  111,  111,
    0,    0,    0,  111,  111,  111,    0,    0,  111,  111,
    0,    0,    0,    0,    0,    0,    0,  111,  111,    0,
  111,  111,    0,  111,  111,  111,    0,  111,    0,  111,
    0,  111,    0,  111,    0,    0,  111,    0,    0,  111,
    0,  111,    0,    0,    0,  111,    0,    0,    0,  111,
  111,    0,    0,    0,  111,    0,    0,    0,    0,   90,
  111,  111,    0,  111,    0,    0,  111,    0,  111,    0,
  111,    0,  111,  111,    0,  111,  111,  111,  111,    0,
    0,    0,  111,  111,  111,    0,    0,  111,  111,    0,
    0,  426,    0,    0,    0,    0,  111,  111,    0,  111,
  111,    0,  111,  111,  111,    0,    0,    0,  111,  111,
    0,    0,    0,    0,  426,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  426,    0,    0,  426,  111,  514,
    0,    0,  426,    0,    0,  426,  426,  426,   91,  426,
  426,  426,  426,    0,    0,    0,    0,  426,    0,    0,
    0,  426,  515,    0,    0,  426,    0,    0,    0,    0,
    0,    0,  516,  426,    0,  517,  426,    0,  426,    0,
  519,    0,    0,    0,  520,  521,  448,  522,  523,  524,
  525,    0,    0,    0,    0,  526,    0,  426,  111,  527,
    0,    0,  426, 1629,    0,    0,    0,    0,    0,  448,
    0,  528,  426,  426,  529,  349,  530,  426,    0,  448,
    0,    0,  448,    0,    0,    0,    0,  448,    0,    0,
  426,  448,  448,  514,  448,  448,  448,  448,    0,    0,
  531,    0,  448,    0,    0,    0,  448,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  515,    0,  448,    0,
    0,  448,  426,  448,    0,    0,  516,    0,    0,  517,
    0,    0,    0,    0,  519,    0,    0,    0,  520,  521,
    0,  522,  523,  524,  525,    0,    0,  448,    0,  526,
    0,    0,    0,  527,    0,    0,    0,    0,    0,    0,
 1630,  448,    0,    0,    0,  528,   62,   24,  529,   25,
  530,    0,   26,  263,    0,    0,    0,   27,   67,   68,
    0,   28,    0,    0,    0,    0,    0,   70,    0,    0,
   30,    0,    0,    0,  531,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   77,   78,   34,  448,  264,    0,
    0,    0,    0,    0,    0,  265,    0,    0,   36,    0,
   37,   80,    0,    0,   38,    0,    0,   82,    0,   84,
    0,   86,   39,   40,  266,    0,   41,    0,    0,    0,
    0,    0,    0,  267,    0,    0,   93,   94,    0,    0,
    0,    0,    0,    0, 1372,    0,    0,    0,    0,    0,
    0,   95,   96,   97,   98,   99,    0,    0,  100,  101,
    0,    0,    0,    0,    0,    0,    0,  103,  819,    0,
  268,    0,    0,  105,  106,  107,  108,    0,    0,    0,
  109,    0,  110,    0,    0,    0,    0,    0,  111,  112,
    0,    0,    0,    0,    0,    0,   62,   24,    0,   25,
    0,    0,   26,  263,    0,    0,    0,   27,   67,   68,
    0,   28,    0,  113,  114,  115,  116,   70,    0,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   77,   78,   34,    0,  264,    0,
    0,    0,    0,    0,    0,  265,    0,    0,   36,    0,
   37,   80,    0,    0,   38,    0,    0,   82,    0,   84,
    0,   86,   39,   40,  266,    0,   41,    0,    0,    0,
    0,    0,    0,  267,    0,    0,   93,   94,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   95,   96,   97,   98,   99,    0,    0,  100,  101,
    0,    0,    0,    0,    0,    0,    0,  103,    0,    0,
  268,    0,    0,  105,  106,  107,  108,    0,    0,    0,
  109,    0,  110,    0,    0,    0,    0,    0,  111,  112,
    0,    0,    0,    0,    0,    0,   62,   24,    0,   25,
    0,    0,   26,  263,    0,    0,    0,   27,   67,   68,
    0,   28,    0,  113,  114,  115,  116,   70,    0,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   77,   78,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   80,    0,    0,   38,    0,    0,   82,    0,   84,
    0,   86,   39,   40,  266,    0,   41,    0,    0,   90,
    0,    0,    0,   92,    0,    0,   93,   94,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   95,   96,   97,   98,  343,    0,    0,  100,  101,
    0,    0,    0,    0,    0,    0,    0,  537,    0,    0,
    0,    0,    0,  105,  106,  107,  108,    0,    0,    0,
  109,    0,  110,    0,    0,    0,    0,    0,  111,  112,
    0,    0,    0,    0,    0,    0,   62,   24,    0,   25,
    0,    0,   26,  263,    0,    0,    0,   27,   67,   68,
    0,   28,    0,  113,  344,  115,  116,   70,    0,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   77,   78,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   80,    0,    0,   38,    0,    0,   82,    0,   84,
    0,   86,   39,   40,  266,    0,   41,    0,    0,   90,
    0,    0,    0,   92,    0,    0,   93,   94,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   95,   96,   97,   98,  343,    0,    0,  100,  101,
    0,    0,    0,    0,    0,    0,    0,  103,    0,    0,
    0,    0,    0,  105,  106,  107,  108,    0,    0,    0,
  109,    0,  110,    0,    0,    0,    0,    0,  111,  112,
    0,    0,    0,    0,    0,    0,   62,   24,    0,   25,
    0,    0,   26,  263,    0,    0,    0,   27,   67,   68,
    0,   28,    0,  113,  344,  115,  116,   70,    0,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   77,   78,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   80,    0,    0,   38,    0,    0,   82,    0,   84,
    0,   86,   39,   40,  266,    0,   41,    0,    0,    0,
    0,    0,    0,   92,    0,    0,   93,   94,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   95,   96,   97,   98,  343,    0,    0,  100,  101,
    0,    0,    0,  602,    0,    0,    0,  103,    0,    0,
    0,    0,    0,  105,  106,  107,  108,    0,    0,    0,
  109,    0,  110,    0,    0,    0,    0,    0,  111,  112,
    0,    0,    0,    0,    0,    0,   62,   24,    0,   25,
    0,    0,   26,  263,    0,    0,    0,   27,   67,   68,
    0,   28,    0,  113,  344,  115,  116,   70,    0,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   77,   78,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   80,    0,    0,   38,    0,    0,   82,    0,   84,
    0,   86,   39,   40,  266,    0,   41,    0,    0,    0,
    0,    0,    0,   92,    0,    0,   93,   94,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   95,   96,   97,   98,  343,    0,    0,  100,  101,
    0,    0,    0,  596,    0,    0,    0,  103,    0,    0,
    0,    0,    0,  105,  106,  107,  108,    0,    0,    0,
  109,    0,  110,    0,    0,    0,    0,    0,  111,  112,
    0,    0,    0,    0,    0,    0,   62,   24,    0,   25,
    0,    0,   26,  263,    0,    0,    0,   27,   67,   68,
    0,   28,    0,  113,  344,  115,  116,   70,    0,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   77,   78,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   80,    0,    0,   38,    0,    0,   82,    0,   84,
    0,   86,   39,   40,  266,    0,   41,    0,    0,    0,
    0,    0,    0,   92,    0,    0,   93,   94,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   95,   96,   97,   98,  343,    0,    0,  100,  101,
    0,    0,    0,    0,    0,    0,    0,  103,    0,    0,
    0,    0,    0,  105,  106,  107,  108,    0,    0,    0,
  109,    0,  110,    0,    0,    0,    0,    0,  111,  112,
    0,    0,    0,    0,    0,    0,   62,   24,    0,   25,
    0,    0,   26,  263,    0,    0,    0,   27,   67,   68,
    0,   28,    0,  113,  344,  115,  116,   70,    0,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   77,   78,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   80,    0,    0,   38,    0,    0,   82,    0,   84,
    0,   86,   39,   40,  266,    0,   41,    0,    0,    0,
    0,    0,    0,   92,    0,    0,   93,   94,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   95,   96,   97,   98,   99,    0,    0,  100,  101,
    0,    0,    0,    0,    0,    0,    0,  103,    0,    0,
    0,    0,    0,  105,  106,  107,  108,    0,    0,    0,
  109,    0,  110,    0,    0,    0,    0,    0,  111,  112,
    0,    0,    0,    0,    0,    0,  780,  780,    0,  780,
    0,    0,  780,  780,    0,    0,    0,  780,  780,  780,
    0,  780,    0,  113,  114,  115,  116,  780,    0,    0,
  780,    0,    0,    0,    0,    0,    0,  780,    0,    0,
    0,    0,  780,    0,  780,  780,  780,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  780,    0,
  780,  780,    0,    0,  780,    0,    0,  780,    0,  780,
    0,  780,  780,  780,  780,    0,  780,    0,    0,    0,
    0,    0,    0,  780,    0,    0,  780,  780,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  780,  780,  780,  780,  780,    0,    0,  780,  780,
    0,    0,    0,    0,    0,    0,    0,  780,    0,    0,
    0,    0,    0,  780,  780,  780,  780,    0,    0,    0,
  780,    0,  780,    0,    0,    0,    0,    0,  780,  780,
    0,    0,    0,    0,    0,    0,  207,  207,    0,  207,
    0,    0,  207,  207,    0,    0,    0,  207,  207,  207,
    0,  207,    0,  780,  780,  780,  780,  207,    0,    0,
  207,    0,    0,    0,    0,    0,    0,  207,    0,    0,
    0,    0,  207,    0,  207,  207,  207,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  207,    0,
  207,  207,    0,    0,  207,    0,    0,  207,    0,  207,
    0,  207,  207,  207,  207,    0,  207,    0,    0,    0,
    0,    0,    0,  207,    0,    0,  207,  207,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  207,  207,  207,  207,  207,    0,    0,  207,  207,
    0,    0,    0,    0,    0,    0,    0,  207,    0,    0,
    0,    0,    0,  207,  207,  207,  207,    0,    0,    0,
  207,    0,  207,    0,    0,    0,    0,    0,  207,  207,
    0,    0,    0,    0,    0,    0,   62,   24,    0,   25,
    0,    0,   26,  263,    0,    0,    0,   27,   67,   68,
    0,   28,    0,  207,  207,  207,  207,   70,    0,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   77,   78,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   80,    0,    0,   38,    0,    0,   82,    0,   84,
    0,   86,   39,   40,  266,    0,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   95,   96,   97,  291,  738,    0,    0,  100,  101,
    0,    0,    0,    0,    0,    0,    0,  103,    0,    0,
    0,    0,    0,  105,  106,  107,  108,    0,    0,    0,
  109,    0,  110,    0,   62,   24,    0,   25,  111,  112,
   26,  263,    0,    0,    0,   27,   67,   68,    0,   28,
    0,    0,    0,    0,    0,   70,    0,    0,   30,    0,
    0,    0,    0,  113,  293,   32,  116,    0,    0,    0,
   33,    0,   77,   78,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   80,
    0,    0,   38,    0,    0,   82,    0,   84,    0,   86,
   39,   40,  266,    0,   41,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   95,
   96,   97,  291,  387,    0,    0,  100,  101,    0,    0,
    0,    0,    0,    0,    0,  103,    0,    0,    0,    0,
    0,  105,  106,  107,  108,    0,    0,    0,  109,    0,
  110,    0,   62,   24,    0,   25,  111,  112,   26,  263,
    0,    0,    0,   27,   67,   68,    0,   28,    0,    0,
    0,    0,    0,   70,    0,    0,   30,    0,    0,    0,
    0,  113,  293,   32,  116,    0,    0,    0,   33,    0,
   77,   78,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   80,    0,    0,
   38,    0,    0,   82,    0,   84,    0,   86,   39,   40,
  266,    0,   41,    0,    0,   90,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   95,   96,   97,
  291,  292,    0,    0,  100,  101,    0,    0,    0,    0,
    0,   62,   24,  103,   25,    0,    0,   26,  263,    0,
  720,  721,   27,   67,   68,    0,   28,    0,  722,    0,
    0,    0,   70,    0,    0,   30,    0,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   77,
   78,   34,    0,    0,    0,    0,    0,    0,    0,  113,
 1099,    0,  723,   36,    0,   37,   80,    0,    0,   38,
    0,    0,   82,    0,   84,    0,   86,   39,   40,  266,
    0,   41,    0,    0,   90,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   95,   96,   97,  291,
  292,    0,    0,  100,  101,    0,    0,    0,    0,    0,
   62,   24,  103,   25,    0,    0,   26,  263,    0,  720,
  721,   27,   67,   68,    0,   28,    0,  722,    0,    0,
    0,   70,    0,    0,   30,    0,    0,    0,    0,    0,
    0,   32,    0,    0,    0,    0,   33,    0,   77,   78,
   34,    0,    0,    0,    0,    0,    0,    0,  113,  293,
    0,  723,   36,    0,   37,   80,    0,    0,   38,    0,
    0,   82,    0,   84,    0,   86,   39,   40,  266,    0,
   41,    0,    0,   90,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   95,   96,   97,  291,  292,
    0,    0,  100,  101,    0,    0,    0,    0,   24,    0,
   25,  103,    0,   26,    0,    0, 1596,    0,   27,    0,
  812,    0,   28,    0,  813, 1597, 1598,    0,    0,    0,
 1599,   30,    0,    0,    0,    0, 1600,    0,   32,    0,
    0,    0,    0,   33,    0,    0,    0,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  113,  293,   36,
    0,   37,    0,    0,    0,   38,    0,    0,    0,    0,
    0,    0,    0,   39,   40,    0,   24,   41,   25,    0,
 1601,   26,    0,    0, 1596, 1602,   27,    0,  812,    0,
   28,    0,  813, 1597, 1598,    0,    0,    0, 1599,   30,
    0,    0,    0,    0, 1600,    0,   32,    0,    0,    0,
    0,   33,    0,    0,    0,   34,  111,    0,  111,    0,
    0,  111,    0,    0, 1612,    0,  111,   36,    0,   37,
  111,    0,    0,   38,    0,    0,    0,    0,    0,  111,
    0,   39,   40,    0,    0,   41,  111,    0, 1601,    0,
    0,  111,    0, 1602,    0,  111,  111,  111,  111,  111,
    0,  111,    0,    0,  111, 1603,  111,  111,    0,  111,
  111,    0,    0,  111,    0,    0,  111,    0,    0,  111,
    0,  111,  111,    0,    0,  111,  111,    0,  111,    0,
    0,  111,    0,    0,    0,  111,  111,  111,  111,  111,
    0,  111,    0,    0,  111,    0,  111,  111,    0,  111,
  111,    0,    0,  111,    0,    0,  111,    0,    0,  111,
    0,  111,  111,    0,    0,  111,  111,  230,  111,    0,
    0,  111,    0, 1603,    0,  111,    0,  111,    0,  111,
    0,    0,    0,    0,  111,    0,    0,  111,    0,  111,
    0,    0,    0,  111,    0,    0,  111,    0,    0,    0,
    0,  111,  111,    0,    0,  111,    0,   97,  111,   24,
    0,   25,    0,  111,   26,    0,    0,    0,    0,   27,
    0,    0,    0,   28,    0,    0,    0,    0,    0,    0,
    0,    0,   30,    0,    0,    0,    0,    0,    0,   32,
    0,    0,    0,    0,   33,  230,    0,    0,   34,  112,
  666,  112,    0,  111,  112,    0,    0,  667,    0,  112,
   36,    0,   37,  112,    0,    0,   38,    0,    0,  668,
    0,    0,  112,    0,   39,   40,    0,    0,   41,  112,
    0,  669,    0,    0,  112,    0,    0,    0,  112,  111,
  112,  111,  112,  111,  111,    0,    0,  112,    0,  111,
  112,    0,  112,  111,    0,    0,  112,  670,    0,  112,
    0,    0,  111,    0,  112,  112,    0,    0,  112,  111,
    0,  112,    0,    0,  111,    0,    0,    0,  111,   24,
  111,   25,  111,    0,   26,    0,    0,  111,    0,   27,
  111,    0,  111,   28,    0,    0,  111,   29,    0,  111,
    0,    0,   30,    0,  111,  111,    0,   31,  111,   32,
    0,  111,    0,    0,   33,    0,  671,    0,   34,   35,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   36,    0,   37,    0,    0,    0,   38,    0,    0,    0,
    0,    0,    0,    0,   39,   40,    0,   24,   41,   25,
    0,   42,   26,    0, 1500,    0,  112,   27,   24,    0,
   25,   28,    0,   26,    0,    0, 1596,    0,   27,    0,
   30,    0,   28,    0,    0,    0,    0,   32,    0,    0,
    0,   30,   33,    0, 1501,    0,   34,    0,   32,    0,
    0,    0,    0,   33,    0,    0,  111,   34,   36,    0,
   37,    0,    0,    0,   38, 1502,    0,    0,    0,   36,
    0,   37,   39,   40,    0,   38,   41,    0,    0,   90,
    0,    0,    0,   39,   40,    0,    0,   41,    0,  827,
  619,  827,    0,    0,  827, 1313,   43,  827,    0,  827,
    0,    0,    0,  827,    0,    0,    0,    0,    0,    0,
    0,    0,  827,    0,    0,    0,    0,    0,    0,  827,
    0,   24,    0,   25,  827,    0,   26,    0,  827,    0,
    0,   27,    0,    0,    0,   28,    0,    0,    0,    0,
  827,    0,  827,    0,   30,    0,  827,    0,    0,    0,
    0,   32,    0,    0,  827,  827,   33,    0,  827,    0,
   34,  827,    0,    0,  419,    0,  827,    0,    0,    0,
    0,   24,   36,   25,   37,  419,   26,    0,   38,    0,
    0,   27,    0,    0,    0,   28,   39,   40,    0,    0,
   41,    0,    0,   90,   30,    0,    0,    0,    0,    0,
    0,   32,    0,  250,    0,  250,   33,    0,  250,    0,
   34,    0,    0,  250,    0,    0,    0,  250,    0,  332,
    0,    0,   36,    0,   37,    0,  250,    0,   38,    0,
    0,    0,    0,  250,    0,    0,   39,   40,  250,    0,
   41,    0,  250,  619,    0,    0,  827,  250, 1313,  250,
    0,    0,  250,    0,  250,    0,  250,  250,    0,    0,
  250,  250,    0,    0,    0,    0,    0,    0,  250,  250,
  250,    0,  250,    0,    0,  250,    0,  250,  363,    0,
    0,    0,  250,    0,    0,  827,  250,  827,    0,    0,
  827,    0,    0,    0,    0,  827,    0,    0,  250,  827,
  250,    0,    0,    0,  250,    0,    0,    0,  827,    0,
    0,    0,  250,  250, 1177,  827,  250,    0,    0,  250,
  827,    0,    0,    0,  827,    0,    0,    0,  419,   24,
    0,   25,    0,    0,   26,    0,  827,    0,  827,   27,
    0,    0,  827,   28,    0,    0,    0,    0,    0,    0,
  827,  827,   30,    0,  827,    0, 1177,  827,    0,   32,
  250,   24,  827,   25,   33,    0,   26,    0,   34,    0,
    0,   27,    0,    0,    0,   28,    0,    0,    0,    0,
   36,    0,   37,    0,   30,    0,   38,    0,    0,    0,
    0,   32,    0,    0,   39,   40,   33,    0,   41,    0,
   34,   90,    0,    0,  250,   24,    0,   25,    0,    0,
   26,    0,   36,    0,   37,   27,    0,    0,   38,   28,
    0,    0,    0,    0,    0,    0,   39,   40,   30,    0,
   41,    0,    0,  669,    0,   32,    0,    0,    0,    0,
   33,    0,  827,  605,   34,  605,    0,    0,  605,    0,
    0,    0,    0,  605,    0,    0,   36,  605,   37,    0,
    0,    0,   38,    0,    0,    0,  605,    0,    0,    0,
   39,   40,    0,  605,   41,    0,    0,  619,  605,    0,
    0,    0,  605,    0,    0,    0,  419,  251,    0,  251,
    0,    0,  251,    0,  605,    0,  605,  251,    0,    0,
  605,  251,    0,    0,    0,    0,    0,    0,  605,  605,
  251,    0,  605,    0,    0,  605,    0,  251,  419,  250,
    0,  250,  251,    0,  250,    0,  251,    0,    0,  250,
    0,    0,    0,  250,    0,    0,    0,    0,  251,    0,
  251,    0,  250,    0,  251,    0,    0,    0,    0,  250,
    0,    0,  251,  251,  250,    0,  251,    0,  250,  251,
    0,    0,  419,  260,    0,  260,    0,    0,  260,    0,
  250,    0,  250,  260,    0,    0,  250,  260,    0,    0,
    0,    0,    0,    0,  250,  250,  260,    0,  250,    0,
    0,  250,    0,  260,    0,    0,    0,    0,  260,    0,
  605,    0,  260,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  260,    0,  260,    0,    0,    0,
  260,    0,    0,    0,    0,    0,    0,    0,  260,  260,
    0,    0,  260,    0,    0,  260,    0,   39,   39,    0,
    0,   39,    0,    0,  251,    0,    0,   39,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   39,    0,
    0,    0,    0,   39,    0,    0,    0,   39,    0,    0,
   39,    0,    0,    0,    0,    0,  250,    0,    0,    0,
   39,    0,   39,   39,    0,    0,    0,   39,   39,    0,
    0,    0,   39,   39,    0,   39,   39,   39,   39,    0,
    0,    0,    0,   39,    0,    0,    0,   39,    0,   39,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   39,
  260,   39,   39,    0,   39,    0,    0,    0,   39,    0,
   37,   37,    0,    0,   37,    0,    0,    0,    0,    0,
   37,    0,    0,    0,    0,    0,    0,    0,   39,    0,
    0,   37,    0,    0,    0,    0,   37,    0,   39,   39,
   37,    0,    0,   37,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   37,    0,   37,   37,    0,    0,    0,
   37,   37,    0,    0,    0,   37,   37,    0,   37,   37,
   37,   37,    0,    0,    0,    0,   37,    0,    0,    0,
   37,    0,   37,  111,  111,    0,    0,  111,    0,    0,
    0,    0,   37,  111,    0,   37,    0,   37,    0,    0,
    0,   37,    0,    0,  111,    0,    0,    0,    0,  111,
    0,    0,    0,  111,    0,    0,  111,    0,    0,    0,
    0,   37,    0,    0,    0,    0,  111,    0,  111,  111,
    0,   37,   37,  111,  111,    0,    0,    0,  111,  111,
    0,  111,  111,  111,  111,    0,    0,    0,    0,  111,
  111,  111,    0,  111,  111,  111,    0,    0,    0,    0,
  111,    0,    0,    0,    0,  111,    0,    0,  111,    0,
  111,  111,    0,    0,  111,    0,  111,    0,    0,    0,
  111,    0,    0,  111,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  111,  111,  111,  111,    0,   33,    0,
  111,  111,    0,    0,   41,  111,  111,    0,  111,  111,
  111,  111,    0,    0,    0,    0,  111,    0,    0,    0,
  111,   33,  111,    0,    0,    0,    0,    0,    0,    0,
    0,   33,  111,    0,   33,  111,   33,  111,   33,   33,
    0,  111,    0,   33,   33,    0,   33,   33,   33,   33,
    0,    0,   33,    0,   33,    0,    0,    0,   33,   33,
    0,  111,    0,    0,    0,    0,    0,    0,    0,   33,
   33,   42,   33,   33,    0,   33,    0,   33,    0,    0,
    0,   33,   33,    0,   33,   33,   33,   33,    0,    0,
    0,    0,   33,    0,    0,    0,   33,    0,    0,   33,
    0,    0,    0,    0,    0,    0,    0,    0,   33,   33,
   33,   33,    0,   33,    0,    0,  111,    0,    0,    0,
  111,    0,  111,    0,    0,  111,    0,    0,    0,    0,
  111,    0,    0,    0,  111,    0,    0,   33,    0,  111,
    0,    0,    0,  111,    0,    0,    0,   33,   33,  111,
  111,    0,  111,    0,    0,  111,    0,  111,    0,  111,
    0,  111,  111,    0,  111,  111,  111,  111,    0,    0,
    0,  111,  111,  111,    0,    0,  111,  111,    0,    0,
    0,    0,    0,    0,    0,  111,  111,    0,  111,  111,
    0,  111,  111,  111,    0,  111,    0,  111,    0,  111,
    0,  111,    0,    0,  111,    0,    0,    0,    0,  111,
    0,    0,    0,  111,    0,    0,    0,  111,  111,    0,
    0,    0,  111,    0,    0,    0,    0,  102,  111,  111,
    0,  111,    0,    0,  111,    0,  111,    0,  111,    0,
  111,  111,    0,  111,  111,  111,  111,    0,    0,    0,
  111,  111,  111,    0,  111,  111,  111,    0,    0,    0,
    0,    0,    0,    0,  111,  111,    0,  111,  111,    0,
  111,  111,  111,    0,    0,    0,  111,  111,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  111,    0,    0,
  111,    0,  111,    0,    0,  111,  111,    0,    0,  111,
  111,    0,  111,  111,  111,  111,  103,    0,    0,    0,
  111,    0,    0,    0,  111,  111,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  111,  111,    0,  111,  111,
  111,  111,    0,  111,    0,    0,    0,  111,  111,    0,
  111,  111,  111,  111,    0,    0,    0,    0,  111,    0,
    0,    0,  111,  111,    0,  111,    0,    0,    0,    0,
    0,  111,  111,  111,  111,  281,  111,  111,  111,  111,
  111,  111,    0,    0,    0,  111,  111,    0,  111,  111,
  111,  111,    0,    0,  111,    0,  111,    0,    0,    0,
  111,  111,    0,  111,    0,    0,    0,    0,    0,  111,
  111,  111,  111,  283,  111,  111,  111,  111,    0,  111,
    0,    0,    0,  111,  111,    0,  111,  111,  111,  111,
    0,    0,    0,    0,  111,    0,    0,    0,  111,  111,
    0,  111,    0,    0,    0,    0,    0,    0,    0,  111,
  111,  384,  111,  111,  111,  111,  111,  111,    0,    0,
    0,  111,  111,    0,  111,  111,  111,  111,    0,    0,
    0,    0,  111,    0,    0,    0,  111,  111,    0,  111,
    0,    0,    0,    0,    0,    0,    0,  111,  111,  385,
  111,  111,  514,  111,    0,  111,    0,    0,    0,  111,
  111,    0,  111,  111,  111,  111,    0,    0,  111,    0,
  111,    0,    0,    0,  111,  515,    0,  111,    0,    0,
    0,    0,    0,  111,  111,  516,  111,    0,  517,  111,
    0,  111,    0,  519,    0,    0,    0,  520,  521,    0,
  522,  523,  524,  525,    0,    0,    0,    0,  526,    0,
    0,    0,  527,    0,    0,  111,    0,    0,    0,    0,
    0,    0,    0,    0,  528,    0,    0,  529,    0,  530,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  531,
  };
  protected static readonly short [] yyCheck = {            17,
    4,   17,  600,   17,   52,   18,   17,  250,  424,  340,
  206,  393,  205,   65,  248,  341,  533,  330,   65,  812,
  209,  602,  572,   57,   58,   59,   60,   61,  362,  284,
  353,  339,  175,  454,  339,  655,  377,  131,  662,   57,
   58,   59,   60,   61,  418,  337,  454, 1088,  454,  129,
    6,  131,   52,   64,   83, 1020,  673,  424, 1145, 1321,
  892,   79,  682, 1314,    0,   83, 1048,  372,  434,   57,
   58,   59,   60,   61,   85,  265,   87,  256,  256,  277,
  256, 1314,  100, 1093,  256,  103,   74, 1476,  256,  256,
  256,  277,  256,  767,   17,  418,  334,  344,  772,  773,
 1365, 1467,  334,  256, 1369,   93,   94,  256,  367,   67,
   98,  256,  256,   71,   72,   73,  256,   75,   76,  385,
  265,  372,   80,   81,  256,  256,  374,  256,   86,   87,
  256,   89,  860,   91,  862,  256,  384,  125,   96,   97,
  556,  256, 1375,  372,  286,  277,   17,  387,  290, 1414,
   45,  256, 1417,   48,  828,   17,  256,  175,  206,  175,
  348,  175,  291,  344,  175,  265,   17,  155,  257,  786,
  475,  256,  130,  257,   17, 1440,  442,   17,  906,  434,
  431,  909,  256,  381, 1149,  433,  256, 1420,  367,  429,
  441,  256,  380,  431,  323,  442,   17,   17,   17,  431,
  248,   17,  431,  256,  380,  256,  206,  256,  384,  351,
  382, 1577,  264,  265,   17,   17,    0,  348,  634,  372,
 1609,  388,  353,  387,  355, 1614,  256,  358,  359, 1618,
  361,  362,  648,  256,   17, 1304,  256,  435,  383,   17,
  385, 1358,  387,  387,  389,  394,  264,  265,  248,  435,
 1260,  372,  175,  431, 1643,  596,  499,  433,  437,  438,
  439,  440,   17,  431,  498,  431,  284,  634,  599,  643,
  364,  687,  290,  655, 1663,  327,  692,  693,  431,  384,
  327,  361,  863,  383,  364,  385, 1268,  387,  244,  389,
  337,  431,  547, 1362,  374,  283,  284,  442,  922,  384,
  682,    0,  431,  435,  175,  431,  358,  295,  266,   17,
  431,  442,  330,  175,  388,  380,  431,  335,  336,  384,
  643,  257,  511,  689,  175,  692, 1591, 1444,  433,  380,
  348,  382,  175,  384,  404,  175,  294,  277,  356,  388,
  358,  394,  442,  238,  362,  285,  357,  537,  433,  337,
  673,   17,  372, 1604,  175,  175,  175,  427,  388,  175,
  378,  379, 1613,  383,  434,  385, 1483,  387,  433,  256,
  256,  394,  175,  175,  256,  256,  256,  393,  366,  393,
 1645,  339,  433,  256, 1058,  436,  256,  256,  376, 1622,
 1459, 1460,  175,  422, 1226,  256,  256,  175,  381,   65,
  388,  435,  454,   69,  422,  272,  256,  454,  256, 1526,
 1027,  431,  256,  787,  256,  314,  434,  435,  387, 1506,
  175,  439,  440,  441,  442,  443,  444,  445,  446,  447,
  448,  449,  372, 1309,  689, 1109, 1523, 1111,  426,  256,
 1114, 1703,  430,  256,  256,  286,  434,  435, 1176,  256,
  498,  256, 1658,  471,  350,  256,  431,  324,  506,  442,
  429,  348,  256,  786,  381,  265,  353,  175,  355,  381,
  256,  358,  359,  257,  361,  362,  260,  261,  386, 1060,
  264,   93,   94,  314,  275,  537,  382, 1363, 1038,  812,
 1559,  431,  480,  481,  910, 1582,  484,  281,  498,  380,
  387,  384,  286,  389,  116,  385,  290,  389,  389,  175,
  544,  381,  256,  847,  387,  384, 1481,  387, 1483,  537,
  572,  305,  303,  383,  385,  442,  544,  387,  436,  547,
  442,  372,  323,  949,  315,  385, 1264,  385,  350,  256,
  382,  385, 1216,  910, 1218,  256, 1220,  968,  332,  256,
  256,  794, 1517,  541,  565,  442,  544,  256, 1599,  547,
  968, 1526,  968, 1769,  564, 1065,  940,  351,  385,  374,
  382,  385,  385,  865,  389,  382, 1541,  832, 1202,  380,
  598,  382,  600,  571,  602,  573, 1655,  387,  382, 1170,
  431,  432,  366,  782,  380,  275,  839,  388,  264,  265,
 1100,  213,  214,  382,  615, 1483, 1334,  502,  503,  567,
 1679,  384,  600,  508,  632, 1343,  360,  940,  636,  330,
 1689, 1586, 1709, 1692,  389,  399,  271,  442,  442,  256,
  724,  649, 1701,  651,  256,  352,  647,  372,  626,  655,
  256,  655,  349,  323,  724, 1732,  273,  256, 1526,  348,
  431,  662, 1026,  352,  381, 1383,  614,   17, 1745, 1283,
 1747,  327,  307,  380,  256,  385,  682,  384,  682,  386,
  387,  689,  389, 1347,  380,  385,  382,  394,  260,  261,
  256,  380,  264,  381,  672,  384,  298,  386,  387,  388,
  389,  389,  358, 1024,  303,  394,  431,  381,  314,  281,
  688,  689,  256,  387, 1027,   65,  441,  334,  388,   69,
  394,  428,  272, 1054,  381,  442,  303,  329,  381, 1339,
 1394,   21,  442,  305,  387,  381,  348,  393,  315,  407,
  408,  353,  442,  355,  877,  347,  358,  359,  314,  361,
  362,  729, 1734, 1735,  442,  381,  391,  392,  381,  767,
  332, 1059, 1057,   53,  772,  773,  348,  775,  442,   93,
   94,  353, 1088,  355,  324,  387,  358,  359,  382,  361,
  362,  352,  384,  385,  404,  442,  384, 1570, 1308,  442,
 1310,  769,  116,  771, 1483, 1578,  442, 1208,  454,  389,
 1211,  352,  780, 1214, 1468,  431, 1788,  427,  431, 1483,
 1208,  413, 1208, 1211,  303, 1211, 1214,  352, 1214,  380,
  828, 1000,  382,  394,  832,  175,  386,  431,  865,  380,
  442, 1495,  256,  404,  399,  433,  380, 1526,  389,  847,
  384,  256,  386,  387, 1384,  389, 1366,  366,  872, 1173,
  394,  453, 1526,  366,  832,  863,  427,  278,  384,  394,
  442,  380,  870,  434,  872,  384, 1187,  813, 1375,  404,
  441,  348,  850,  386,  295,  352,  436,  366,  480,  481,
  399,  537, 1127,  372,  428,  256,  399,  865,  348,  213,
  214,  256,  427,  382,  872,  388, 1484,  386,  899,  434,
  901,  352,  352,  380,  912, 1277,  441,  278,  916,  352,
  399,  404,  389,  380,  264,  265,  572,  348,  926,  920,
  380,  922,  389, 1481,  295, 1483,  968,  352,  352,  380,
  380,  968, 1245,  348,  427, 1118,  397,  380,  353,  389,
  355,  434,  431,  358,  359, 1124,  361,  362,  441,  380,
 1481,  427, 1483,  384,  962,  380,  380,  995,  434, 1517,
  384,  939,  386,  387,  972,  389, 1372, 1339, 1526, 1272,
  394,  348, 1171, 1481,  298, 1483,    6,  327, 1486, 1481,
  348, 1483, 1020,  348,  404,  352, 1517,   17,  353,  967,
  355,  256,  352,  358,  359, 1526,  361,  362, 1197,  655,
 1321,  402, 1481,  380, 1483,  329,  398,  427,  358, 1517,
 1018,  388,  380,  380,  434, 1517, 1024,  341, 1526, 1425,
 1426, 1324,  389,  347, 1526,  413,  682,  442,  256,  315,
  260,  261, 1040,  366,  264,   65,  322, 1045, 1517,   69,
 1048, 1031,  404,  393,  404,  256, 1481, 1526, 1483, 1557,
 1058,  281, 1060,  386,  399,  400,  401, 1302,  414, 1005,
  384,  385, 1541,   93,   94,  427,  399,  427, 1576, 1481,
  426, 1483,  434,  315,  434,  305,  348,  442, 1381,  441,
  322,  441, 1517,  348,  395,  396,  116, 1065,  353,  413,
  355, 1526,  334,  358,  359, 1467,  361,  362,  409,  410,
  382, 1109,  332, 1111,  454, 1517, 1114, 1586,  380,  380,
  403, 1149,  394, 1091, 1526, 1063,  382,  380,  389, 1127,
  348,  723, 1100, 1694,  431,  353,  389,  355,  373,  453,
  358,  359,  381,  361,  362,  431,  385,  348,  387,  384,
  381,  386,  353,  380,  355,  175,  387,  358,  359, 1127,
  361,  362,  389,  394,  260,  261,  480,  481,  264,  381,
  405,  406, 1170,  385,  428, 1173, 1208,  389, 1401, 1211,
 1356, 1208, 1214, 1397, 1211,  281, 1154, 1214,  384, 1750,
  425,  383, 1160,  213,  214,  387, 1194,  537,  433, 1604,
 1136,  436, 1138, 1139, 1497, 1141, 1142,  381, 1613,  305,
 1481, 1202, 1483,  387,  860, 1577,  862,  384, 1216,  386,
 1218,  394, 1220, 1784,  442, 1223,  260,  261, 1806, 1807,
  264,  404,  572,  383, 1630,  381,  332,  387,  380,  385,
  382,  442, 1210,  389,  264,  265, 1517,  281,  411,  412,
 1234,  387,  286,  389,  427, 1526,  290, 1248,  394,  381,
  906,  434,  381,  909, 1244,  387,  366, 1570,  387,  383,
 1268,  305,  372,  387, 1272, 1578,  383,  315,  298,  317,
  387, 1277,  382, 1277,  322,  385,  386,  387, 1286, 1287,
  383,  384, 1283, 1599,  387,  386,  334,  386,  332,  399,
  389,  385,  256,  387, 1302,  389,  898,  327,  386,  329,
 1303,  389, 1615,  286,  385,  655,  387,  351,  389,  381,
  382,  341,  968, 1321, 1304,  917, 1324,  347, 1356,  386,
 1358,  431,  389,  353, 1302,  388,  383,  384,  358,  386,
  387,  388,  682, 1339,  936, 1339,  383,  383,  385, 1347,
  387,  387,  383,  383,  385, 1353,  387,  387,  383,  387,
  256,  389,  387,  384,  384,  385,  381,  388,  381, 1397,
  385,  383,  385,  393,  380,  387, 1356,  381, 1358,  386,
 1378,  385, 1362, 1381,  459,  460,  461,  462,  384,  389,
  386, 1208, 1703,  413, 1211,  389, 1394, 1395,  418,  387,
  387,  389,  389,  385,  385,  387,  387,  256,  387,  723,
  389,  383,  389,  385,  373,  256, 1444, 1397,  387,  389,
  389, 1419,  381,  366,  385,  384,  387,  386,  387,  372,
  373,  387,  388,  453,  454,  394, 1028,  380,  383,  382,
  385,  384,  385,  386,  387,  303,  405,  406,  383,  383,
  385,  385,  385, 1481,  387, 1483,  399,  383, 1486,  385,
  480,  481,  405,  406, 1444,  383,  425,  385,  375,  376,
 1468, 1467,  303, 1467,  433,  352,  387,  436,  389, 1459,
 1460,  431,  425,  442,  385,  387, 1484,  389,  431, 1517,
  433,  389,  387,  436,  389,  363,  364, 1495, 1526, 1497,
  387,  373,  389, 1483,  363,  364, 1486, 1818,  431,  381,
  381,  382,  384, 1541,  386,  387, 1484,  537,  427,  428,
  860,  365,  862,  377,  378,  375,  376,  375,  376, 1557,
 1176,   93,   94,  405,  406,  377,  378,  382,  455,  456,
 1132,  457,  458,  463,  464,  380, 1526,  427, 1576,  389,
  389,  385,  572,  425,  116,  385,  389,  394, 1586,  381,
  387,  433, 1208,  442,  436, 1211,  906,  385, 1214,  909,
  442,  385,  303,  303,  431,  387,  385, 1557,  385, 1559,
  256, 1577,  387, 1577,  898,  385,  389,  303,  441,  441,
  303,  385,  394,  431,  387, 1563, 1576,  386,  388,  387,
  386,  385,  431,  917,  385,  387,  389,  394,  387,  394,
   93,   94,  387,  387,  442,  436,  387,  385, 1264,  380,
  387,  385,  936,  643,  430,  388,  352,  387,  968,  385,
  303, 1277,  303,  116,  387,  655,  431,  383,  380,  384,
  431,  388,  305,  256, 1635,  256,  256,  209,  387,  256,
  256,  213,  214,  673,  394,  289,  256,  380, 1686,  381,
  385,  352,  682,  307,  385,  389,  383,  387,  387,  384,
  384, 1699,  381,  430,  436, 1655,  387,  389,  385,  389,
  383,  385,  356, 1711, 1712,  385,  394,  380, 1334,  394,
  256,  256,  394, 1339,  356,  394, 1694, 1343,  385, 1679,
  381,  385,  387,  723,  383, 1703, 1734, 1735,  388, 1689,
  385, 1702, 1692,  346, 1028,  384,  383,  383,  348,  380,
  385, 1701, 1720,  352,  381,  431,  209,  387,  384,  357,
  213,  214,   99,  431,  431,  431,  298, 1383,  105,  106,
  107,  108,  109,  110,  111,  112,  385,  389,  431,  386,
  256,  389, 1750,  384,  357,  381,  380,  380,  380,  384,
 1788,  380,  394,  380,  365,  386,  786,  329,  386,  389,
  385,  385,  381,  389, 1088,  387,  384,  381,  314,  341,
  385,  431,  381,  381,  352,  347, 1784,  381,  385,  385,
  382,  353,  812,  381,  384,  380,  389,  384,  384,  394,
 1791, 1792,  380,  394,  384,  384, 1797, 1798, 1806, 1807,
  394,  382,  385,  387,  256,  298,  385,  387, 1132,  383,
 1818, 1467,  384,  385,  415,  416,  417,  418,  419,  420,
  421,  422,  423,  424,  387,  387, 1176,  394, 1806, 1807,
  860,  389,  862,  389,  389,  385,  329,  389,  431,  431,
  431,  413,  385,  385,  256,  431,  418,  381,  341,  394,
  383,  381,  324,  265,  347,  272,  384,  384, 1208,  394,
  353, 1211,  381,  385, 1214,  385,  389,    0,  898,    0,
  431,  380,  389,  381,  389,  389,  906,    0, 1480,  909,
  385,  453,  389,  381,  385,  380,  385,  917,  385,  383,
  431,  384,  385,  389,  381,  381,  385,  389,  383,  380,
  431,  389,  431,  381,  380,  431,  936,  389,  480,  481,
  940,  385,  389,  381, 1264,  385,  385,  381,  381,  381,
  413, 1577,  389,  389,  389,  418,  324, 1277,  389,  389,
  389,  389,  389,  389,  272,   51,  348,   12,  968,  511,
    5,  353, 1526,  355,  356,  357,  358,  359,  360,  361,
  362,  363,  364,  365, 1586, 1310, 1244, 1149,  279, 1124,
  453, 1000, 1302,  375,  376, 1302,  343, 1569, 1576,  381,
 1557,  383, 1611,  385, 1740,  387,  388,  389, 1706, 1756,
 1723, 1697, 1702, 1635, 1334,  397,  398,  480,  481, 1339,
  402,  403,  838, 1343, 1596, 1597, 1517, 1027, 1028, 1031,
  377,  413,  414, 1031, 1031, 1026,  256, 1622, 1636, 1798,
  387, 1519, 1716, 1793,  426,  265, 1444, 1712,  511, 1711,
 1792, 1426, 1624,  995,  353, 1627,  547, 1446, 1054,  265,
  442,   77, 1187, 1383,  870, 1359,  865,  380,  454,  651,
  454, 1210,  832, 1214,  465,  467,  466,  470,  940,  468,
 1307,  469, 1411, 1569, 1277,  175,  643, 1172, 1088, 1262,
 1287, 1197, 1275, 1156, 1384, 1277, 1342,  616, 1069, 1565,
    0,  643, 1395,  450,  451,  452,  489,  997,  455,  456,
  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,
  467,  468,  469,  470,  489,  990,  778,   -1,  348,   -1,
   -1,  673, 1132,  353,   -1,  355,  356,  357,  358,  359,
  360,  361,  362,  363,  364,  365,   -1, 1467,   -1,   -1,
   -1,   -1, 1446,   -1,   -1,  375,  376,   -1,   -1,   -1,
   -1,  381,   -1,  383,   -1,  385,   -1,  387,  388,  389,
   -1,   -1,   -1,   -1,   -1,   -1, 1176,  397,  398,  256,
  643,  723,  402,  403,   -1,   -1, 1480,   -1,  265,   -1,
   -1,  411,  412,  413,  414,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  426,   -1, 1208,   -1,
  673, 1211,   -1,   -1, 1214,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  442,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  782,   -1,    0,   -1,  786, 1245,   -1,   -1,   -1,  596,
   -1,   -1,   -1,   -1,   -1,   -1,   -1, 1577,   -1,   -1,
  723,   -1,   -1,   -1, 1264,   -1,   -1,   -1,   -1,   -1,
  812,  348,   -1,   -1,   -1, 1569,  353, 1277,  355,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  365,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,  376,
   -1,   -1, 1596, 1597,  381, 1599,  383,   -1,  385,   -1,
  387,  388,  389,   -1,   -1,   -1,   -1,   -1,   -1,  782,
   -1,   -1,   -1,  786,   -1,   -1,  403,   -1,   -1,   -1,
 1624,  678,   -1, 1627, 1334,   -1,   -1,   -1,   -1, 1339,
   -1,   -1,   -1, 1343,   -1,   -1,   -1,    0,   -1,  812,
   -1,   -1,   -1,   -1,   -1,   -1,  898,  257,   -1, 1359,
  260,  261,   -1,   -1,  264,  442,   -1,   -1,   -1,   -1,
  270,   -1,   -1,  720,  721,  917,   -1,   -1,   -1,   -1,
   -1,  281,   -1, 1383,   -1,   -1,  286,   -1,   -1,   -1,
  290,  738,   -1,  293,  936,   -1,   -1,   -1,  940,   -1,
   -1,   -1,   -1,  303,   -1,  305,  306,   -1,   -1,   -1,
  310,  311,   -1,   -1,   -1,  315,  316,   -1,  318,  319,
  320,  321,   -1,   -1,   -1,   -1,  326,   -1,   -1,   -1,
  330,   -1,  332,   -1,   -1,  898,   -1,   -1,   -1,   -1,
   -1,   -1,  342,    0,  344,  345, 1446,  347,   -1,   -1,
   -1,  351,   -1,   -1,  917,   -1,   -1,   -1, 1000,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1, 1467,   -1,   -1,
   -1,  371,   -1,  936,   -1,   -1,   -1,  940,   -1,   -1,
 1480,  381,  382,   -1,   -1, 1027, 1028,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
   -1,   -1,  260,  261,   -1,   -1,  264,   -1,   -1,   -1,
   -1,   -1,  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  869,  281,   -1,   -1,   -1,   -1,  286,   -1,
   -1,   -1,  290,   -1,   -1,  293,   -1, 1000,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  303, 1088,  305,  306,   -1,
   -1,   -1,  310,  311,   -1,   -1,   -1,  315,  316,   -1,
  318,  319,  320,  321, 1027, 1028,   -1,   -1,  326, 1569,
 1570,   -1,  330,   -1,  332,   -1,   -1, 1577, 1578,   -1,
   -1,   -1, 1124,   -1,  342,   -1,   -1,  345,   -1,  347,
 1132,   -1,   -1,  351,   -1,   -1, 1596, 1597,   -1, 1599,
   -1,   -1,   -1,  256,  257,   -1,   -1,  260,  261,   -1,
   -1,  264,   -1,  371,   -1, 1615,   -1,  270,   -1,   -1,
   -1,  274,   -1,  276, 1624, 1088,  279, 1627,  281,  282,
    0,  284,   -1,  286,   -1,  288,   -1,  290,  291,  292,
  293,   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,  302,
  303,  304,  305,  306,   -1,   -1,  309,  310,  311,   -1,
  313, 1124,  315,  316,   -1,  318,  319,  320,  321, 1132,
   -1,   -1,  325,  326,  327,   -1,   -1,  330,  331,  332,
   -1,   -1,   -1,   -1,   -1,   -1,  339,  340,   -1,  342,
  343,   -1,  345,  346,  347,   -1,   -1,   -1,  351,  256,
   -1,   -1,   -1, 1245,   -1,   -1,   -1, 1054,  265,   -1,
   -1,   -1,   -1,  270,  271,   -1,   -1,   -1,  371,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  380,  381,  382,
   -1,   -1,   -1,   -1,   -1,   -1,  293,  390,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  303,   -1, 1095,  306,
  307,   -1,   -1,   -1,  311,   -1,   -1,  314,  315,  316,
   -1,  318,  319,  320,  321,   -1,   -1,   -1,   -1,  326,
   -1,   -1, 1314,  330,   -1,   -1,   -1,  334,  431,   -1,
   -1,   -1, 1245,   -1,   -1,  342,   -1,   -1,  345,   -1,
  347,  348,   -1,   -1,   -1,  352,  353,   -1,  355,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  365,   -1,
   -1,   -1,   -1,   -1,  371,  372,  373, 1359,  375,  376,
   -1,   -1,   -1,  380,  381,   -1,  383,  384,  385,  386,
  387,  388,  389, 1375,  391,  392,   -1,  394,  395,  396,
  397,  398,  399,  400,  401,  402,  403,   -1,  405,  406,
  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
   -1,   -1,  429,   -1,  431,   -1,  433,   -1, 1420,  436,
   -1,   -1,   -1,    0,   -1,  442,   -1,  257,   -1,   -1,
  260,  261,   -1,   -1,  264,   -1, 1359,   -1,   -1,   -1,
  270,   -1,   -1,   -1, 1446,   -1,   -1,   -1,   -1,   -1,
   -1,  281,   -1,   -1,   -1,   -1,  286,   -1,   -1,   -1,
  290,   -1,   -1,  293,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  303,   -1,  305,  306,   -1, 1480,   -1,
  310,  311,   -1,   -1,   -1,  315,  316,   -1,  318,  319,
  320,  321,   -1,   -1,   -1,   -1,  326,   -1,   -1,   -1,
  330,   -1,  332,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  342,  270,   -1,  345,   -1,  347,   -1,   -1,
   -1,  351,   -1, 1446,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,   -1,   -1,   -1,   -1,  293,   -1,  265,   -1,
   -1,  371,   -1,   -1,   -1,   -1,  303,   -1,   -1,  306,
  380,  381,  382,  310,  311,   -1,   -1, 1480,  315,  316,
   -1,  318,  319,  320,  321,   -1,   -1, 1569, 1570,  326,
   -1,   -1,   -1,  330,   -1,   -1, 1578,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  342,   -1,   -1,  345,   -1,
  347,   -1,   -1,   -1, 1596, 1597,   -1, 1599,   -1,   -1,
   -1,   -1, 1604,   -1,    0,   -1,   -1,   -1,   -1,   -1,
   -1, 1613,   -1, 1615,  371,   -1,   -1,   -1,   -1,   -1,
 1622,  348, 1624,   -1,   -1, 1627,  353,   -1,  355,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  365,   -1,
   -1,   -1,   -1,   -1,   -1,   -1, 1569, 1570,  375,  376,
   -1,   -1,   -1,   -1,  381, 1578,  383,   -1,  385,   -1,
  387,  388,  389,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1, 1596, 1597,   -1, 1599,   -1,   -1,  256,
  257,   -1,   -1,   -1,   -1,  262,  263,   -1,   -1,  266,
  267,  268, 1615,   -1,   -1,   -1,  273,  274,  275,  276,
  277, 1624,  279,  280, 1627,  282,  283,  284,  285,  286,
  287,  288,  289,   -1,   -1,  442,   -1,  294,   -1,  296,
  297,  298,  299,  300,  301,   -1,   -1,  304,   -1,   -1,
   -1,  308,  309,   -1,  311,  312,  313,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  323,   -1,  325,    0,
  327,  328,   -1,   -1,  331,   -1,  333,  334,  335,  336,
  337,  338,  339,  340,  341,  342,  343,  344,   -1,  346,
   -1,   -1,  349,  350,   -1,   -1,  353,  354,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  368,  369,  370,  371,  372,   -1,   -1,  375,  376,
   -1,   -1,   -1,  380,  381,   -1,   -1,  384,   -1,   -1,
   -1,   -1,  389,  390,  391,  392,  393,   -1,   -1,   -1,
  397,   -1,  399,   -1,   -1,   -1,   -1,   -1,  405,  406,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  430,  431,  432,  433,   -1,  435,   -1,
  256,  257,   -1,   -1,   -1,  442,  262,  263,   -1,   -1,
  266,  267,  268,   -1,   -1,   -1,   -1,  273,  274,  275,
  276,  277,   -1,  279,  280,   -1,  282,  283,  284,  285,
  286,  287,  288,   -1,   -1,   -1,   -1,   -1,  294,    0,
  296,  297,  298,  299,  300,  301,   -1,   -1,  304,   -1,
   -1,   -1,  308,  309,   -1,  311,  312,  313,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,   -1,  325,
   -1,  327,  328,   -1,   -1,  331,   -1,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,   -1,
  346,   -1,   -1,  349,  350,   -1,   -1,  353,  354,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  368,  369,  370,  371,  372,   -1,   -1,  375,
  376,   -1,   -1,   -1,  380,  381,   -1,   -1,  384,   -1,
   -1,   -1,   -1,  389,  390,  391,  392,  393,   -1,   -1,
   -1,  397,   -1,  399,   -1,  256,   -1,   -1,   -1,  405,
  406,   -1,   -1,   -1,  265,   -1,   -1,   -1,   -1,  270,
  271,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  430,  431,  432,  433,   -1,  435,
   -1,   -1,  293,   -1,   -1,   -1,  442,   -1,   -1,    0,
   -1,   -1,  303,   -1,   -1,  306,  307,   -1,   -1,   -1,
  311,   -1,   -1,  314,  315,  316,   -1,  318,  319,  320,
  321,   -1,   -1,   -1,   -1,  326,   -1,   -1,   -1,  330,
   -1,   -1,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  342,   -1,   -1,  345,   -1,  347,  348,   -1,   -1,
   -1,  352,  353,   -1,  355,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,   -1,   -1,   -1,   -1,
  371,  372,   -1,   -1,  375,  376,   -1,   -1,   -1,  380,
  381,  382,  383,  384,  385,  386,  387,  388,  389,   -1,
  391,  392,   -1,   -1,  395,  396,  397,  398,  399,   -1,
   -1,  402,  403,   -1,   -1,  256,  407,  408,  409,  410,
  411,  412,  413,  414,  265,   -1,   -1,   -1,   -1,  270,
  271,   -1,   -1,   -1,   -1,  426,   -1,   -1,  429,   -1,
  431,   -1,  433,    0,   -1,  436,   -1,   -1,   -1,   -1,
   -1,  442,  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  303,   -1,   -1,  306,  307,   -1,   -1,   -1,
  311,   -1,   -1,   -1,  315,  316,   -1,  318,  319,  320,
  321,   -1,   -1,   -1,   -1,  326,   -1,   -1,   -1,  330,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  342,   -1,   -1,  345,   -1,  347,  348,   -1,   -1,
   -1,  352,  353,   -1,  355,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,   -1,   -1,   -1,   -1,
  371,  372,   -1,   -1,  375,  376,   -1,   -1,   -1,  380,
  381,  382,  383,  384,  385,  386,  387,  388,  389,   -1,
  391,  392,   -1,   -1,  395,  396,  397,  398,  399,   -1,
   -1,  402,  403,   -1,   -1,  256,  407,  408,  409,  410,
  411,  412,  413,  414,  265,   -1,   -1,    0,   -1,  270,
  271,   -1,   -1,   -1,   -1,  426,   -1,   -1,  429,   -1,
  431,   -1,  433,   -1,   -1,  436,   -1,   -1,   -1,   -1,
   -1,  442,  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  303,   -1,   -1,  306,  307,   -1,   -1,   -1,
  311,   -1,   -1,  314,  315,  316,   -1,  318,  319,  320,
  321,   -1,   -1,   -1,   -1,  326,   -1,   -1,   -1,  330,
   -1,   -1,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  342,   -1,   -1,  345,   -1,  347,  348,   -1,   -1,
   -1,  352,  353,   -1,  355,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,   -1,   -1,   -1,   -1,   -1,
  371,  372,   -1,   -1,  375,  376,   -1,   -1,   -1,  380,
  381,  382,  383,  384,  385,   -1,  387,  388,  389,  256,
  391,  392,   -1,   -1,  395,  396,  397,  398,  265,   -1,
   -1,  402,  403,  270,  271,   -1,  407,  408,  409,  410,
  411,  412,  413,  414,   -1,   -1,   -1,    0,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  426,  293,   -1,  429,   -1,
  431,   -1,  433,   -1,   -1,  436,  303,   -1,   -1,  306,
  307,  442,   -1,   -1,  311,   -1,   -1,  314,  315,  316,
   -1,  318,  319,  320,  321,   -1,   -1,   -1,   -1,  326,
   -1,   -1,   -1,  330,   -1,   -1,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  342,   -1,   -1,  345,   -1,
  347,  348,   -1,   -1,   -1,  352,  353,   -1,  355,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  365,   -1,
   -1,   -1,   -1,   -1,  371,  372,   -1,   -1,  375,  376,
   -1,   -1,   -1,  380,  381,  382,  383,  384,  385,   -1,
  387,  388,  389,  256,  391,  392,   -1,   -1,  395,  396,
  397,  398,  265,   -1,   -1,  402,  403,  270,  271,   -1,
  407,  408,  409,  410,  411,  412,  413,  414,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  426,
  293,   -1,  429,   -1,  431,   -1,  433,   -1,   -1,  436,
  303,   -1,   -1,  306,  307,  442,   -1,    0,  311,   -1,
   -1,  314,  315,  316,   -1,  318,  319,  320,  321,   -1,
   -1,   -1,   -1,  326,   -1,   -1,   -1,  330,   -1,   -1,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  342,
   -1,   -1,  345,   -1,  347,  348,   -1,   -1,   -1,  352,
  353,   -1,  355,  356,  357,  358,  359,  360,  361,  362,
  363,  364,  365,   -1,   -1,  256,   -1,   -1,  371,  372,
   -1,   -1,  375,  376,  265,   -1,   -1,  380,  381,   -1,
  383,  384,  385,   -1,  387,  388,  389,   -1,  391,  392,
   -1,   -1,  395,  396,  397,  398,   -1,   -1,   -1,  402,
  403,   -1,    0,  256,  407,  408,  409,  410,  411,  412,
  413,  414,  265,   -1,   -1,   -1,   -1,   -1,  271,   -1,
   -1,   -1,   -1,  426,   -1,   -1,  429,   -1,  431,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  442,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  307,   -1,   -1,  348,   -1,   -1,
   -1,   -1,  353,   -1,  355,  356,  357,  358,  359,  360,
  361,  362,  363,  364,   -1,   -1,    0,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  375,  376,   -1,   -1,   -1,   -1,
  381,   -1,  383,   -1,  385,  348,  387,  388,  389,  352,
  353,   -1,  355,  356,  357,  358,  359,  360,  361,  362,
  363,  364,  365,   -1,   -1,   -1,   -1,   -1,   -1,  372,
   -1,   -1,  375,  376,   -1,   -1,   -1,  380,  381,  382,
  383,  384,  385,   -1,  387,  388,  389,   -1,  391,  392,
   -1,   -1,  395,  396,  397,  398,   -1,   -1,   -1,  402,
  403,  442,   -1,   -1,  407,  408,  409,  410,  411,  412,
  413,  414,   -1,   -1,  257,   -1,   -1,  260,  261,    0,
   -1,  264,   -1,  426,   -1,   -1,  429,  270,  431,   -1,
  433,   -1,   -1,  436,   -1,   -1,   -1,   -1,  281,  442,
   -1,   -1,   -1,  286,   -1,   -1,   -1,  290,   -1,   -1,
  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  303,   -1,  305,  306,   -1,   -1,   -1,  310,  311,   -1,
   -1,   -1,  315,  316,   -1,  318,  319,  320,  321,   -1,
   -1,   -1,   -1,  326,   -1,   -1,   -1,  330,   -1,  332,
   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,  342,
   -1,  344,  345,   -1,  347,   -1,   -1,   -1,  351,  257,
   -1,   -1,  260,  261,   -1,   -1,  264,   -1,   -1,   -1,
   -1,   -1,  270,   -1,   -1,   -1,   -1,   -1,  371,   -1,
   -1,   -1,   -1,  281,   -1,   -1,   -1,   -1,  286,  382,
   -1,   -1,  290,   -1,   -1,  293,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  303,   -1,  305,  306,   -1,
    0,   -1,  310,  311,   -1,   -1,   -1,  315,  316,   -1,
  318,  319,  320,  321,   -1,   -1,   -1,   -1,  326,   -1,
   -1,   -1,  330,  257,  332,   -1,  260,  261,   -1,   -1,
  264,   -1,   -1,   -1,  342,   -1,  270,  345,   -1,  347,
   -1,   -1,   -1,  351,   -1,   -1,   -1,  281,   -1,   -1,
   -1,   -1,  286,   -1,   -1,   -1,  290,   -1,   -1,  293,
   -1,   -1,   -1,  371,   -1,   -1,   -1,    0,   -1,  303,
   -1,  305,  306,  381,  382,   -1,  310,  311,   -1,   -1,
   -1,  315,  316,   -1,  318,  319,  320,  321,   -1,   -1,
   -1,   -1,  326,   -1,   -1,   -1,  330,   -1,  332,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  342,   -1,
   -1,  345,   -1,  347,   -1,   -1,  257,  351,   -1,  260,
  261,   -1,   -1,  264,   -1,   -1,   -1,   -1,   -1,  270,
   -1,   -1,   -1,   -1,    0,   -1,   -1,  371,   -1,   -1,
  281,   -1,   -1,   -1,   -1,  286,   -1,  381,  382,  290,
   -1,   -1,  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  303,   -1,  305,  306,   -1,   -1,   -1,  310,
  311,   -1,   -1,   -1,  315,  316,   -1,  318,  319,  320,
  321,   -1,   -1,   -1,   -1,  326,   -1,   -1,   -1,  330,
  257,  332,   -1,  260,  261,   -1,   -1,  264,   -1,   -1,
   -1,  342,   -1,  270,  345,   -1,  347,   -1,    0,   -1,
  351,   -1,   -1,   -1,  281,   -1,   -1,   -1,   -1,  286,
   -1,   -1,   -1,  290,   -1,   -1,  293,   -1,   -1,   -1,
  371,   -1,   -1,   -1,   -1,   -1,  303,   -1,  305,  306,
   -1,  382,   -1,  310,  311,   -1,   -1,   -1,  315,  316,
   -1,  318,  319,  320,  321,   -1,   -1,  257,   -1,  326,
  260,  261,   -1,  330,  264,  332,   -1,   -1,   -1,   -1,
  270,   -1,   -1,   -1,   -1,  342,   -1,   -1,  345,   -1,
  347,  281,   -1,   -1,  351,   -1,  286,   -1,   -1,   -1,
  290,   -1,   -1,  293,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  303,  371,  305,  306,   -1,   -1,   -1,
  310,  311,   -1,   -1,   -1,  315,  316,   -1,  318,  319,
  320,  321,   -1,   -1,  257,   -1,  326,  260,  261,   -1,
  330,  264,  332,   -1,   -1,   -1,   -1,  270,   -1,   -1,
   -1,   -1,  342,   -1,   -1,  345,   -1,  347,  281,   -1,
   -1,  351,   -1,  286,   -1,   -1,   -1,  290,   -1,   -1,
  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  303,  371,  305,  306,   -1,   -1,   -1,  310,  311,   -1,
   -1,   -1,  315,  316,   -1,  318,  319,  320,  321,   -1,
   -1,  257,   -1,  326,  260,  261,   -1,  330,  264,  332,
   -1,   -1,   -1,   -1,  270,   -1,   -1,   -1,   -1,  342,
   -1,   -1,  345,   -1,  347,  281,   -1,   -1,  351,   -1,
  286,   -1,   -1,   -1,  290,   -1,   -1,  293,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  303,  371,  305,
  306,   -1,   -1,   -1,  310,  311,   -1,   -1,   -1,  315,
  316,   -1,  318,  319,  320,  321,   -1,   -1,   -1,   -1,
  326,   -1,   -1,   -1,  330,  257,  332,   -1,  260,  261,
   -1,   -1,  264,   -1,   -1,   -1,  342,   -1,  270,  345,
   -1,  347,   -1,   -1,   -1,  351,   -1,   -1,   -1,  281,
   -1,   -1,   -1,   -1,  286,   -1,   -1,   -1,  290,   -1,
   -1,  293,   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,
   -1,  303,   -1,  305,  306,   -1,   -1,   -1,  310,  311,
   -1,   -1,   -1,  315,  316,   -1,  318,  319,  320,  321,
   -1,   -1,   -1,   -1,  326,   -1,   -1,   -1,  330,   -1,
  332,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  342,   -1,   -1,  345,  256,  347,   -1,   -1,   -1,  351,
  262,  263,   -1,   -1,  266,  267,  268,   -1,   -1,   -1,
   -1,  273,  274,  275,  276,   -1,   -1,  279,  280,  371,
  282,  283,  284,  285,  286,  287,  288,   -1,   -1,   -1,
   -1,   -1,  294,   -1,  296,  297,  298,  299,  300,  301,
   -1,   -1,  304,   -1,   -1,   -1,  308,  309,   -1,  311,
  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  323,   -1,  325,   -1,  327,  328,   -1,   -1,  331,
   -1,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,   -1,  346,  256,   -1,  349,  350,   -1,
   -1,  353,  354,   -1,  265,   -1,   -1,   -1,   -1,   -1,
  271,   -1,   -1,   -1,   -1,   -1,  368,  369,  370,  371,
  372,   -1,   -1,  375,  376,   -1,   -1,   -1,  380,   -1,
   -1,   -1,  384,   -1,   -1,   -1,   -1,  389,  390,  391,
  392,  393,   -1,   -1,   -1,  397,  307,  399,   -1,   -1,
   -1,   -1,   -1,  405,  406,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  430,  431,
  432,  433,   -1,   -1,   -1,   -1,   -1,  348,   -1,   -1,
  442,   -1,  353,   -1,  355,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,   -1,   -1,   -1,   -1,
   -1,  372,  373,   -1,  375,  376,   -1,   -1,   -1,  380,
  381,  382,  383,  384,  385,  386,  387,  388,  389,   -1,
  391,  392,   -1,  394,  395,  396,  397,  398,  399,  400,
  401,  402,  403,   -1,  405,  406,  407,  408,  409,  410,
  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
  421,  422,  423,  424,  425,  426,  427,  256,  256,   -1,
  431,   -1,  433,  434,   -1,  436,  265,   -1,   -1,   -1,
   -1,  442,  271,   -1,   -1,   -1,  274,   -1,  276,   -1,
   -1,  279,   -1,   -1,   -1,   -1,  284,   -1,   -1,   -1,
  288,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,
   -1,   -1,   -1,   -1,   -1,   -1,  304,   -1,  307,   -1,
   -1,  309,   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,  327,
   -1,   -1,   -1,  331,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  339,  340,   -1,   -1,  343,   -1,   -1,  346,  348,
   -1,   -1,   -1,   -1,  353,   -1,  355,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,   -1,   -1,
   -1,   -1,   -1,  372,  373,   -1,  375,  376,   -1,   -1,
   -1,  380,  381,  382,  383,  384,  385,  386,  387,  388,
  389,   -1,  391,  392,   -1,  394,  395,  396,  397,  398,
  399,  400,  401,  402,  403,   -1,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
  419,  420,  421,  422,  423,  424,  425,  426,  427,  256,
  256,   -1,  431,  431,  433,   -1,   -1,  436,  265,   -1,
   -1,   -1,   -1,  442,  271,   -1,   -1,   -1,  274,   -1,
  276,   -1,   -1,  279,   -1,   -1,   -1,   -1,  284,   -1,
   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  297,   -1,   -1,   -1,   -1,   -1,   -1,  304,   -1,
  307,   -1,   -1,  309,   -1,   -1,   -1,  313,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  325,
   -1,  327,   -1,   -1,   -1,  331,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  339,  340,   -1,   -1,  343,   -1,   -1,
  346,  348,   -1,   -1,   -1,   -1,  353,   -1,  355,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
   -1,   -1,   -1,   -1,   -1,  372,  373,   -1,  375,  376,
   -1,   -1,   -1,  380,  381,  382,  383,  384,  385,  386,
  387,  388,  389,   -1,  391,  392,   -1,  394,  395,  396,
  397,  398,  399,  400,  401,  402,  403,   -1,  405,  406,
  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
  256,  256,   -1,   -1,  431,  431,  433,   -1,   -1,  436,
  265,   -1,   -1,   -1,   -1,  442,  271,   -1,  274,   -1,
  276,   -1,   -1,  279,   -1,   -1,   -1,   -1,  284,   -1,
   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  297,   -1,   -1,   -1,   -1,   -1,   -1,  304,   -1,
   -1,   -1,  307,  309,   -1,   -1,   -1,  313,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  325,
   -1,  327,   -1,   -1,   -1,  331,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  339,  340,   -1,   -1,  343,   -1,   -1,
  346,   -1,   -1,  348,   -1,   -1,   -1,   -1,  353,   -1,
  355,  356,  357,  358,  359,  360,  361,  362,  363,  364,
  365,  366,   -1,   -1,   -1,   -1,   -1,  372,  373,   -1,
  375,  376,   -1,   -1,   -1,   -1,  381,  382,  383,  384,
  385,  386,  387,  388,  389,   -1,  391,  392,   -1,  394,
  395,  396,  397,  398,  399,  400,  401,  402,  403,   -1,
  405,  406,  407,  408,  409,  410,  411,  412,  413,  414,
  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,
  425,  426,  256,  256,   -1,  431,  431,   -1,  433,   -1,
   -1,  436,  265,   -1,   -1,   -1,   -1,  442,  271,   -1,
  274,   -1,  276,   -1,   -1,  279,   -1,   -1,   -1,   -1,
  284,   -1,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  297,   -1,   -1,   -1,   -1,   -1,   -1,
  304,   -1,   -1,   -1,  307,  309,   -1,   -1,   -1,  313,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,
   -1,  325,   -1,  327,   -1,   -1,   -1,  331,   -1,   -1,
   -1,  271,   -1,   -1,   -1,  339,  340,   -1,   -1,  343,
   -1,   -1,  346,   -1,   -1,  348,   -1,   -1,   -1,   -1,
  353,   -1,  355,  356,  357,  358,  359,  360,  361,  362,
  363,  364,  365,   -1,   -1,   -1,   -1,  307,   -1,   -1,
  373,   -1,  375,  376,   -1,   -1,   -1,  380,  381,  382,
  383,  384,  385,  386,  387,  388,  389,   -1,  391,  392,
   -1,  394,  395,  396,  397,  398,  399,  400,  401,  402,
  403,   -1,  405,  406,  407,  408,  409,  410,  411,  412,
  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,
  423,  424,  425,  426,   -1,  256,   -1,  431,   -1,   -1,
  433,   -1,   -1,  373,  265,   -1,   -1,   -1,   -1,  442,
  271,  381,   -1,   -1,  384,   -1,  386,  387,   -1,   -1,
   -1,  391,  392,   -1,   -1,  395,  396,  397,  398,  399,
  400,  401,  402,  403,   -1,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,   -1,  307,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  425,  426,   -1,   -1,   -1,
   -1,   -1,   -1,  433,   -1,   -1,  436,   -1,   -1,   -1,
  256,   -1,  442,   -1,   -1,   -1,   -1,   -1,   -1,  265,
   -1,   -1,   -1,   -1,   -1,  271,   -1,  348,   -1,   -1,
   -1,   -1,  353,   -1,  355,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  373,   -1,  375,  376,   -1,   -1,   -1,  380,
  381,  307,  383,  384,  385,  386,  387,  388,  389,   -1,
  391,  392,   -1,  394,  395,  396,  397,  398,  399,  400,
  401,  402,  403,   -1,  405,  406,  407,  408,  409,  410,
  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
  421,  422,  423,  424,  425,  426,   -1,  256,   -1,   -1,
   -1,   -1,  433,   -1,   -1,  436,  265,   -1,   -1,   -1,
   -1,  442,  271,   -1,   -1,   -1,  372,  373,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  381,  382,  383,  384,  385,
  386,  387,   -1,  389,   -1,  391,  392,   -1,  394,  395,
  396,  397,  398,   -1,  400,  401,  402,  403,  307,  405,
  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
  426,   -1,   -1,   -1,   -1,  431,   -1,  433,   -1,   -1,
  436,   -1,   -1,   -1,   -1,   -1,  442,   -1,   -1,  348,
   -1,   -1,   -1,   -1,  353,   -1,  355,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,   -1,   -1,  256,
   -1,   -1,   -1,   -1,  373,   -1,  375,  376,  265,   -1,
   -1,   -1,  381,   -1,  383,  384,  385,  386,  387,  388,
  389,   -1,  391,  392,   -1,  394,  395,  396,  397,  398,
  399,  400,  401,  402,  403,   -1,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
  419,  420,  421,  422,  423,  424,  425,  426,   -1,  256,
   -1,   -1,   -1,   -1,  433,   -1,   -1,  436,  265,   -1,
   -1,   -1,   -1,  442,  271,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  348,   -1,   -1,   -1,   -1,  353,   -1,  355,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  365,   -1,
  307,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,  376,
   -1,   -1,   -1,   -1,  381,   -1,  383,   -1,  385,   -1,
  387,  388,  389,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  403,   -1,   -1,   -1,
   -1,  348,   -1,   -1,   -1,   -1,  353,  414,  355,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  426,
   -1,  256,   -1,   -1,   -1,   -1,  373,   -1,  375,  376,
  265,   -1,   -1,   -1,  381,  442,  383,  384,  385,  386,
  387,  388,  389,   -1,  391,  392,   -1,  394,  395,  396,
  397,  398,  399,  400,  401,  402,  403,   -1,  405,  406,
  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
   -1,  256,   -1,   -1,   -1,   -1,  433,   -1,   -1,  436,
  265,   -1,   -1,   -1,   -1,  442,  271,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  348,   -1,   -1,   -1,   -1,  353,   -1,
  355,  356,  357,  358,  359,  360,  361,  362,  363,  364,
  365,   -1,  307,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  375,  376,   -1,   -1,   -1,   -1,  381,   -1,  383,   -1,
  385,   -1,  387,  388,  389,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  403,   -1,
   -1,   -1,   -1,  348,   -1,   -1,   -1,   -1,  353,  414,
  355,  356,  357,  358,  359,  360,  361,  362,  363,  364,
  365,  426,   -1,   -1,   -1,   -1,   -1,   -1,  373,   -1,
  375,  376,   -1,   -1,   -1,   -1,  381,  442,  383,  384,
  385,  386,  387,  388,  389,   -1,  391,  392,   -1,  394,
  395,  396,  397,  398,  399,  400,  401,  402,  403,   -1,
  405,  406,  407,  408,  409,  410,  411,  412,  413,  414,
  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,
  425,  426,   -1,  256,   -1,   -1,   -1,   -1,  433,   -1,
   -1,  436,  265,   -1,  270,   -1,   -1,  442,  271,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  293,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  303,   -1,   -1,
  306,   -1,   -1,   -1,  307,  311,   -1,   -1,  314,  315,
  316,   -1,  318,  319,  320,  321,  256,   -1,   -1,   -1,
  326,   -1,   -1,   -1,  330,  265,   -1,   -1,  334,   -1,
   -1,  271,   -1,   -1,   -1,  275,  342,   -1,   -1,  345,
   -1,  347,   -1,   -1,   -1,  348,   -1,   -1,   -1,   -1,
  353,   -1,  355,  356,  357,  358,  359,  360,  361,  362,
  363,  364,  365,   -1,   -1,  371,   -1,  307,   -1,   -1,
   -1,   -1,  375,  376,   -1,  381,   -1,   -1,  381,   -1,
  383,   -1,  385,  323,  387,  388,  389,   -1,  391,  392,
   -1,  394,  395,  396,  397,  398,  399,  400,  401,  402,
  403,   -1,   -1,   -1,  407,  408,  409,  410,  411,  412,
  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,
  423,  424,   -1,  426,   -1,  431,  366,   -1,   -1,   -1,
   -1,   -1,  372,  373,   -1,   -1,   -1,   -1,   -1,  442,
   -1,  381,  382,  383,  384,  385,  386,  387,  388,  389,
   -1,  391,  392,   -1,  394,  395,  396,  397,  398,  399,
  400,  401,  402,  403,   -1,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
  420,  421,  422,  423,  424,  425,  426,  256,  256,   -1,
   -1,  431,   -1,  433,   -1,   -1,  436,  265,   -1,   -1,
   -1,   -1,  442,  271,   -1,  274,   -1,  276,   -1,   -1,
  279,   -1,   -1,   -1,   -1,  284,   -1,   -1,   -1,  288,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,   -1,
   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,   -1,  307,
  309,   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,  327,   -1,
   -1,   -1,  331,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  339,  340,   -1,   -1,  343,   -1,   -1,  346,   -1,   -1,
  348,   -1,   -1,   -1,   -1,  353,   -1,  355,  356,  357,
  358,  359,  360,  361,  362,  363,  364,  365,   -1,   -1,
   -1,  256,   -1,   -1,  372,  373,   -1,  375,  376,   -1,
  265,   -1,   -1,  381,  382,  383,  271,  385,  386,  387,
  388,  389,   -1,  391,  392,   -1,   -1,  395,  396,  397,
  398,   -1,   -1,   -1,  402,  403,   -1,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,   -1,   -1,   -1,
   -1,   -1,  307,   -1,   -1,   -1,   -1,  425,  426,   -1,
   -1,   -1,  431,  431,   -1,  433,   -1,   -1,  436,   -1,
   -1,   -1,   -1,   -1,  442,   -1,   -1,   -1,  271,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  348,   -1,   -1,   -1,   -1,  353,   -1,
  355,  356,  357,  358,  359,  360,  361,  362,  363,  364,
  365,   -1,   -1,   -1,  307,   -1,   -1,   -1,  373,   -1,
  375,  376,   -1,   -1,   -1,   -1,  381,   -1,  383,  384,
  385,  386,  387,  388,  389,   -1,  391,  392,   -1,   -1,
  395,  396,  397,  398,   -1,   -1,   -1,  402,  403,   -1,
  405,  406,  407,  408,  409,  410,  411,  412,  413,  414,
  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  265,
  425,  426,   -1,   -1,   -1,  271,   -1,   -1,  433,   -1,
  373,  436,   -1,   -1,   -1,   -1,   -1,  442,   -1,   -1,
   -1,  384,  385,  386,  387,  388,   -1,   -1,  391,  392,
   -1,   -1,  395,  396,  397,  398,  399,  400,  401,  402,
  403,  307,  405,  406,  407,  408,  409,  410,  411,  412,
  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,
  423,  424,  425,  426,   -1,   -1,   -1,   -1,   -1,   -1,
  433,   -1,   -1,  436,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  348,   -1,   -1,   -1,   -1,  353,   -1,  355,
  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  373,   -1,  375,
  376,   -1,   -1,   -1,   -1,  381,   -1,  383,  384,  385,
  386,  387,  388,  389,   -1,  391,  392,   -1,   -1,  395,
  396,  397,  398,  270,   -1,   -1,  402,  403,   -1,  405,
  406,  407,  408,  409,  410,  411,  412,  413,  414,  256,
   -1,   -1,   -1,   -1,   -1,   -1,  293,   -1,  265,  425,
  426,   -1,   -1,   -1,  271,   -1,  303,  433,   -1,  306,
  436,   -1,   -1,   -1,  311,   -1,  442,  314,  315,  316,
   -1,  318,  319,  320,  321,   -1,   -1,   -1,   -1,  326,
   -1,   -1,   -1,  330,   -1,   -1,   -1,  334,   -1,   -1,
  307,   -1,   -1,   -1,   -1,  342,   -1,   -1,  345,   -1,
  347,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,
   -1,  348,   -1,   -1,  381,   -1,  353,   -1,  355,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  365,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  373,   -1,  375,  376,
   -1,   -1,   -1,   -1,  381,   -1,  383,  384,  385,  386,
  387,  388,  389,   -1,  391,  392,   -1,   -1,  395,  396,
  397,  398,  270,   -1,  431,  402,  403,   -1,  405,  406,
  407,  408,  409,  410,  411,  412,  413,  414,  256,   -1,
   -1,   -1,   -1,   -1,   -1,  293,   -1,  265,  425,  426,
   -1,   -1,   -1,  271,   -1,  303,  433,   -1,  306,  436,
   -1,   -1,   -1,  311,   -1,  442,   -1,  315,  316,   -1,
  318,  319,  320,  321,   -1,   -1,   -1,   -1,  326,   -1,
   -1,   -1,  330,   -1,   -1,   -1,  334,   -1,   -1,  307,
   -1,   -1,   -1,   -1,  342,   -1,   -1,  345,   -1,  347,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,   -1,
  348,   -1,   -1,  381,   -1,  353,   -1,  355,  356,  357,
  358,  359,  360,  361,  362,  363,  364,  365,   -1,   -1,
   -1,  256,   -1,   -1,  372,   -1,   -1,  375,  376,   -1,
  265,   -1,   -1,  381,  382,  383,  271,  385,   -1,  387,
  388,  389,   -1,  391,  392,   -1,   -1,  395,  396,  397,
  398,   -1,   -1,  431,  402,  403,   -1,   -1,   -1,  407,
  408,  409,  410,  411,  412,  413,  414,   -1,   -1,   -1,
   -1,   -1,  307,   -1,   -1,   -1,   -1,   -1,  426,   -1,
   -1,   -1,   -1,  431,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  442,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  265,   -1,   -1,   -1,   -1,   -1,  271,   -1,
   -1,   -1,   -1,  348,   -1,   -1,   -1,   -1,  353,   -1,
  355,  356,  357,  358,  359,  360,  361,  362,  363,  364,
  365,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  375,  376,   -1,   -1,  307,   -1,  381,   -1,  383,   -1,
  385,   -1,  387,  388,  389,   -1,  391,  392,   -1,   -1,
  395,  396,  397,  398,  399,  400,  401,  402,  403,   -1,
   -1,   -1,  407,  408,  409,  410,  411,  412,  413,  414,
   -1,   -1,   -1,   -1,   -1,  348,   -1,   -1,   -1,   -1,
  353,  426,  355,  356,  357,  358,  359,  360,  361,  362,
  363,  364,  365,   -1,   -1,   -1,  256,  442,   -1,  372,
   -1,   -1,  375,  376,   -1,  265,   -1,   -1,  381,   -1,
  383,  271,  385,   -1,  387,  388,  389,   -1,  391,  392,
   -1,   -1,  395,  396,  397,  398,   -1,   -1,   -1,  402,
  403,   -1,   -1,   -1,  407,  408,  409,  410,  411,  412,
  413,  414,   -1,   -1,   -1,   -1,   -1,  307,   -1,   -1,
   -1,   -1,   -1,  426,   -1,   -1,   -1,   -1,  431,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  442,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  265,   -1,   -1,
   -1,   -1,   -1,  271,   -1,   -1,   -1,   -1,  348,   -1,
   -1,   -1,   -1,  353,   -1,  355,  356,  357,  358,  359,
  360,  361,  362,  363,  364,  365,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  375,  376,   -1,   -1,  307,
   -1,  381,   -1,  383,   -1,  385,   -1,  387,  388,  389,
   -1,  391,  392,   -1,   -1,  395,  396,  397,  398,   -1,
   -1,   -1,  402,  403,   -1,   -1,   -1,  407,  408,  409,
  410,  411,  412,  413,  414,   -1,   -1,   -1,   -1,   -1,
  348,   -1,   -1,   -1,   -1,  353,  426,  355,  356,  357,
  358,  359,  360,  361,  362,  363,  364,  365,   -1,   -1,
   -1,  256,  442,   -1,   -1,   -1,   -1,  375,  376,   -1,
  265,   -1,   -1,  381,   -1,  383,  271,  385,   -1,  387,
  388,  389,   -1,  391,  392,   -1,   -1,  395,  396,  397,
  398,   -1,   -1,   -1,  402,  403,   -1,   -1,   -1,  407,
  408,  409,  410,  411,  412,  413,  414,   -1,   -1,   -1,
   -1,   -1,  307,   -1,   -1,   -1,   -1,   -1,  426,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  442,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  265,   -1,   -1,   -1,   -1,   -1,  271,   -1,
   -1,   -1,   -1,  348,   -1,   -1,   -1,   -1,  353,   -1,
  355,  356,  357,  358,  359,  360,  361,  362,  363,  364,
  365,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  375,  376,   -1,   -1,  307,   -1,  381,   -1,  383,   -1,
  385,   -1,  387,  388,  389,   -1,  391,  392,   -1,   -1,
  395,  396,  397,  398,   -1,   -1,   -1,  402,  403,   -1,
   -1,   -1,  407,  408,  409,  410,  411,  412,  413,  414,
   -1,   -1,   -1,   -1,   -1,  348,   -1,   -1,   -1,   -1,
  353,  426,  355,  356,  357,  358,  359,  360,  361,  362,
  363,  364,  365,   -1,   -1,   -1,   -1,  442,   -1,   -1,
   -1,   -1,  375,  376,   -1,   -1,   -1,   -1,  381,   -1,
  383,   -1,  385,   -1,  387,  388,  389,   -1,  391,  392,
   -1,   -1,  395,  396,  397,  398,  256,   -1,   -1,  402,
  403,   -1,   -1,   -1,  407,  408,  409,  410,  411,  412,
  413,  414,   -1,  273,  274,   -1,  276,   -1,   -1,  279,
  280,   -1,   -1,  426,  284,  285,  286,   -1,  288,   -1,
   -1,   -1,   -1,  256,  294,   -1,   -1,  297,   -1,  442,
   -1,   -1,  265,   -1,  304,   -1,   -1,   -1,   -1,  309,
   -1,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  325,   -1,  327,  328,   -1,
   -1,  331,   -1,   -1,  334,   -1,  336,   -1,  338,  339,
  340,  341,   -1,  343,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,  368,  369,
  370,  371,  372,   -1,  265,  375,  376,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  384,  348,   -1,   -1,   -1,   -1,
  353,   -1,  355,  356,  357,  358,  359,  360,  361,  362,
  363,  364,  365,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  375,  376,   -1,   -1,   -1,   -1,  381,   -1,
  383,   -1,  385,   -1,  387,  388,  389,   -1,   -1,   -1,
  430,  431,  395,  396,  397,  398,   -1,   -1,   -1,  402,
  403,  441,  442,   -1,  407,  408,  409,  410,  411,  412,
  413,  414,   -1,   -1,   -1,   -1,   -1,  348,   -1,   -1,
   -1,   -1,  353,  426,  355,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,   -1,   -1,  256,   -1,  442,
   -1,   -1,   -1,   -1,  375,  376,  265,   -1,   -1,   -1,
  381,   -1,  383,   -1,  385,   -1,  387,  388,  389,   -1,
   -1,   -1,   -1,   -1,  395,  396,  397,  398,   -1,   -1,
   -1,  402,  403,   -1,   -1,   -1,  407,  408,  409,  410,
  411,  412,  413,  414,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  426,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,  442,   -1,   -1,   -1,   -1,   -1,   -1,  265,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  348,
   -1,   -1,   -1,   -1,  353,   -1,  355,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  375,  376,   -1,   -1,
   -1,   -1,  381,   -1,  383,   -1,  385,   -1,  387,  388,
  389,   -1,   -1,   -1,   -1,   -1,  395,  396,  397,  398,
   -1,   -1,   -1,  402,  403,   -1,   -1,   -1,  407,  408,
  409,  410,  411,  412,  413,  414,   -1,   -1,   -1,   -1,
   -1,  348,   -1,   -1,   -1,   -1,  353,  426,  355,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  365,   -1,
   -1,  256,   -1,  442,   -1,   -1,   -1,   -1,  375,  376,
  265,   -1,   -1,   -1,  381,   -1,  383,   -1,  385,   -1,
  387,  388,  389,   -1,   -1,   -1,   -1,   -1,  395,  396,
  397,  398,   -1,   -1,   -1,  402,  403,   -1,   -1,   -1,
   -1,   -1,  409,  410,  411,  412,  413,  414,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  426,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,  442,   -1,   -1,   -1,   -1,
   -1,   -1,  265,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  348,   -1,   -1,   -1,   -1,  353,   -1,
  355,  356,  357,  358,  359,  360,  361,  362,  363,  364,
  365,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  375,  376,   -1,   -1,   -1,   -1,  381,   -1,  383,   -1,
  385,   -1,  387,  388,  389,   -1,   -1,   -1,   -1,   -1,
  395,  396,  397,  398,   -1,   -1,   -1,  402,  403,   -1,
   -1,   -1,   -1,   -1,  409,  410,  411,  412,  413,  414,
   -1,   -1,   -1,   -1,   -1,  348,   -1,   -1,   -1,   -1,
  353,  426,  355,  356,  357,  358,  359,  360,  361,  362,
  363,  364,  365,   -1,   -1,  256,   -1,  442,   -1,   -1,
   -1,   -1,  375,  376,  265,   -1,   -1,   -1,  381,   -1,
  383,   -1,  385,   -1,  387,  388,  389,   -1,   -1,   -1,
   -1,   -1,  395,  396,  397,  398,   -1,   -1,   -1,  402,
  403,   -1,   -1,   -1,   -1,   -1,  409,  410,  411,  412,
  413,  414,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  426,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,  442,
   -1,   -1,   -1,   -1,   -1,   -1,  265,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  348,   -1,   -1,
   -1,   -1,  353,   -1,  355,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  375,  376,   -1,   -1,   -1,   -1,
  381,   -1,  383,   -1,  385,   -1,  387,  388,  389,   -1,
   -1,   -1,   -1,   -1,  395,  396,  397,  398,   -1,   -1,
   -1,  402,  403,   -1,   -1,   -1,   -1,   -1,  409,  410,
  411,  412,  413,  414,   -1,   -1,   -1,   -1,   -1,  348,
   -1,   -1,   -1,   -1,  353,  426,  355,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,   -1,   -1,  256,
   -1,  442,   -1,   -1,   -1,   -1,  375,  376,  265,   -1,
   -1,   -1,  381,   -1,  383,   -1,  385,   -1,  387,  388,
  389,   -1,   -1,   -1,   -1,   -1,  395,  396,  397,  398,
   -1,   -1,   -1,  402,  403,   -1,   -1,   -1,   -1,   -1,
  409,  410,  411,  412,  413,  414,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  426,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,  442,   -1,   -1,   -1,   -1,   -1,   -1,
  265,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  348,   -1,   -1,   -1,   -1,  353,   -1,  355,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  365,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,  376,
   -1,   -1,   -1,   -1,  381,   -1,  383,   -1,  385,   -1,
  387,  388,  389,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  397,  398,   -1,  256,   -1,  402,  403,   -1,   -1,   -1,
   -1,   -1,  265,   -1,  411,  412,  413,  414,   -1,   -1,
   -1,   -1,   -1,  348,   -1,   -1,   -1,   -1,  353,  426,
  355,  356,  357,  358,  359,  360,  361,  362,  363,  364,
  365,   -1,   -1,   -1,   -1,  442,   -1,   -1,   -1,   -1,
  375,  376,   -1,   -1,   -1,   -1,  381,   -1,  383,   -1,
  385,   -1,  387,  388,  389,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  397,  398,   -1,  256,   -1,  402,  403,   -1,
   -1,   -1,   -1,   -1,  265,   -1,  411,  412,  413,  414,
   -1,   -1,   -1,   -1,   -1,  348,   -1,   -1,   -1,   -1,
  353,  426,  355,  356,  357,  358,  359,  360,  361,  362,
  363,  364,  365,   -1,   -1,   -1,   -1,  442,   -1,   -1,
   -1,   -1,  375,  376,   -1,   -1,   -1,   -1,  381,   -1,
  383,   -1,  385,   -1,  387,  388,  389,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  397,  398,   -1,  256,   -1,  402,
  403,   -1,   -1,   -1,   -1,   -1,  265,   -1,   -1,   -1,
  413,  414,   -1,   -1,   -1,   -1,   -1,  348,   -1,   -1,
   -1,   -1,  353,  426,  355,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,   -1,   -1,   -1,   -1,  442,
   -1,   -1,   -1,   -1,  375,  376,   -1,   -1,   -1,   -1,
  381,   -1,  383,   -1,  385,   -1,  387,  388,  389,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  398,   -1,  256,
   -1,  402,  403,   -1,   -1,   -1,   -1,   -1,  265,   -1,
   -1,   -1,  413,  414,   -1,   -1,   -1,   -1,   -1,  348,
   -1,   -1,   -1,   -1,  353,  426,  355,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,   -1,   -1,   -1,
   -1,  442,   -1,   -1,   -1,   -1,  375,  376,   -1,   -1,
   -1,   -1,  381,   -1,  383,   -1,  385,   -1,  387,  388,
  389,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  398,
   -1,  256,   -1,  402,  403,   -1,   -1,   -1,   -1,   -1,
  265,   -1,   -1,   -1,  413,  414,   -1,   -1,   -1,   -1,
   -1,  348,   -1,   -1,   -1,   -1,  353,  426,  355,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  365,   -1,
   -1,   -1,   -1,  442,   -1,   -1,   -1,   -1,  375,  376,
   -1,   -1,   -1,   -1,  381,   -1,  383,   -1,  385,   -1,
  387,  388,  389,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  398,   -1,  256,   -1,   -1,  403,   -1,   -1,   -1,
   -1,   -1,  265,   -1,   -1,   -1,  413,  414,   -1,   -1,
   -1,   -1,   -1,  348,   -1,   -1,   -1,   -1,  353,  426,
  355,  356,  357,  358,  359,  360,  361,  362,  363,  364,
  365,   -1,   -1,   -1,   -1,  442,   -1,   -1,   -1,   -1,
  375,  376,   -1,   -1,   -1,   -1,  381,   -1,  383,   -1,
  385,   -1,  387,  388,  389,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  398,   -1,  256,   -1,   -1,  403,   -1,
   -1,   -1,   -1,   -1,  265,   -1,   -1,   -1,  413,  414,
   -1,   -1,   -1,   -1,   -1,  348,   -1,   -1,   -1,   -1,
  353,  426,  355,  356,  357,  358,  359,  360,  361,  362,
  363,  364,  365,   -1,   -1,   -1,   -1,  442,   -1,   -1,
   -1,   -1,  375,  376,   -1,   -1,   -1,   -1,  381,   -1,
  383,   -1,  385,   -1,  387,  388,  389,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  403,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  413,  414,   -1,   -1,   -1,   -1,   -1,  348,   -1,   -1,
   -1,   -1,  353,  426,  355,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,   -1,   -1,   -1,   -1,  442,
   -1,   -1,   -1,   -1,  375,  376,   -1,   -1,   -1,   -1,
  381,   -1,  383,   -1,  385,   -1,  387,  388,  389,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  403,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  413,  414,   -1,   -1,  256,   -1,   -1,   -1,
   -1,   -1,  262,  263,   -1,  426,  266,  267,  268,   -1,
   -1,   -1,   -1,  273,  274,  275,  276,  277,   -1,  279,
  280,  442,  282,  283,  284,  285,  286,  287,  288,   -1,
   -1,   -1,   -1,   -1,  294,   -1,  296,  297,  298,  299,
  300,  301,   -1,   -1,  304,   -1,   -1,   -1,  308,  309,
   -1,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  323,   -1,  325,   -1,  327,  328,   -1,
   -1,  331,   -1,  333,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,   -1,  346,   -1,   -1,  349,
  350,   -1,   -1,  353,  354,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,  369,
  370,  371,  372,   -1,   -1,  375,  376,   -1,   -1,   -1,
  380,   -1,   -1,   -1,  384,   -1,   -1,   -1,   -1,  389,
  390,  391,  392,  393,   -1,   -1,   -1,  397,   -1,  399,
   -1,   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  430,  431,  432,  433,  256,  435,   -1,   -1,   -1,   -1,
  262,  263,   -1,   -1,  266,  267,  268,   -1,   -1,   -1,
   -1,  273,  274,  275,  276,   -1,   -1,  279,  280,   -1,
  282,  283,  284,  285,  286,  287,  288,   -1,   -1,   -1,
   -1,   -1,  294,   -1,  296,  297,  298,  299,  300,  301,
   -1,   -1,  304,   -1,   -1,   -1,  308,  309,   -1,  311,
  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  323,   -1,  325,   -1,  327,  328,   -1,   -1,  331,
   -1,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,   -1,  346,   -1,   -1,  349,  350,   -1,
   -1,  353,  354,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  368,  369,  370,  371,
  372,   -1,   -1,  375,  376,   -1,   -1,   -1,  380,   -1,
   -1,   -1,  384,   -1,   -1,   -1,   -1,  389,  390,  391,
  392,  393,   -1,   -1,   -1,  397,   -1,  399,   -1,   -1,
   -1,   -1,   -1,  405,  406,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,
   -1,  262,  263,   -1,   -1,  266,  267,  268,  430,  431,
  432,  433,  273,  274,  275,  276,   -1,   -1,  279,  280,
   -1,  282,  283,  284,  285,  286,  287,  288,   -1,   -1,
   -1,   -1,   -1,  294,   -1,  296,  297,  298,  299,  300,
  301,   -1,   -1,  304,   -1,   -1,   -1,  308,  309,   -1,
  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  323,   -1,  325,   -1,  327,  328,   -1,   -1,
  331,   -1,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,   -1,  346,   -1,   -1,  349,  350,
   -1,   -1,  353,  354,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,  369,  370,
  371,  372,   -1,   -1,  375,  376,   -1,   -1,   -1,  380,
   -1,   -1,   -1,  384,   -1,   -1,   -1,   -1,  389,  390,
  391,  392,  393,   -1,   -1,   -1,  397,   -1,  399,   -1,
   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,
   -1,   -1,  262,  263,   -1,   -1,  266,  267,  268,  430,
  431,  432,  433,  273,  274,  275,  276,   -1,   -1,  279,
  280,   -1,  282,  283,  284,  285,  286,  287,  288,   -1,
   -1,   -1,   -1,   -1,  294,   -1,  296,  297,  298,  299,
  300,  301,   -1,   -1,  304,   -1,   -1,   -1,  308,  309,
   -1,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  323,   -1,  325,   -1,  327,  328,   -1,
   -1,  331,   -1,  333,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,   -1,  346,   -1,   -1,  349,
  350,   -1,   -1,  353,  354,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,  369,
  370,  371,  372,   -1,   -1,  375,  376,   -1,   -1,   -1,
  380,   -1,   -1,   -1,  384,   -1,   -1,   -1,   -1,  389,
  390,  391,  392,  393,   -1,   -1,   -1,  397,   -1,  399,
   -1,   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,   -1,   -1,  262,  263,   -1,   -1,  266,  267,  268,
  430,  431,  432,  433,  273,  274,  275,  276,   -1,   -1,
  279,  280,   -1,  282,  283,  284,  285,  286,  287,  288,
   -1,   -1,   -1,   -1,   -1,  294,   -1,  296,  297,  298,
  299,  300,  301,   -1,   -1,  304,   -1,   -1,   -1,  308,
  309,   -1,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  323,   -1,  325,   -1,  327,  328,
   -1,   -1,  331,   -1,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,   -1,  346,   -1,   -1,
  349,  350,   -1,   -1,  353,  354,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,
  369,  370,  371,  372,   -1,   -1,  375,  376,   -1,   -1,
   -1,  380,   -1,   -1,   -1,  384,   -1,   -1,   -1,   -1,
  389,  390,  391,  392,  393,   -1,   -1,  256,  397,   -1,
  399,   -1,   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,
   -1,   -1,   -1,   -1,  273,  274,   -1,  276,   -1,   -1,
  279,  280,   -1,   -1,   -1,  284,  285,  286,   -1,  288,
   -1,  430,  431,  432,  433,  294,   -1,   -1,  297,   -1,
   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
  309,   -1,  311,  312,  313,   -1,  315,   -1,   -1,   -1,
   -1,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,  328,
   -1,   -1,  331,   -1,   -1,  334,   -1,  336,   -1,  338,
  339,  340,  341,   -1,  343,   -1,   -1,   -1,   -1,   -1,
   -1,  350,   -1,   -1,  353,  354,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,
  369,  370,  371,  372,   -1,   -1,  375,  376,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,  387,   -1,
   -1,  390,  391,  392,  393,   -1,   -1,  256,  397,   -1,
  399,   -1,   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,
   -1,   -1,   -1,   -1,  273,  274,   -1,  276,   -1,   -1,
  279,  280,   -1,   -1,   -1,  284,  285,  286,   -1,  288,
   -1,  430,  431,  432,  433,  294,   -1,   -1,  297,   -1,
   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
  309,   -1,  311,  312,  313,   -1,  315,   -1,   -1,   -1,
   -1,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,  328,
   -1,   -1,  331,   -1,   -1,  334,   -1,  336,   -1,  338,
  339,  340,  341,   -1,  343,   -1,   -1,   -1,   -1,   -1,
   -1,  350,   -1,   -1,  353,  354,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,
  369,  370,  371,  372,   -1,   -1,  375,  376,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,   -1,   -1,
   -1,  390,  391,  392,  393,   -1,   -1,  256,  397,   -1,
  399,   -1,   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,
   -1,   -1,   -1,   -1,  273,  274,   -1,  276,   -1,   -1,
  279,  280,   -1,   -1,   -1,  284,  285,  286,   -1,  288,
   -1,  430,  431,  432,  433,  294,   -1,   -1,  297,   -1,
   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
  309,   -1,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,  327,  328,
   -1,   -1,  331,   -1,   -1,  334,   -1,  336,   -1,  338,
  339,  340,  341,   -1,  343,   -1,   -1,   -1,   -1,   -1,
   -1,  350,   -1,   -1,  353,  354,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,
  369,  370,  371,  372,   -1,   -1,  375,  376,   -1,   -1,
   -1,  380,  381,   -1,   -1,  384,   -1,   -1,   -1,   -1,
   -1,  390,  391,  392,  393,   -1,   -1,  256,  397,   -1,
  399,   -1,   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,
   -1,   -1,   -1,   -1,  273,  274,   -1,  276,   -1,   -1,
  279,  280,   -1,   -1,   -1,  284,  285,  286,   -1,  288,
   -1,  430,  431,  432,  433,  294,   -1,   -1,  297,   -1,
   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
  309,   -1,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,  327,  328,
  329,   -1,  331,   -1,   -1,  334,   -1,  336,   -1,  338,
  339,  340,  341,   -1,  343,   -1,   -1,   -1,   -1,   -1,
   -1,  350,   -1,   -1,  353,  354,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,
  369,  370,  371,  372,   -1,   -1,  375,  376,   -1,   -1,
   -1,  380,   -1,   -1,   -1,  384,   -1,   -1,   -1,   -1,
   -1,  390,  391,  392,  393,   -1,   -1,  256,  397,   -1,
  399,   -1,   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,
   -1,   -1,   -1,   -1,  273,  274,   -1,  276,   -1,   -1,
  279,  280,   -1,   -1,   -1,  284,  285,  286,   -1,  288,
   -1,  430,  431,  432,  433,  294,   -1,   -1,  297,   -1,
   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
  309,   -1,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,  327,  328,
   -1,   -1,  331,   -1,   -1,  334,   -1,  336,   -1,  338,
  339,  340,  341,   -1,  343,   -1,   -1,  346,   -1,   -1,
   -1,  350,   -1,   -1,  353,  354,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,
  369,  370,  371,  372,   -1,   -1,  375,  376,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,   -1,   -1,
   -1,  390,  391,  392,  393,   -1,   -1,  256,  397,   -1,
  399,   -1,   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,
   -1,   -1,   -1,   -1,  273,  274,   -1,  276,   -1,   -1,
  279,  280,   -1,   -1,   -1,  284,  285,  286,   -1,  288,
   -1,  430,  431,  432,  433,  294,   -1,   -1,  297,   -1,
   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
  309,   -1,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,  327,  328,
   -1,   -1,  331,   -1,   -1,  334,   -1,  336,   -1,  338,
  339,  340,  341,   -1,  343,   -1,   -1,   -1,   -1,   -1,
   -1,  350,   -1,   -1,  353,  354,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,
  369,  370,  371,  372,   -1,   -1,  375,  376,   -1,   -1,
   -1,  380,   -1,   -1,   -1,  384,   -1,   -1,   -1,   -1,
   -1,  390,  391,  392,  393,   -1,   -1,  256,  397,   -1,
  399,   -1,   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,
   -1,   -1,  271,   -1,  273,  274,   -1,  276,   -1,   -1,
  279,  280,   -1,   -1,   -1,  284,  285,  286,   -1,  288,
   -1,  430,  431,  432,  433,  294,   -1,   -1,  297,   -1,
   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,  307,   -1,
  309,   -1,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,  327,  328,
   -1,   -1,  331,   -1,   -1,  334,   -1,  336,   -1,  338,
  339,  340,  341,   -1,  343,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  352,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,
  369,  370,  371,  372,   -1,   -1,  375,  376,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,
   -1,  390,  391,  392,  393,  394,   -1,  256,  397,   -1,
  399,   -1,   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,
   -1,   -1,   -1,   -1,  273,  274,   -1,  276,   -1,   -1,
  279,  280,   -1,   -1,   -1,  284,  285,  286,   -1,  288,
   -1,  430,  431,   -1,  433,  294,   -1,   -1,  297,   -1,
   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
  309,   -1,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,  327,  328,
   -1,   -1,  331,   -1,   -1,  334,   -1,  336,   -1,  338,
  339,  340,  341,   -1,  343,   -1,   -1,   -1,   -1,   -1,
   -1,  350,   -1,   -1,  353,  354,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,
  369,  370,  371,  372,   -1,   -1,  375,  376,   -1,   -1,
   -1,   -1,  381,   -1,   -1,  384,   -1,   -1,   -1,   -1,
   -1,  390,  391,  392,  393,   -1,   -1,  256,  397,   -1,
  399,   -1,   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,
   -1,   -1,   -1,   -1,  273,  274,   -1,  276,   -1,   -1,
  279,  280,   -1,   -1,   -1,  284,  285,  286,   -1,  288,
   -1,  430,  431,  432,  433,  294,   -1,   -1,  297,   -1,
   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
  309,   -1,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,  327,  328,
   -1,   -1,  331,   -1,   -1,  334,   -1,  336,   -1,  338,
  339,  340,  341,   -1,  343,   -1,   -1,   -1,   -1,   -1,
   -1,  350,   -1,   -1,  353,  354,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,
  369,  370,  371,  372,   -1,   -1,  375,  376,   -1,   -1,
   -1,   -1,  381,   -1,   -1,  384,   -1,   -1,   -1,   -1,
   -1,  390,  391,  392,  393,   -1,   -1,  256,  397,   -1,
  399,   -1,   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,
   -1,   -1,   -1,   -1,  273,  274,   -1,  276,   -1,   -1,
  279,  280,   -1,   -1,   -1,  284,  285,  286,   -1,  288,
   -1,  430,  431,  432,  433,  294,   -1,   -1,  297,   -1,
   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
  309,   -1,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,  327,  328,
   -1,   -1,  331,   -1,   -1,  334,   -1,  336,   -1,  338,
  339,  340,  341,   -1,  343,   -1,   -1,   -1,   -1,   -1,
   -1,  350,   -1,   -1,  353,  354,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,
  369,  370,  371,  372,   -1,   -1,  375,  376,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,   -1,   -1,
   -1,  390,  391,  392,  393,   -1,   -1,  256,  397,   -1,
  399,   -1,   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,
   -1,   -1,   -1,   -1,  273,  274,   -1,  276,   -1,   -1,
  279,  280,   -1,   -1,   -1,  284,  285,  286,   -1,  288,
   -1,  430,  431,  432,  433,  294,   -1,   -1,  297,   -1,
   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
  309,   -1,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,  327,  328,
   -1,   -1,  331,   -1,   -1,  334,   -1,  336,   -1,  338,
  339,  340,  341,   -1,  343,   -1,   -1,   -1,   -1,   -1,
   -1,  350,   -1,   -1,  353,  354,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,
  369,  370,  371,  372,   -1,   -1,  375,  376,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,   -1,   -1,
   -1,  390,  391,  392,  393,   -1,   -1,  256,  397,   -1,
  399,   -1,   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,
   -1,   -1,  271,   -1,  273,  274,   -1,  276,   -1,   -1,
  279,  280,   -1,   -1,   -1,  284,  285,  286,   -1,  288,
   -1,  430,  431,  432,  433,  294,   -1,   -1,  297,   -1,
   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,  307,   -1,
  309,   -1,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,  327,  328,
   -1,   -1,  331,   -1,   -1,  334,   -1,  336,   -1,  338,
  339,  340,  341,   -1,  343,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  352,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,
  369,  370,  371,  372,   -1,   -1,  375,  376,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,
   -1,  390,  391,  392,  393,  256,   -1,   -1,  397,   -1,
  399,   -1,   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,
   -1,   -1,  273,  274,   -1,  276,   -1,   -1,  279,  280,
   -1,   -1,   -1,  284,  285,  286,   -1,  288,   -1,   -1,
   -1,  430,  431,  294,  433,   -1,  297,   -1,   -1,   -1,
   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,  309,   -1,
  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  325,   -1,  327,  328,   -1,   -1,
  331,   -1,   -1,  334,   -1,  336,   -1,  338,  339,  340,
  341,   -1,  343,   -1,   -1,   -1,   -1,   -1,   -1,  350,
   -1,   -1,  353,  354,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,  369,  370,
  371,  372,   -1,   -1,  375,  376,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  384,   -1,   -1,   -1,   -1,   -1,  390,
  391,  392,  393,   -1,   -1,  256,  397,   -1,  399,   -1,
   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,   -1,   -1,
   -1,   -1,  273,  274,   -1,  276,   -1,   -1,  279,  280,
   -1,   -1,   -1,  284,  285,  286,   -1,  288,   -1,  430,
  431,  432,  433,  294,   -1,   -1,  297,   -1,   -1,   -1,
   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,  309,   -1,
  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  325,   -1,  327,  328,   -1,   -1,
  331,   -1,   -1,  334,   -1,  336,   -1,  338,  339,  340,
  341,   -1,  343,   -1,   -1,   -1,   -1,   -1,   -1,  350,
   -1,   -1,  353,  354,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,  369,  370,
  371,  372,   -1,   -1,  375,  376,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  384,   -1,   -1,   -1,   -1,   -1,  390,
  391,  392,  393,   -1,   -1,  256,  397,   -1,  399,   -1,
   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,   -1,   -1,
   -1,   -1,  273,  274,   -1,  276,   -1,   -1,  279,  280,
   -1,   -1,   -1,  284,  285,  286,   -1,  288,   -1,  430,
  431,  432,  433,  294,   -1,   -1,  297,   -1,   -1,   -1,
   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,  309,   -1,
  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  325,   -1,  327,  328,   -1,   -1,
  331,   -1,   -1,  334,   -1,  336,   -1,  338,  339,  340,
  341,   -1,  343,   -1,   -1,   -1,   -1,   -1,   -1,  350,
   -1,   -1,  353,  354,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,  369,  370,
  371,  372,   -1,   -1,  375,  376,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  384,   -1,   -1,   -1,   -1,   -1,  390,
  391,  392,  393,   -1,   -1,  256,  397,   -1,  399,   -1,
   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,   -1,   -1,
   -1,   -1,  273,  274,   -1,  276,   -1,   -1,  279,  280,
   -1,   -1,   -1,  284,  285,  286,   -1,  288,   -1,  430,
  431,  432,  433,  294,   -1,   -1,  297,   -1,   -1,   -1,
   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,  309,   -1,
  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  325,   -1,  327,  328,   -1,   -1,
  331,   -1,   -1,  334,   -1,  336,   -1,  338,  339,  340,
  341,   -1,  343,   -1,   -1,   -1,   -1,   -1,   -1,  350,
   -1,   -1,  353,  354,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,  369,  370,
  371,  372,   -1,   -1,  375,  376,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  384,   -1,   -1,   -1,   -1,   -1,  390,
  391,  392,  393,   -1,   -1,  256,  397,   -1,  399,   -1,
   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,   -1,   -1,
  271,   -1,  273,  274,   -1,  276,   -1,   -1,  279,  280,
   -1,   -1,   -1,  284,  285,  286,   -1,  288,   -1,  430,
  431,  432,  433,  294,   -1,   -1,  297,   -1,   -1,   -1,
   -1,   -1,   -1,  304,   -1,   -1,  307,   -1,  309,   -1,
  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  325,   -1,  327,  328,   -1,   -1,
  331,   -1,   -1,  334,   -1,  336,   -1,  338,  339,  340,
  341,   -1,  343,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,  369,  370,
  371,  372,   -1,   -1,  375,  376,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  384,   -1,  386,  294,   -1,   -1,  390,
  391,  392,  393,  256,   -1,   -1,  397,   -1,  399,  307,
   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,   -1,   -1,
  273,  274,   -1,  276,   -1,   -1,  279,  280,   -1,   -1,
   -1,  284,  285,  286,   -1,  288,   -1,   -1,  336,  430,
  431,  294,  433,   -1,  297,   -1,   -1,   -1,   -1,   -1,
   -1,  304,   -1,   -1,   -1,   -1,  309,   -1,  311,  312,
  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  325,   -1,  327,  328,   -1,   -1,  331,   -1,
   -1,  334,   -1,  336,   -1,  338,  339,  340,  341,   -1,
  343,   -1,  390,  391,  392,  393,   -1,  395,  396,  397,
  398,  399,  400,  401,  402,   -1,   -1,  405,  406,  407,
  408,  409,  410,  411,  412,  368,  369,  370,  371,  372,
   -1,   -1,  375,  376,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  384,   -1,  386,   -1,   -1,   -1,  390,  391,  392,
  393,  256,   -1,   -1,  397,   -1,  399,   -1,   -1,   -1,
   -1,   -1,  405,  406,   -1,   -1,   -1,   -1,  273,  274,
   -1,  276,   -1,   -1,  279,  280,   -1,   -1,   -1,  284,
  285,  286,   -1,  288,   -1,   -1,   -1,  430,  431,  294,
  433,   -1,  297,   -1,   -1,   -1,   -1,   -1,   -1,  304,
   -1,   -1,   -1,   -1,  309,   -1,  311,  312,  313,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  325,   -1,  327,  328,   -1,   -1,  331,   -1,   -1,  334,
   -1,  336,   -1,  338,  339,  340,  341,   -1,  343,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  368,  369,  370,  371,  372,   -1,   -1,
  375,  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,
   -1,   -1,   -1,   -1,   -1,  390,  391,  392,  393,  256,
   -1,   -1,  397,   -1,  399,   -1,   -1,   -1,   -1,   -1,
  405,  406,   -1,   -1,   -1,   -1,  273,  274,   -1,  276,
   -1,   -1,  279,  280,   -1,   -1,   -1,  284,  285,  286,
   -1,  288,   -1,   -1,   -1,  430,  431,  294,  433,   -1,
  297,   -1,   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,
  327,  328,   -1,   -1,  331,   -1,   -1,  334,   -1,  336,
   -1,  338,  339,  340,  341,   -1,  343,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  368,  369,  370,  371,  372,   -1,   -1,  375,  376,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,
   -1,   -1,   -1,  390,  391,  392,  393,  256,   -1,   -1,
  397,   -1,  399,   -1,   -1,   -1,   -1,   -1,  405,  406,
   -1,   -1,   -1,   -1,  273,  274,   -1,  276,   -1,   -1,
  279,  280,   -1,   -1,   -1,  284,  285,  286,   -1,  288,
   -1,   -1,   -1,  430,  431,  294,  433,   -1,  297,   -1,
   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
  309,   -1,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,  327,  328,
   -1,   -1,  331,   -1,   -1,  334,   -1,  336,   -1,  338,
  339,  340,  341,   -1,  343,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,
  369,  370,  371,  372,   -1,   -1,  375,  376,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,   -1,   -1,
   -1,  390,  391,  392,  393,  256,   -1,   -1,  397,   -1,
  399,   -1,   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,
   -1,   -1,  273,  274,   -1,  276,   -1,   -1,  279,  280,
   -1,   -1,   -1,  284,  285,  286,   -1,  288,   -1,   -1,
   -1,  430,  431,  294,  433,   -1,  297,   -1,   -1,   -1,
   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,  309,   -1,
  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  325,   -1,  327,  328,   -1,   -1,
  331,   -1,   -1,  334,   -1,  336,   -1,  338,  339,  340,
  341,   -1,  343,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,  369,  370,
  371,  372,   -1,   -1,  375,  376,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  384,   -1,   -1,   -1,   -1,   -1,  390,
  391,  392,  393,  256,   -1,   -1,  397,   -1,  399,   -1,
   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,   -1,   -1,
  273,  274,   -1,  276,   -1,   -1,  279,  280,   -1,   -1,
   -1,  284,  285,  286,   -1,  288,   -1,   -1,   -1,  430,
  431,  294,  433,   -1,  297,   -1,   -1,   -1,   -1,   -1,
   -1,  304,   -1,   -1,   -1,   -1,  309,   -1,  311,  312,
  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  325,   -1,  327,  328,   -1,   -1,  331,   -1,
   -1,  334,   -1,  336,   -1,  338,  339,  340,  341,   -1,
  343,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  368,  369,  370,  371,  372,
   -1,   -1,  375,  376,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  384,   -1,   -1,   -1,   -1,   -1,  390,  391,  392,
  393,  256,   -1,   -1,  397,   -1,  399,   -1,   -1,   -1,
   -1,   -1,  405,  406,   -1,   -1,   -1,   -1,  273,  274,
   -1,  276,   -1,   -1,  279,  280,   -1,   -1,   -1,  284,
  285,  286,   -1,  288,   -1,   -1,   -1,  430,  431,  294,
  433,   -1,  297,   -1,   -1,   -1,   -1,   -1,   -1,  304,
   -1,   -1,   -1,   -1,  309,   -1,  311,  312,  313,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  325,   -1,  327,  328,   -1,   -1,  331,   -1,   -1,  334,
   -1,  336,   -1,  338,  339,  340,  341,   -1,  343,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  368,  369,  370,  371,  372,   -1,   -1,
  375,  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,
   -1,   -1,   -1,   -1,   -1,  390,  391,  392,  393,  256,
   -1,   -1,  397,   -1,  399,   -1,   -1,   -1,   -1,   -1,
  405,  406,   -1,   -1,   -1,   -1,  273,  274,   -1,  276,
   -1,   -1,  279,  280,   -1,   -1,   -1,  284,  285,  286,
   -1,  288,   -1,   -1,   -1,  430,  431,  294,  433,   -1,
  297,   -1,   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,
  327,  328,   -1,   -1,  331,   -1,   -1,  334,   -1,  336,
   -1,  338,  339,  340,  341,   -1,  343,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  368,  369,  370,  371,  372,   -1,   -1,  375,  376,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,
   -1,   -1,   -1,  390,  391,  392,  393,  256,   -1,   -1,
  397,   -1,  399,   -1,   -1,   -1,   -1,   -1,  405,  406,
   -1,   -1,   -1,   -1,  273,  274,   -1,  276,   -1,   -1,
  279,  280,   -1,   -1,   -1,  284,  285,  286,   -1,  288,
   -1,   -1,   -1,  430,  431,  294,  433,   -1,  297,   -1,
   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
  309,   -1,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,  327,  328,
   -1,   -1,  331,   -1,   -1,  334,   -1,  336,   -1,  338,
  339,  340,  341,   -1,  343,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,
  369,  370,  371,  372,   -1,   -1,  375,  376,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,   -1,   -1,
   -1,  390,  391,  392,  393,  256,   -1,   -1,  397,   -1,
  399,   -1,   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,
   -1,   -1,  273,  274,   -1,  276,   -1,   -1,  279,  280,
   -1,   -1,   -1,  284,  285,  286,   -1,  288,   -1,   -1,
   -1,  430,  431,  294,  433,   -1,  297,   -1,   -1,   -1,
   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,  309,   -1,
  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  325,   -1,  327,  328,   -1,   -1,
  331,   -1,   -1,  334,   -1,  336,   -1,  338,  339,  340,
  341,   -1,  343,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,  369,  370,
  371,  372,   -1,   -1,  375,  376,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  384,   -1,   -1,   -1,   -1,   -1,  390,
  391,  392,  393,  256,   -1,   -1,  397,   -1,  399,   -1,
   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,   -1,   -1,
  273,  274,   -1,  276,   -1,   -1,  279,  280,   -1,   -1,
   -1,  284,  285,  286,   -1,  288,   -1,   -1,   -1,  430,
  431,  294,  433,   -1,  297,   -1,   -1,   -1,   -1,   -1,
   -1,  304,   -1,   -1,   -1,   -1,  309,   -1,  311,  312,
  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  325,   -1,  327,  328,   -1,   -1,  331,   -1,
   -1,  334,   -1,  336,   -1,  338,  339,  340,  341,   -1,
  343,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  368,  369,  370,  371,  372,
   -1,   -1,  375,  376,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  384,   -1,   -1,   -1,   -1,   -1,  390,  391,  392,
  393,  256,   -1,   -1,  397,   -1,  399,   -1,   -1,   -1,
   -1,   -1,  405,  406,   -1,   -1,   -1,   -1,  273,  274,
   -1,  276,   -1,   -1,  279,  280,   -1,   -1,   -1,  284,
  285,  286,   -1,  288,   -1,   -1,   -1,  430,  431,  294,
  433,   -1,  297,   -1,   -1,   -1,   -1,   -1,   -1,  304,
   -1,   -1,   -1,   -1,  309,   -1,  311,  312,  313,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  325,   -1,  327,  328,   -1,   -1,  331,   -1,   -1,  334,
   -1,  336,   -1,  338,  339,  340,  341,   -1,  343,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  368,  369,  370,  371,  372,   -1,   -1,
  375,  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,
   -1,   -1,   -1,   -1,   -1,  390,  391,  392,  393,  256,
   -1,   -1,  397,   -1,  399,   -1,   -1,   -1,   -1,   -1,
  405,  406,   -1,   -1,   -1,   -1,  273,  274,   -1,  276,
   -1,   -1,  279,  280,   -1,   -1,   -1,  284,  285,  286,
   -1,  288,   -1,   -1,   -1,  430,  431,  294,  433,   -1,
  297,   -1,   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,
  327,  328,   -1,   -1,  331,   -1,   -1,  334,   -1,  336,
   -1,  338,  339,  340,  341,   -1,  343,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  368,  369,  370,  371,  372,   -1,   -1,  375,  376,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,
   -1,   -1,   -1,  390,  391,  392,  393,  256,   -1,   -1,
  397,   -1,  399,   -1,   -1,   -1,   -1,   -1,  405,  406,
   -1,   -1,   -1,   -1,  273,  274,   -1,  276,   -1,   -1,
  279,  280,   -1,   -1,   -1,  284,  285,  286,   -1,  288,
   -1,   -1,   -1,  430,  431,  294,  433,   -1,  297,   -1,
   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
  309,   -1,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,  327,  328,
   -1,   -1,  331,   -1,   -1,  334,   -1,  336,   -1,  338,
  339,  340,  341,   -1,  343,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,
  369,  370,  371,  372,   -1,   -1,  375,  376,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,   -1,   -1,
   -1,  390,  391,  392,  393,  256,   -1,   -1,  397,   -1,
  399,   -1,   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,
   -1,   -1,  273,  274,   -1,  276,   -1,   -1,  279,  280,
   -1,   -1,   -1,  284,  285,  286,   -1,  288,   -1,   -1,
   -1,  430,  431,  294,  433,   -1,  297,   -1,   -1,   -1,
   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,  309,   -1,
  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  325,   -1,  327,  328,   -1,   -1,
  331,   -1,   -1,  334,   -1,  336,   -1,  338,  339,  340,
  341,   -1,  343,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,  369,  370,
  371,  372,   -1,   -1,  375,  376,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  384,   -1,   -1,   -1,   -1,   -1,  390,
  391,  392,  393,  256,   -1,   -1,  397,   -1,  399,   -1,
   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,   -1,   -1,
  273,  274,   -1,  276,   -1,   -1,  279,  280,   -1,   -1,
   -1,  284,  285,  286,   -1,  288,   -1,   -1,   -1,  430,
  431,  294,  433,   -1,  297,   -1,   -1,   -1,   -1,   -1,
   -1,  304,   -1,   -1,   -1,   -1,  309,   -1,  311,  312,
  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  325,   -1,  327,  328,   -1,   -1,  331,   -1,
   -1,  334,   -1,  336,   -1,  338,  339,  340,  341,   -1,
  343,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  368,  369,  370,  371,  372,
   -1,   -1,  375,  376,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  384,   -1,   -1,   -1,   -1,   -1,  390,  391,  392,
  393,  256,   -1,   -1,  397,   -1,  399,   -1,   -1,   -1,
   -1,   -1,  405,  406,   -1,   -1,   -1,   -1,  273,  274,
   -1,  276,   -1,   -1,  279,  280,   -1,   -1,   -1,  284,
  285,  286,   -1,  288,   -1,   -1,   -1,  430,  431,  294,
  433,   -1,  297,   -1,   -1,   -1,   -1,   -1,   -1,  304,
   -1,   -1,   -1,   -1,  309,   -1,  311,  312,  313,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  325,   -1,  327,  328,   -1,   -1,  331,   -1,   -1,  334,
   -1,  336,   -1,  338,  339,  340,  341,   -1,  343,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  368,  369,  370,  371,  372,   -1,   -1,
  375,  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,
   -1,   -1,   -1,   -1,   -1,  390,  391,  392,  393,  256,
   -1,   -1,  397,   -1,  399,   -1,   -1,   -1,   -1,   -1,
  405,  406,   -1,   -1,   -1,   -1,  273,  274,   -1,  276,
   -1,   -1,  279,  280,   -1,   -1,   -1,  284,  285,  286,
   -1,  288,   -1,   -1,   -1,  430,  431,  294,  433,   -1,
  297,   -1,   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,
  327,  328,   -1,   -1,  331,   -1,   -1,  334,   -1,  336,
   -1,  338,  339,  340,  341,   -1,  343,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  368,  369,  370,  371,  372,   -1,   -1,  375,  376,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,
   -1,   -1,   -1,  390,  391,  392,  393,  256,   -1,   -1,
  397,   -1,  399,   -1,   -1,   -1,   -1,   -1,  405,  406,
   -1,   -1,   -1,   -1,  273,  274,   -1,  276,   -1,   -1,
  279,  280,   -1,   -1,   -1,  284,  285,  286,   -1,  288,
   -1,   -1,   -1,  430,  431,  294,  433,   -1,  297,   -1,
   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
  309,   -1,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,  327,  328,
   -1,   -1,  331,   -1,   -1,  334,   -1,  336,   -1,  338,
  339,  340,  341,   -1,  343,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,
  369,  370,  371,  372,   -1,   -1,  375,  376,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,   -1,   -1,
   -1,  390,  391,  392,  393,  256,   -1,   -1,  397,   -1,
  399,   -1,   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,
   -1,   -1,  273,  274,   -1,  276,   -1,   -1,  279,  280,
   -1,   -1,   -1,  284,  285,  286,   -1,  288,   -1,   -1,
   -1,  430,  431,  294,  433,   -1,  297,   -1,   -1,   -1,
   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,  309,   -1,
  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  325,   -1,  327,  328,   -1,   -1,
  331,   -1,   -1,  334,   -1,  336,   -1,  338,  339,  340,
  341,   -1,  343,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,  369,  370,
  371,  372,   -1,   -1,  375,  376,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  384,   -1,   -1,   -1,   -1,   -1,  390,
  391,  392,  393,  256,   -1,   -1,  397,   -1,  399,   -1,
   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,   -1,   -1,
  273,  274,   -1,  276,   -1,   -1,  279,  280,   -1,   -1,
   -1,  284,  285,  286,   -1,  288,   -1,   -1,   -1,  430,
  431,  294,  433,   -1,  297,   -1,   -1,   -1,   -1,   -1,
   -1,  304,   -1,   -1,   -1,   -1,  309,   -1,  311,  312,
  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  325,   -1,  327,  328,   -1,   -1,  331,   -1,
   -1,  334,   -1,  336,   -1,  338,  339,  340,  341,   -1,
  343,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  368,  369,  370,  371,  372,
   -1,   -1,  375,  376,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  384,   -1,   -1,   -1,   -1,   -1,  390,  391,  392,
  393,  256,   -1,   -1,  397,   -1,  399,   -1,   -1,   -1,
   -1,   -1,  405,  406,   -1,   -1,   -1,   -1,  273,  274,
   -1,  276,   -1,   -1,  279,  280,   -1,   -1,   -1,  284,
  285,  286,   -1,  288,   -1,   -1,   -1,  430,  431,  294,
  433,   -1,  297,   -1,   -1,   -1,   -1,   -1,   -1,  304,
   -1,   -1,   -1,   -1,  309,   -1,  311,  312,  313,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  325,   -1,  327,  328,   -1,   -1,  331,   -1,   -1,  334,
   -1,  336,   -1,  338,  339,  340,  341,   -1,  343,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  368,  369,  370,  371,  372,   -1,   -1,
  375,  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,
   -1,   -1,   -1,   -1,   -1,  390,  391,  392,  393,  256,
   -1,   -1,  397,   -1,  399,   -1,   -1,   -1,   -1,   -1,
  405,  406,   -1,   -1,   -1,   -1,  273,  274,   -1,  276,
   -1,   -1,  279,  280,   -1,   -1,   -1,  284,  285,  286,
   -1,  288,   -1,   -1,   -1,  430,  431,  294,  433,   -1,
  297,   -1,   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,
  327,  328,   -1,   -1,  331,   -1,   -1,  334,   -1,  336,
   -1,  338,  339,  340,  341,   -1,  343,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  368,  369,  370,  371,  372,   -1,   -1,  375,  376,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,
   -1,   -1,   -1,  390,  391,  392,  393,  256,   -1,   -1,
  397,   -1,  399,   -1,   -1,   -1,   -1,   -1,  405,  406,
   -1,   -1,   -1,   -1,  273,  274,   -1,  276,   -1,   -1,
  279,  280,   -1,   -1,   -1,  284,  285,  286,   -1,  288,
   -1,   -1,   -1,  430,  431,  294,  433,   -1,  297,   -1,
   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
  309,   -1,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,  327,  328,
   -1,   -1,  331,   -1,   -1,  334,   -1,  336,   -1,  338,
  339,  340,  341,   -1,  343,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,
  369,  370,  371,  372,   -1,   -1,  375,  376,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,   -1,   -1,
   -1,  390,  391,  392,  393,  256,   -1,   -1,  397,   -1,
  399,   -1,   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,
   -1,   -1,  273,  274,   -1,  276,   -1,   -1,  279,  280,
   -1,   -1,   -1,  284,  285,  286,   -1,  288,   -1,   -1,
   -1,  430,  431,  294,  433,   -1,  297,   -1,   -1,   -1,
   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,  309,   -1,
  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  325,   -1,  327,  328,   -1,   -1,
  331,   -1,   -1,  334,   -1,  336,   -1,  338,  339,  340,
  341,   -1,  343,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,  369,  370,
  371,  372,   -1,   -1,  375,  376,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  384,   -1,   -1,   -1,   -1,   -1,  390,
  391,  392,  393,  256,   -1,   -1,  397,   -1,  399,   -1,
   -1,   -1,   -1,   -1,  405,  406,   -1,   -1,   -1,   -1,
  273,  274,   -1,  276,   -1,   -1,  279,  280,   -1,   -1,
   -1,  284,  285,  286,   -1,  288,   -1,   -1,   -1,  430,
  431,  294,  433,   -1,  297,   -1,   -1,   -1,   -1,   -1,
   -1,  304,   -1,   -1,   -1,   -1,  309,   -1,  311,  312,
  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  325,   -1,  327,  328,   -1,   -1,  331,   -1,
   -1,  334,   -1,  336,   -1,  338,  339,  340,  341,   -1,
  343,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  368,  369,  370,  371,  372,
   -1,   -1,  375,  376,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  384,   -1,   -1,   -1,   -1,   -1,  390,  391,  392,
  393,  256,   -1,   -1,  397,   -1,  399,   -1,   -1,   -1,
   -1,   -1,  405,  406,   -1,   -1,   -1,   -1,  273,  274,
   -1,  276,   -1,   -1,  279,  280,   -1,   -1,   -1,  284,
  285,  286,   -1,  288,   -1,   -1,   -1,  430,  431,  294,
  433,   -1,  297,   -1,   -1,   -1,   -1,   -1,   -1,  304,
   -1,   -1,   -1,   -1,  309,   -1,  311,  312,  313,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  325,   -1,  327,  328,   -1,   -1,  331,   -1,   -1,  334,
   -1,  336,   -1,  338,  339,  340,  341,   -1,  343,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  368,  369,  370,  371,  372,   -1,   -1,
  375,  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,
   -1,   -1,   -1,   -1,   -1,  390,  391,  392,  393,  256,
   -1,   -1,  397,   -1,  399,   -1,   -1,   -1,   -1,   -1,
  405,  406,   -1,   -1,   -1,   -1,  273,  274,   -1,  276,
   -1,   -1,  279,  280,   -1,   -1,   -1,  284,  285,  286,
   -1,  288,   -1,   -1,   -1,  430,  431,  294,  433,   -1,
  297,   -1,   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,
  327,  328,   -1,   -1,  331,   -1,   -1,  334,   -1,  336,
   -1,  338,  339,  340,  341,   -1,  343,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  368,  369,  370,  371,  372,   -1,   -1,  375,  376,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,
   -1,   -1,   -1,  390,  391,  392,  393,  256,   -1,   -1,
  397,   -1,  399,   -1,   -1,   -1,   -1,   -1,  405,  406,
   -1,   -1,   -1,   -1,  273,  274,   -1,  276,   -1,   -1,
  279,  280,   -1,   -1,   -1,  284,  285,  286,   -1,  288,
   -1,   -1,   -1,  430,  431,  294,  433,   -1,  297,   -1,
   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
  309,   -1,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,  327,  328,
   -1,   -1,  331,   -1,   -1,  334,   -1,  336,   -1,  338,
  339,  340,  341,   -1,  343,   -1,   -1,  346,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,
  369,  370,  371,  372,   -1,   -1,  375,  376,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,   -1,   -1,
   -1,   -1,  391,  392,   -1,   -1,   -1,   -1,   -1,   -1,
  399,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,   -1,   -1,   -1,  260,  261,   -1,   -1,  264,   -1,
   -1,   -1,   -1,   -1,  270,   -1,   -1,   -1,  274,   -1,
  276,  430,  431,  279,  433,  281,  282,   -1,  284,   -1,
  286,   -1,  288,   -1,  290,  291,  292,  293,   -1,   -1,
  296,  297,   -1,   -1,   -1,   -1,  302,  303,  304,  305,
  306,   -1,   -1,  309,   -1,  311,   -1,  313,   -1,  315,
  316,   -1,  318,  319,  320,  321,   -1,   -1,   -1,  325,
  326,  327,   -1,   -1,  330,  331,  332,   -1,   -1,   -1,
  256,   -1,   -1,  339,  340,   -1,  342,  343,   -1,  345,
  346,  347,   -1,   -1,   -1,  351,   -1,  273,  274,   -1,
  276,   -1,   -1,  279,  280,   -1,   -1,   -1,  284,  285,
  286,   -1,  288,   -1,   -1,  371,   -1,   -1,  294,   -1,
   -1,  297,   -1,   -1,  380,  381,  382,   -1,  304,   -1,
   -1,   -1,   -1,  309,  390,  311,  312,  313,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  325,
   -1,  327,  328,   -1,   -1,  331,   -1,   -1,  334,   -1,
  336,   -1,  338,  339,  340,  341,   -1,  343,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  431,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  368,  369,  370,  371,  372,   -1,   -1,  375,
  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,
   -1,   -1,   -1,   -1,  260,  261,   -1,   -1,  264,   -1,
   -1,   -1,   -1,   -1,  270,   -1,  272,   -1,  274,   -1,
  276,   -1,   -1,  279,   -1,  281,  282,   -1,  284,   -1,
  286,   -1,  288,   -1,  290,  291,  292,  293,   -1,   -1,
  296,  297,   -1,   -1,  430,  431,  302,  303,  304,  305,
  306,   -1,   -1,  309,   -1,  311,   -1,  313,   -1,  315,
  316,   -1,  318,  319,  320,  321,   -1,   -1,  324,  325,
  326,  327,   -1,   -1,  330,  331,  332,   -1,   -1,   -1,
   -1,   -1,   -1,  339,  340,   -1,  342,  343,   -1,  345,
  346,  347,   -1,   -1,   -1,  351,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  260,  261,  371,   -1,  264,   -1,   -1,
   -1,  377,  378,  270,   -1,   -1,   -1,  274,   -1,  276,
   -1,   -1,  279,   -1,  281,  282,   -1,  284,   -1,  286,
   -1,  288,   -1,  290,  291,  292,  293,   -1,   -1,  296,
  297,   -1,   -1,   -1,   -1,  302,  303,  304,  305,  306,
   -1,   -1,  309,   -1,  311,   -1,  313,   -1,  315,  316,
   -1,  318,  319,  320,  321,  431,   -1,   -1,  325,  326,
  327,   -1,   -1,  330,  331,  332,   -1,   -1,   -1,   -1,
   -1,   -1,  339,  340,   -1,  342,  343,   -1,  345,  346,
  347,   -1,   -1,   -1,  351,   -1,   -1,   -1,   -1,  260,
  261,   -1,   -1,  264,   -1,   -1,   -1,   -1,   -1,  270,
   -1,   -1,   -1,  274,  371,  276,   -1,   -1,  279,   -1,
  281,  282,   -1,  284,  381,  286,   -1,  288,   -1,  290,
  291,  292,  293,  390,   -1,  296,  297,   -1,   -1,   -1,
   -1,  302,  303,  304,  305,  306,   -1,   -1,  309,   -1,
  311,   -1,  313,   -1,  315,  316,   -1,  318,  319,  320,
  321,   -1,   -1,   -1,  325,  326,  327,   -1,   -1,  330,
  331,  332,   -1,   -1,  431,   -1,   -1,   -1,  339,  340,
   -1,  342,  343,   -1,  345,  346,  347,   -1,   -1,   -1,
  351,   -1,   -1,   -1,   -1,  260,  261,   -1,   -1,  264,
   -1,   -1,   -1,   -1,   -1,  270,   -1,   -1,   -1,  274,
  371,  276,   -1,   -1,  279,   -1,  281,  282,   -1,  284,
  381,  286,   -1,  288,   -1,  290,  291,  292,  293,  390,
   -1,  296,  297,   -1,   -1,   -1,   -1,  302,  303,  304,
  305,  306,   -1,   -1,  309,   -1,  311,   -1,  313,   -1,
  315,  316,   -1,  318,  319,  320,  321,   -1,   -1,   -1,
  325,  326,  327,   -1,   -1,  330,  331,  332,   -1,   -1,
  431,   -1,   -1,   -1,  339,  340,   -1,  342,  343,   -1,
  345,  346,  347,   -1,   -1,   -1,  351,   -1,   -1,   -1,
   -1,  260,  261,   -1,   -1,  264,   -1,   -1,   -1,   -1,
   -1,  270,   -1,   -1,   -1,  274,  371,  276,   -1,   -1,
  279,   -1,  281,  282,   -1,  284,  381,  286,   -1,  288,
   -1,  290,  291,  292,  293,  390,   -1,  296,  297,   -1,
   -1,   -1,   -1,  302,  303,  304,  305,  306,   -1,   -1,
  309,   -1,  311,   -1,  313,   -1,  315,  316,   -1,  318,
  319,  320,  321,   -1,   -1,   -1,  325,  326,  327,   -1,
   -1,  330,  331,  332,   -1,   -1,  431,   -1,   -1,   -1,
  339,  340,   -1,  342,  343,   -1,  345,  346,  347,   -1,
   -1,   -1,  351,   -1,   -1,   -1,   -1,  260,  261,   -1,
   -1,  264,   -1,   -1,   -1,   -1,   -1,  270,   -1,   -1,
   -1,  274,  371,  276,   -1,   -1,  279,   -1,  281,  282,
   -1,  284,  381,  286,   -1,  288,   -1,  290,  291,  292,
  293,  390,   -1,  296,  297,   -1,   -1,   -1,   -1,  302,
  303,  304,  305,  306,   -1,   -1,  309,   -1,  311,   -1,
  313,   -1,  315,  316,   -1,  318,  319,  320,  321,   -1,
   -1,   -1,  325,  326,  327,   -1,   -1,  330,  331,  332,
   -1,   -1,  431,   -1,   -1,   -1,  339,  340,   -1,  342,
  343,   -1,  345,  346,  347,   -1,   -1,   -1,  351,   -1,
   -1,   -1,   -1,  260,  261,   -1,   -1,  264,   -1,   -1,
   -1,   -1,   -1,  270,   -1,   -1,   -1,  274,  371,  276,
   -1,   -1,  279,   -1,  281,  282,   -1,  284,   -1,  286,
   -1,  288,   -1,  290,  291,  292,  293,  390,   -1,  296,
  297,   -1,   -1,   -1,   -1,  302,  303,  304,  305,  306,
   -1,   -1,  309,   -1,  311,   -1,  313,   -1,  315,  316,
   -1,  318,  319,  320,  321,   -1,   -1,   -1,  325,  326,
  327,   -1,   -1,  330,  331,  332,   -1,   -1,  431,   -1,
   -1,   -1,  339,  340,   -1,  342,  343,   -1,  345,  346,
  347,   -1,   -1,   -1,  351,   -1,   -1,  260,  261,   -1,
   -1,  264,   -1,   -1,   -1,   -1,   -1,  270,   -1,   -1,
   -1,  274,   -1,  276,  371,   -1,  279,   -1,  281,  282,
   -1,  284,   -1,  286,  381,  288,   -1,  290,  291,  292,
  293,   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,  302,
  303,  304,  305,  306,   -1,   -1,  309,   -1,  311,   -1,
  313,   -1,  315,  316,   -1,  318,  319,  320,  321,   -1,
   -1,   -1,  325,  326,  327,   -1,   -1,  330,  331,  332,
   -1,   -1,   -1,   -1,  431,   -1,  339,  340,   -1,  342,
  343,   -1,  345,  346,  347,   -1,   -1,   -1,  351,   -1,
   -1,  260,  261,   -1,   -1,  264,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  272,   -1,  274,   -1,  276,  371,   -1,
  279,   -1,  281,  282,   -1,  284,   -1,  286,  381,  288,
   -1,  290,  291,  292,   -1,   -1,   -1,  296,  297,   -1,
   -1,   -1,   -1,  302,   -1,  304,  305,   -1,   -1,   -1,
  309,   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  324,  325,   -1,  327,   -1,
   -1,   -1,  331,  332,   -1,   -1,   -1,   -1,  431,   -1,
  339,  340,   -1,   -1,  343,  260,  261,  346,   -1,  264,
   -1,   -1,  351,   -1,   -1,   -1,   -1,   -1,   -1,  274,
   -1,  276,   -1,   -1,  279,   -1,  281,  282,   -1,  284,
   -1,  286,   -1,  288,   -1,  290,  291,  292,  377,  378,
   -1,  296,  297,   -1,   -1,   -1,   -1,  302,   -1,  304,
  305,  390,   -1,   -1,  309,   -1,   -1,   -1,  313,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  325,   -1,  327,   -1,   -1,   -1,  331,  332,   -1,  260,
  261,   -1,   -1,  264,  339,  340,   -1,   -1,  343,   -1,
   -1,  346,  431,  274,   -1,  276,  351,   -1,  279,   -1,
  281,  282,   -1,  284,   -1,  286,   -1,  288,   -1,  290,
  291,  292,   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,
   -1,  302,   -1,  304,  305,   -1,   -1,   -1,  309,   -1,
   -1,   -1,  313,   -1,   -1,  390,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  325,   -1,  327,   -1,   -1,   -1,
  331,  332,   -1,   -1,   -1,   -1,   -1,   -1,  339,  340,
  273,  274,  343,  276,   -1,  346,  279,  280,   -1,   -1,
  351,  284,  285,  286,   -1,  288,  431,   -1,   -1,   -1,
   -1,  294,   -1,   -1,  297,   -1,   -1,   -1,   -1,   -1,
   -1,  304,   -1,   -1,   -1,   -1,  309,   -1,  311,  312,
  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  325,   -1,  327,  328,   -1,   -1,  331,   -1,
   -1,  334,   -1,  336,   -1,  338,  339,  340,  341,   -1,
  343,   -1,   -1,   -1,   -1,   -1,   -1,  350,   -1,   -1,
  353,  354,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  431,   -1,   -1,   -1,   -1,  368,  369,  370,  371,  372,
   -1,   -1,  375,  376,   -1,   -1,   -1,  380,  381,   -1,
   -1,  384,   -1,   -1,   -1,   -1,   -1,  390,  391,  392,
  393,   -1,   -1,   -1,  397,   -1,  399,   -1,   -1,   -1,
   -1,   -1,  405,  406,   -1,   -1,   -1,   -1,   -1,   -1,
  273,  274,   -1,  276,   -1,   -1,  279,  280,   -1,   -1,
   -1,  284,  285,  286,   -1,  288,   -1,  430,  431,  432,
  433,  294,   -1,  436,  297,   -1,   -1,   -1,  441,   -1,
   -1,  304,   -1,   -1,   -1,   -1,  309,   -1,  311,  312,
  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  325,   -1,  327,  328,   -1,   -1,  331,   -1,
   -1,  334,   -1,  336,   -1,  338,  339,  340,  341,   -1,
  343,   -1,   -1,   -1,   -1,   -1,   -1,  350,   -1,   -1,
  353,  354,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  368,  369,  370,  371,  372,
   -1,   -1,  375,  376,   -1,   -1,   -1,  380,   -1,   -1,
   -1,  384,   -1,   -1,   -1,   -1,   -1,  390,  391,  392,
  393,   -1,   -1,   -1,  397,   -1,  399,   -1,   -1,   -1,
   -1,   -1,  405,  406,   -1,   -1,   -1,   -1,  270,   -1,
   -1,   -1,  274,   -1,  276,   -1,   -1,  279,   -1,   -1,
  282,   -1,  284,   -1,   -1,   -1,  288,  430,  431,  432,
  433,  293,   -1,  436,   -1,  297,   -1,   -1,  441,   -1,
   -1,  303,  304,   -1,  306,   -1,   -1,  309,   -1,  311,
   -1,  313,   -1,  315,  316,   -1,  318,  319,  320,  321,
   -1,   -1,   -1,  325,  326,  327,   -1,   -1,  330,  331,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,  340,   -1,
  342,  343,   -1,  345,  346,  347,   -1,  270,   -1,  351,
   -1,  274,   -1,  276,   -1,   -1,  279,   -1,   -1,  282,
   -1,  284,   -1,   -1,   -1,  288,   -1,   -1,   -1,  371,
  293,   -1,   -1,   -1,  297,   -1,   -1,   -1,   -1,  381,
  303,  304,   -1,  306,   -1,   -1,  309,   -1,  311,   -1,
  313,   -1,  315,  316,   -1,  318,  319,  320,  321,   -1,
   -1,   -1,  325,  326,  327,   -1,   -1,  330,  331,   -1,
   -1,  270,   -1,   -1,   -1,   -1,  339,  340,   -1,  342,
  343,   -1,  345,  346,  347,   -1,   -1,   -1,  351,  431,
   -1,   -1,   -1,   -1,  293,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  303,   -1,   -1,  306,  371,  270,
   -1,   -1,  311,   -1,   -1,  314,  315,  316,  381,  318,
  319,  320,  321,   -1,   -1,   -1,   -1,  326,   -1,   -1,
   -1,  330,  293,   -1,   -1,  334,   -1,   -1,   -1,   -1,
   -1,   -1,  303,  342,   -1,  306,  345,   -1,  347,   -1,
  311,   -1,   -1,   -1,  315,  316,  270,  318,  319,  320,
  321,   -1,   -1,   -1,   -1,  326,   -1,  366,  431,  330,
   -1,   -1,  371,  334,   -1,   -1,   -1,   -1,   -1,  293,
   -1,  342,  381,  382,  345,  384,  347,  386,   -1,  303,
   -1,   -1,  306,   -1,   -1,   -1,   -1,  311,   -1,   -1,
  399,  315,  316,  270,  318,  319,  320,  321,   -1,   -1,
  371,   -1,  326,   -1,   -1,   -1,  330,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  293,   -1,  342,   -1,
   -1,  345,  431,  347,   -1,   -1,  303,   -1,   -1,  306,
   -1,   -1,   -1,   -1,  311,   -1,   -1,   -1,  315,  316,
   -1,  318,  319,  320,  321,   -1,   -1,  371,   -1,  326,
   -1,   -1,   -1,  330,   -1,   -1,   -1,   -1,   -1,   -1,
  431,  385,   -1,   -1,   -1,  342,  273,  274,  345,  276,
  347,   -1,  279,  280,   -1,   -1,   -1,  284,  285,  286,
   -1,  288,   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,
  297,   -1,   -1,   -1,  371,   -1,   -1,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,  431,  315,   -1,
   -1,   -1,   -1,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,  328,   -1,   -1,  331,   -1,   -1,  334,   -1,  336,
   -1,  338,  339,  340,  341,   -1,  343,   -1,   -1,   -1,
   -1,   -1,   -1,  350,   -1,   -1,  353,  354,   -1,   -1,
   -1,   -1,   -1,   -1,  431,   -1,   -1,   -1,   -1,   -1,
   -1,  368,  369,  370,  371,  372,   -1,   -1,  375,  376,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,  385,   -1,
  387,   -1,   -1,  390,  391,  392,  393,   -1,   -1,   -1,
  397,   -1,  399,   -1,   -1,   -1,   -1,   -1,  405,  406,
   -1,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,  276,
   -1,   -1,  279,  280,   -1,   -1,   -1,  284,  285,  286,
   -1,  288,   -1,  430,  431,  432,  433,  294,   -1,   -1,
  297,   -1,   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,   -1,  315,   -1,
   -1,   -1,   -1,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,  328,   -1,   -1,  331,   -1,   -1,  334,   -1,  336,
   -1,  338,  339,  340,  341,   -1,  343,   -1,   -1,   -1,
   -1,   -1,   -1,  350,   -1,   -1,  353,  354,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  368,  369,  370,  371,  372,   -1,   -1,  375,  376,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,
  387,   -1,   -1,  390,  391,  392,  393,   -1,   -1,   -1,
  397,   -1,  399,   -1,   -1,   -1,   -1,   -1,  405,  406,
   -1,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,  276,
   -1,   -1,  279,  280,   -1,   -1,   -1,  284,  285,  286,
   -1,  288,   -1,  430,  431,  432,  433,  294,   -1,   -1,
  297,   -1,   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,
  327,  328,   -1,   -1,  331,   -1,   -1,  334,   -1,  336,
   -1,  338,  339,  340,  341,   -1,  343,   -1,   -1,  346,
   -1,   -1,   -1,  350,   -1,   -1,  353,  354,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  368,  369,  370,  371,  372,   -1,   -1,  375,  376,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,
   -1,   -1,   -1,  390,  391,  392,  393,   -1,   -1,   -1,
  397,   -1,  399,   -1,   -1,   -1,   -1,   -1,  405,  406,
   -1,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,  276,
   -1,   -1,  279,  280,   -1,   -1,   -1,  284,  285,  286,
   -1,  288,   -1,  430,  431,  432,  433,  294,   -1,   -1,
  297,   -1,   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,
  327,  328,   -1,   -1,  331,   -1,   -1,  334,   -1,  336,
   -1,  338,  339,  340,  341,   -1,  343,   -1,   -1,  346,
   -1,   -1,   -1,  350,   -1,   -1,  353,  354,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  368,  369,  370,  371,  372,   -1,   -1,  375,  376,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,
   -1,   -1,   -1,  390,  391,  392,  393,   -1,   -1,   -1,
  397,   -1,  399,   -1,   -1,   -1,   -1,   -1,  405,  406,
   -1,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,  276,
   -1,   -1,  279,  280,   -1,   -1,   -1,  284,  285,  286,
   -1,  288,   -1,  430,  431,  432,  433,  294,   -1,   -1,
  297,   -1,   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,
  327,  328,   -1,   -1,  331,   -1,   -1,  334,   -1,  336,
   -1,  338,  339,  340,  341,   -1,  343,   -1,   -1,   -1,
   -1,   -1,   -1,  350,   -1,   -1,  353,  354,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  368,  369,  370,  371,  372,   -1,   -1,  375,  376,
   -1,   -1,   -1,  380,   -1,   -1,   -1,  384,   -1,   -1,
   -1,   -1,   -1,  390,  391,  392,  393,   -1,   -1,   -1,
  397,   -1,  399,   -1,   -1,   -1,   -1,   -1,  405,  406,
   -1,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,  276,
   -1,   -1,  279,  280,   -1,   -1,   -1,  284,  285,  286,
   -1,  288,   -1,  430,  431,  432,  433,  294,   -1,   -1,
  297,   -1,   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,
  327,  328,   -1,   -1,  331,   -1,   -1,  334,   -1,  336,
   -1,  338,  339,  340,  341,   -1,  343,   -1,   -1,   -1,
   -1,   -1,   -1,  350,   -1,   -1,  353,  354,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  368,  369,  370,  371,  372,   -1,   -1,  375,  376,
   -1,   -1,   -1,  380,   -1,   -1,   -1,  384,   -1,   -1,
   -1,   -1,   -1,  390,  391,  392,  393,   -1,   -1,   -1,
  397,   -1,  399,   -1,   -1,   -1,   -1,   -1,  405,  406,
   -1,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,  276,
   -1,   -1,  279,  280,   -1,   -1,   -1,  284,  285,  286,
   -1,  288,   -1,  430,  431,  432,  433,  294,   -1,   -1,
  297,   -1,   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,
  327,  328,   -1,   -1,  331,   -1,   -1,  334,   -1,  336,
   -1,  338,  339,  340,  341,   -1,  343,   -1,   -1,   -1,
   -1,   -1,   -1,  350,   -1,   -1,  353,  354,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  368,  369,  370,  371,  372,   -1,   -1,  375,  376,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,
   -1,   -1,   -1,  390,  391,  392,  393,   -1,   -1,   -1,
  397,   -1,  399,   -1,   -1,   -1,   -1,   -1,  405,  406,
   -1,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,  276,
   -1,   -1,  279,  280,   -1,   -1,   -1,  284,  285,  286,
   -1,  288,   -1,  430,  431,  432,  433,  294,   -1,   -1,
  297,   -1,   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,
  327,  328,   -1,   -1,  331,   -1,   -1,  334,   -1,  336,
   -1,  338,  339,  340,  341,   -1,  343,   -1,   -1,   -1,
   -1,   -1,   -1,  350,   -1,   -1,  353,  354,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  368,  369,  370,  371,  372,   -1,   -1,  375,  376,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,
   -1,   -1,   -1,  390,  391,  392,  393,   -1,   -1,   -1,
  397,   -1,  399,   -1,   -1,   -1,   -1,   -1,  405,  406,
   -1,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,  276,
   -1,   -1,  279,  280,   -1,   -1,   -1,  284,  285,  286,
   -1,  288,   -1,  430,  431,  432,  433,  294,   -1,   -1,
  297,   -1,   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,
  327,  328,   -1,   -1,  331,   -1,   -1,  334,   -1,  336,
   -1,  338,  339,  340,  341,   -1,  343,   -1,   -1,   -1,
   -1,   -1,   -1,  350,   -1,   -1,  353,  354,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  368,  369,  370,  371,  372,   -1,   -1,  375,  376,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,
   -1,   -1,   -1,  390,  391,  392,  393,   -1,   -1,   -1,
  397,   -1,  399,   -1,   -1,   -1,   -1,   -1,  405,  406,
   -1,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,  276,
   -1,   -1,  279,  280,   -1,   -1,   -1,  284,  285,  286,
   -1,  288,   -1,  430,  431,  432,  433,  294,   -1,   -1,
  297,   -1,   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,
  327,  328,   -1,   -1,  331,   -1,   -1,  334,   -1,  336,
   -1,  338,  339,  340,  341,   -1,  343,   -1,   -1,   -1,
   -1,   -1,   -1,  350,   -1,   -1,  353,  354,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  368,  369,  370,  371,  372,   -1,   -1,  375,  376,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,
   -1,   -1,   -1,  390,  391,  392,  393,   -1,   -1,   -1,
  397,   -1,  399,   -1,   -1,   -1,   -1,   -1,  405,  406,
   -1,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,  276,
   -1,   -1,  279,  280,   -1,   -1,   -1,  284,  285,  286,
   -1,  288,   -1,  430,  431,  432,  433,  294,   -1,   -1,
  297,   -1,   -1,   -1,   -1,   -1,   -1,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,
  327,  328,   -1,   -1,  331,   -1,   -1,  334,   -1,  336,
   -1,  338,  339,  340,  341,   -1,  343,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  368,  369,  370,  371,  372,   -1,   -1,  375,  376,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,
   -1,   -1,   -1,  390,  391,  392,  393,   -1,   -1,   -1,
  397,   -1,  399,   -1,  273,  274,   -1,  276,  405,  406,
  279,  280,   -1,   -1,   -1,  284,  285,  286,   -1,  288,
   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,  297,   -1,
   -1,   -1,   -1,  430,  431,  304,  433,   -1,   -1,   -1,
  309,   -1,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,  327,  328,
   -1,   -1,  331,   -1,   -1,  334,   -1,  336,   -1,  338,
  339,  340,  341,   -1,  343,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,
  369,  370,  371,  372,   -1,   -1,  375,  376,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  384,   -1,   -1,   -1,   -1,
   -1,  390,  391,  392,  393,   -1,   -1,   -1,  397,   -1,
  399,   -1,  273,  274,   -1,  276,  405,  406,  279,  280,
   -1,   -1,   -1,  284,  285,  286,   -1,  288,   -1,   -1,
   -1,   -1,   -1,  294,   -1,   -1,  297,   -1,   -1,   -1,
   -1,  430,  431,  304,  433,   -1,   -1,   -1,  309,   -1,
  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  325,   -1,  327,  328,   -1,   -1,
  331,   -1,   -1,  334,   -1,  336,   -1,  338,  339,  340,
  341,   -1,  343,   -1,   -1,  346,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,  369,  370,
  371,  372,   -1,   -1,  375,  376,   -1,   -1,   -1,   -1,
   -1,  273,  274,  384,  276,   -1,   -1,  279,  280,   -1,
  391,  392,  284,  285,  286,   -1,  288,   -1,  399,   -1,
   -1,   -1,  294,   -1,   -1,  297,   -1,   -1,   -1,   -1,
   -1,   -1,  304,   -1,   -1,   -1,   -1,  309,   -1,  311,
  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  430,
  431,   -1,  433,  325,   -1,  327,  328,   -1,   -1,  331,
   -1,   -1,  334,   -1,  336,   -1,  338,  339,  340,  341,
   -1,  343,   -1,   -1,  346,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  368,  369,  370,  371,
  372,   -1,   -1,  375,  376,   -1,   -1,   -1,   -1,   -1,
  273,  274,  384,  276,   -1,   -1,  279,  280,   -1,  391,
  392,  284,  285,  286,   -1,  288,   -1,  399,   -1,   -1,
   -1,  294,   -1,   -1,  297,   -1,   -1,   -1,   -1,   -1,
   -1,  304,   -1,   -1,   -1,   -1,  309,   -1,  311,  312,
  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  430,  431,
   -1,  433,  325,   -1,  327,  328,   -1,   -1,  331,   -1,
   -1,  334,   -1,  336,   -1,  338,  339,  340,  341,   -1,
  343,   -1,   -1,  346,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  368,  369,  370,  371,  372,
   -1,   -1,  375,  376,   -1,   -1,   -1,   -1,  274,   -1,
  276,  384,   -1,  279,   -1,   -1,  282,   -1,  284,   -1,
  286,   -1,  288,   -1,  290,  291,  292,   -1,   -1,   -1,
  296,  297,   -1,   -1,   -1,   -1,  302,   -1,  304,   -1,
   -1,   -1,   -1,  309,   -1,   -1,   -1,  313,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  430,  431,  325,
   -1,  327,   -1,   -1,   -1,  331,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  339,  340,   -1,  274,  343,  276,   -1,
  346,  279,   -1,   -1,  282,  351,  284,   -1,  286,   -1,
  288,   -1,  290,  291,  292,   -1,   -1,   -1,  296,  297,
   -1,   -1,   -1,   -1,  302,   -1,  304,   -1,   -1,   -1,
   -1,  309,   -1,   -1,   -1,  313,  274,   -1,  276,   -1,
   -1,  279,   -1,   -1,  390,   -1,  284,  325,   -1,  327,
  288,   -1,   -1,  331,   -1,   -1,   -1,   -1,   -1,  297,
   -1,  339,  340,   -1,   -1,  343,  304,   -1,  346,   -1,
   -1,  309,   -1,  351,   -1,  313,  274,  315,  276,  317,
   -1,  279,   -1,   -1,  322,  431,  284,  325,   -1,  327,
  288,   -1,   -1,  331,   -1,   -1,  334,   -1,   -1,  297,
   -1,  339,  340,   -1,   -1,  343,  304,   -1,  346,   -1,
   -1,  309,   -1,   -1,   -1,  313,  274,  315,  276,  317,
   -1,  279,   -1,   -1,  322,   -1,  284,  325,   -1,  327,
  288,   -1,   -1,  331,   -1,   -1,  334,   -1,   -1,  297,
   -1,  339,  340,   -1,   -1,  343,  304,  385,  346,   -1,
   -1,  309,   -1,  431,   -1,  313,   -1,  315,   -1,  317,
   -1,   -1,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,   -1,   -1,  331,   -1,   -1,  334,   -1,   -1,   -1,
   -1,  339,  340,   -1,   -1,  343,   -1,  385,  346,  274,
   -1,  276,   -1,  431,  279,   -1,   -1,   -1,   -1,  284,
   -1,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  297,   -1,   -1,   -1,   -1,   -1,   -1,  304,
   -1,   -1,   -1,   -1,  309,  383,   -1,   -1,  313,  274,
  315,  276,   -1,  431,  279,   -1,   -1,  322,   -1,  284,
  325,   -1,  327,  288,   -1,   -1,  331,   -1,   -1,  334,
   -1,   -1,  297,   -1,  339,  340,   -1,   -1,  343,  304,
   -1,  346,   -1,   -1,  309,   -1,   -1,   -1,  313,  274,
  315,  276,  317,  431,  279,   -1,   -1,  322,   -1,  284,
  325,   -1,  327,  288,   -1,   -1,  331,  372,   -1,  334,
   -1,   -1,  297,   -1,  339,  340,   -1,   -1,  343,  304,
   -1,  346,   -1,   -1,  309,   -1,   -1,   -1,  313,  274,
  315,  276,  317,   -1,  279,   -1,   -1,  322,   -1,  284,
  325,   -1,  327,  288,   -1,   -1,  331,  292,   -1,  334,
   -1,   -1,  297,   -1,  339,  340,   -1,  302,  343,  304,
   -1,  346,   -1,   -1,  309,   -1,  431,   -1,  313,  314,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  325,   -1,  327,   -1,   -1,   -1,  331,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  339,  340,   -1,  274,  343,  276,
   -1,  346,  279,   -1,  281,   -1,  431,  284,  274,   -1,
  276,  288,   -1,  279,   -1,   -1,  282,   -1,  284,   -1,
  297,   -1,  288,   -1,   -1,   -1,   -1,  304,   -1,   -1,
   -1,  297,  309,   -1,  311,   -1,  313,   -1,  304,   -1,
   -1,   -1,   -1,  309,   -1,   -1,  431,  313,  325,   -1,
  327,   -1,   -1,   -1,  331,  332,   -1,   -1,   -1,  325,
   -1,  327,  339,  340,   -1,  331,  343,   -1,   -1,  346,
   -1,   -1,   -1,  339,  340,   -1,   -1,  343,   -1,  274,
  346,  276,   -1,   -1,  279,  351,  431,  282,   -1,  284,
   -1,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  297,   -1,   -1,   -1,   -1,   -1,   -1,  304,
   -1,  274,   -1,  276,  309,   -1,  279,   -1,  313,   -1,
   -1,  284,   -1,   -1,   -1,  288,   -1,   -1,   -1,   -1,
  325,   -1,  327,   -1,  297,   -1,  331,   -1,   -1,   -1,
   -1,  304,   -1,   -1,  339,  340,  309,   -1,  343,   -1,
  313,  346,   -1,   -1,  431,   -1,  351,   -1,   -1,   -1,
   -1,  274,  325,  276,  327,  431,  279,   -1,  331,   -1,
   -1,  284,   -1,   -1,   -1,  288,  339,  340,   -1,   -1,
  343,   -1,   -1,  346,  297,   -1,   -1,   -1,   -1,   -1,
   -1,  304,   -1,  274,   -1,  276,  309,   -1,  279,   -1,
  313,   -1,   -1,  284,   -1,   -1,   -1,  288,   -1,  372,
   -1,   -1,  325,   -1,  327,   -1,  297,   -1,  331,   -1,
   -1,   -1,   -1,  304,   -1,   -1,  339,  340,  309,   -1,
  343,   -1,  313,  346,   -1,   -1,  431,  274,  351,  276,
   -1,   -1,  279,   -1,  325,   -1,  327,  284,   -1,   -1,
  331,  288,   -1,   -1,   -1,   -1,   -1,   -1,  339,  340,
  297,   -1,  343,   -1,   -1,  346,   -1,  304,  431,   -1,
   -1,   -1,  309,   -1,   -1,  274,  313,  276,   -1,   -1,
  279,   -1,   -1,   -1,   -1,  284,   -1,   -1,  325,  288,
  327,   -1,   -1,   -1,  331,   -1,   -1,   -1,  297,   -1,
   -1,   -1,  339,  340,  385,  304,  343,   -1,   -1,  346,
  309,   -1,   -1,   -1,  313,   -1,   -1,   -1,  431,  274,
   -1,  276,   -1,   -1,  279,   -1,  325,   -1,  327,  284,
   -1,   -1,  331,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  339,  340,  297,   -1,  343,   -1,  383,  346,   -1,  304,
  431,  274,  351,  276,  309,   -1,  279,   -1,  313,   -1,
   -1,  284,   -1,   -1,   -1,  288,   -1,   -1,   -1,   -1,
  325,   -1,  327,   -1,  297,   -1,  331,   -1,   -1,   -1,
   -1,  304,   -1,   -1,  339,  340,  309,   -1,  343,   -1,
  313,  346,   -1,   -1,  431,  274,   -1,  276,   -1,   -1,
  279,   -1,  325,   -1,  327,  284,   -1,   -1,  331,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  339,  340,  297,   -1,
  343,   -1,   -1,  346,   -1,  304,   -1,   -1,   -1,   -1,
  309,   -1,  431,  274,  313,  276,   -1,   -1,  279,   -1,
   -1,   -1,   -1,  284,   -1,   -1,  325,  288,  327,   -1,
   -1,   -1,  331,   -1,   -1,   -1,  297,   -1,   -1,   -1,
  339,  340,   -1,  304,  343,   -1,   -1,  346,  309,   -1,
   -1,   -1,  313,   -1,   -1,   -1,  431,  274,   -1,  276,
   -1,   -1,  279,   -1,  325,   -1,  327,  284,   -1,   -1,
  331,  288,   -1,   -1,   -1,   -1,   -1,   -1,  339,  340,
  297,   -1,  343,   -1,   -1,  346,   -1,  304,  431,  274,
   -1,  276,  309,   -1,  279,   -1,  313,   -1,   -1,  284,
   -1,   -1,   -1,  288,   -1,   -1,   -1,   -1,  325,   -1,
  327,   -1,  297,   -1,  331,   -1,   -1,   -1,   -1,  304,
   -1,   -1,  339,  340,  309,   -1,  343,   -1,  313,  346,
   -1,   -1,  431,  274,   -1,  276,   -1,   -1,  279,   -1,
  325,   -1,  327,  284,   -1,   -1,  331,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  339,  340,  297,   -1,  343,   -1,
   -1,  346,   -1,  304,   -1,   -1,   -1,   -1,  309,   -1,
  431,   -1,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  325,   -1,  327,   -1,   -1,   -1,
  331,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,  340,
   -1,   -1,  343,   -1,   -1,  346,   -1,  260,  261,   -1,
   -1,  264,   -1,   -1,  431,   -1,   -1,  270,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  281,   -1,
   -1,   -1,   -1,  286,   -1,   -1,   -1,  290,   -1,   -1,
  293,   -1,   -1,   -1,   -1,   -1,  431,   -1,   -1,   -1,
  303,   -1,  305,  306,   -1,   -1,   -1,  310,  311,   -1,
   -1,   -1,  315,  316,   -1,  318,  319,  320,  321,   -1,
   -1,   -1,   -1,  326,   -1,   -1,   -1,  330,   -1,  332,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  342,
  431,  344,  345,   -1,  347,   -1,   -1,   -1,  351,   -1,
  260,  261,   -1,   -1,  264,   -1,   -1,   -1,   -1,   -1,
  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  371,   -1,
   -1,  281,   -1,   -1,   -1,   -1,  286,   -1,  381,  382,
  290,   -1,   -1,  293,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  303,   -1,  305,  306,   -1,   -1,   -1,
  310,  311,   -1,   -1,   -1,  315,  316,   -1,  318,  319,
  320,  321,   -1,   -1,   -1,   -1,  326,   -1,   -1,   -1,
  330,   -1,  332,  260,  261,   -1,   -1,  264,   -1,   -1,
   -1,   -1,  342,  270,   -1,  345,   -1,  347,   -1,   -1,
   -1,  351,   -1,   -1,  281,   -1,   -1,   -1,   -1,  286,
   -1,   -1,   -1,  290,   -1,   -1,  293,   -1,   -1,   -1,
   -1,  371,   -1,   -1,   -1,   -1,  303,   -1,  305,  306,
   -1,  381,  382,  310,  311,   -1,   -1,   -1,  315,  316,
   -1,  318,  319,  320,  321,   -1,   -1,   -1,   -1,  326,
  260,  261,   -1,  330,  264,  332,   -1,   -1,   -1,   -1,
  270,   -1,   -1,   -1,   -1,  342,   -1,   -1,  345,   -1,
  347,  281,   -1,   -1,  351,   -1,  286,   -1,   -1,   -1,
  290,   -1,   -1,  293,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  303,  371,  305,  306,   -1,  270,   -1,
  310,  311,   -1,   -1,  381,  315,  316,   -1,  318,  319,
  320,  321,   -1,   -1,   -1,   -1,  326,   -1,   -1,   -1,
  330,  293,  332,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  303,  342,   -1,  306,  345,  270,  347,  272,  311,
   -1,  351,   -1,  315,  316,   -1,  318,  319,  320,  321,
   -1,   -1,  324,   -1,  326,   -1,   -1,   -1,  330,  293,
   -1,  371,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  303,
  342,  381,  306,  345,   -1,  347,   -1,  311,   -1,   -1,
   -1,  315,  316,   -1,  318,  319,  320,  321,   -1,   -1,
   -1,   -1,  326,   -1,   -1,   -1,  330,   -1,   -1,  371,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  342,  381,
  382,  345,   -1,  347,   -1,   -1,  270,   -1,   -1,   -1,
  274,   -1,  276,   -1,   -1,  279,   -1,   -1,   -1,   -1,
  284,   -1,   -1,   -1,  288,   -1,   -1,  371,   -1,  293,
   -1,   -1,   -1,  297,   -1,   -1,   -1,  381,  382,  303,
  304,   -1,  306,   -1,   -1,  309,   -1,  311,   -1,  313,
   -1,  315,  316,   -1,  318,  319,  320,  321,   -1,   -1,
   -1,  325,  326,  327,   -1,   -1,  330,  331,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  339,  340,   -1,  342,  343,
   -1,  345,  346,  347,   -1,  270,   -1,  351,   -1,  274,
   -1,  276,   -1,   -1,  279,   -1,   -1,   -1,   -1,  284,
   -1,   -1,   -1,  288,   -1,   -1,   -1,  371,  293,   -1,
   -1,   -1,  297,   -1,   -1,   -1,   -1,  381,  303,  304,
   -1,  306,   -1,   -1,  309,   -1,  311,   -1,  313,   -1,
  315,  316,   -1,  318,  319,  320,  321,   -1,   -1,   -1,
  325,  326,  327,   -1,  270,  330,  331,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  339,  340,   -1,  342,  343,   -1,
  345,  346,  347,   -1,   -1,   -1,  351,  293,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  303,   -1,   -1,
  306,   -1,  270,   -1,   -1,  311,  371,   -1,   -1,  315,
  316,   -1,  318,  319,  320,  321,  381,   -1,   -1,   -1,
  326,   -1,   -1,   -1,  330,  293,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  303,  342,   -1,  306,  345,
  270,  347,   -1,  311,   -1,   -1,   -1,  315,  316,   -1,
  318,  319,  320,  321,   -1,   -1,   -1,   -1,  326,   -1,
   -1,   -1,  330,  293,   -1,  371,   -1,   -1,   -1,   -1,
   -1,  377,  378,  303,  342,  381,  306,  345,  270,  347,
  272,  311,   -1,   -1,   -1,  315,  316,   -1,  318,  319,
  320,  321,   -1,   -1,  324,   -1,  326,   -1,   -1,   -1,
  330,  293,   -1,  371,   -1,   -1,   -1,   -1,   -1,  377,
  378,  303,  342,  381,  306,  345,  270,  347,   -1,  311,
   -1,   -1,   -1,  315,  316,   -1,  318,  319,  320,  321,
   -1,   -1,   -1,   -1,  326,   -1,   -1,   -1,  330,  293,
   -1,  371,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  303,
  342,  381,  306,  345,  270,  347,  272,  311,   -1,   -1,
   -1,  315,  316,   -1,  318,  319,  320,  321,   -1,   -1,
   -1,   -1,  326,   -1,   -1,   -1,  330,  293,   -1,  371,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  303,  342,  381,
  306,  345,  270,  347,   -1,  311,   -1,   -1,   -1,  315,
  316,   -1,  318,  319,  320,  321,   -1,   -1,  324,   -1,
  326,   -1,   -1,   -1,  330,  293,   -1,  371,   -1,   -1,
   -1,   -1,   -1,  377,  378,  303,  342,   -1,  306,  345,
   -1,  347,   -1,  311,   -1,   -1,   -1,  315,  316,   -1,
  318,  319,  320,  321,   -1,   -1,   -1,   -1,  326,   -1,
   -1,   -1,  330,   -1,   -1,  371,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  342,   -1,   -1,  345,   -1,  347,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  371,
  };

#line 8953 "C:\Users\Grant\Documents\research\Copper\source\mcs\..\mcs\cs-parser.jay"

// TAIL
// {

// <summary>
//  A class used to hold info about an operator declarator
// </summary>
class OperatorDeclaration {
	public readonly Operator.OpType optype;
	public readonly FullNamedExpression ret_type;
	public readonly Location location;

	public OperatorDeclaration (Operator.OpType op, FullNamedExpression ret_type, Location location)
	{
		optype = op;
		this.ret_type = ret_type;
		this.location = location;
	}
}

void Error_ExpectingTypeName (Expression expr)
{
	if (expr is Invocation){
		report.Error (1002, expr.Location, "Expecting `;'");
	} else {
		expr.Error_InvalidExpressionStatement (report);
	}
}

void Error_ParameterModifierNotValid (string modifier, Location loc)
{
	report.Error (631, loc, "The parameter modifier `{0}' is not valid in this context",
			              modifier);
}

void Error_DuplicateParameterModifier (Location loc, Parameter.Modifier mod)
{
	report.Error (1107, loc, "Duplicate parameter modifier `{0}'",
  		Parameter.GetModifierSignature (mod));
}

void Error_TypeExpected (Location loc)
{
	report.Error (1031, loc, "Type expected");
}

void Error_UnsafeCodeNotAllowed (Location loc)
{
	report.Error (227, loc, "Unsafe code requires the `unsafe' command line option to be specified");
}

void Warning_EmptyStatement (Location loc)
{
	report.Warning (642, 3, loc, "Possible mistaken empty statement");
}

void Error_NamedArgumentExpected (NamedArgument a)
{
	report.Error (1738, a.Location, "Named arguments must appear after the positional arguments");
}

void Error_MissingInitializer (Location loc)
{
	report.Error (210, loc, "You must provide an initializer in a fixed or using statement declaration");
}

object Error_AwaitAsIdentifier (object token)
{
	if (async_block) {
		report.Error (4003, GetLocation (token), "`await' cannot be used as an identifier within an async method or lambda expression");
		return new LocatedToken ("await", GetLocation (token));
	}

	return token;
}

void push_current_container (TypeDefinition tc, object partial_token)
{
	if (module.Evaluator != null){
		tc.Definition.Modifiers = tc.ModFlags = (tc.ModFlags & ~Modifiers.AccessibilityMask) | Modifiers.PUBLIC;
		if (undo == null)
			undo = new Undo ();

		undo.AddTypeContainer (current_container, tc);
	}
	
	if (partial_token != null)
		current_container.AddPartial (tc);
	else
		current_container.AddTypeContainer (tc);
		
	++lexer.parsing_declaration;
	current_container = tc;
	current_type = tc;
}

TypeContainer pop_current_class ()
{
	var retval = current_container;

	current_container = current_container.Parent;
	current_type = current_type.Parent as TypeDefinition;

	return retval;
}

[System.Diagnostics.Conditional ("FULL_AST")]
void StoreModifierLocation (object token, Location loc)
{
	if (lbag == null)
		return;

	if (mod_locations == null)
  		mod_locations = new List<Tuple<Modifiers, Location>> ();

	mod_locations.Add (Tuple.Create ((Modifiers) token, loc));
}

[System.Diagnostics.Conditional ("FULL_AST")]
void PushLocation (Location loc)
{
	if (location_stack == null)
		location_stack = new Stack<Location> ();

	location_stack.Push (loc);
}

Location PopLocation ()
{
	if (location_stack == null)
		return Location.Null;

	return location_stack.Pop ();
}

string CheckAttributeTarget (int token, string a, Location l)
{
	switch (a) {
	case "assembly" : case "module" : case "field" : case "method" : case "param" : case "property" : case "type" :
			return a;
	}

	if (!Tokenizer.IsValidIdentifier (a)) {
		Error_SyntaxError (token);
	} else {
		report.Warning (658, 1, l,
			 "`{0}' is invalid attribute target. All attributes in this attribute section will be ignored", a);
	}

	return string.Empty;
}

static bool IsUnaryOperator (Operator.OpType op)
{
	switch (op) {
		
	case Operator.OpType.LogicalNot: 
	case Operator.OpType.OnesComplement: 
	case Operator.OpType.Increment:
	case Operator.OpType.Decrement:
	case Operator.OpType.True: 
	case Operator.OpType.False: 
	case Operator.OpType.UnaryPlus: 
	case Operator.OpType.UnaryNegation:
		return true;
	}
	return false;
}

void syntax_error (Location l, string msg)
{
	report.Error (1003, l, "Syntax error, " + msg);
}

Tokenizer lexer;

public Tokenizer Lexer {
	get {
		return lexer;
	}
}		   

public CSharpParser (SeekableStreamReader reader, CompilationSourceFile file, ParserSession session)
	: this (reader, file, file.Compiler.Report, session)
{
}

public CSharpParser (SeekableStreamReader reader, CompilationSourceFile file, Report report, ParserSession session)
{
	this.file = file;
	current_container = current_namespace = file;
	
	this.module = file.Module;
	this.compiler = file.Compiler;
	this.settings = compiler.Settings;
	this.report = report;
	
	lang_version = settings.Version;
	yacc_verbose_flag = settings.VerboseParserFlag;
	doc_support = settings.DocumentationFile != null;
	lexer = new Tokenizer (reader, file, session, report);
	oob_stack = new Stack<object> ();
	lbag = session.LocationsBag;
	use_global_stacks = session.UseJayGlobalArrays;
	parameters_bucket = session.ParametersStack;
}

public void parse ()
{
	eof_token = Token.EOF;
	
	try {
		if (yacc_verbose_flag > 1)
			yyparse (lexer, new yydebug.yyDebugSimple ());
		else
			yyparse (lexer);
			
		Tokenizer tokenizer = lexer as Tokenizer;
		tokenizer.cleanup ();		
	} catch (Exception e){
	  	if (e is yyParser.yyUnexpectedEof) {
			Error_SyntaxError (yyToken);
			UnexpectedEOF = true;
			return;
		}
			
		if (e is yyParser.yyException) {
			if (report.Errors == 0)
				report.Error (-25, lexer.Location, "Parsing error");
		} else {
			// Used by compiler-tester to test internal errors
			if (yacc_verbose_flag > 0 || e is FatalException)
				throw;
		
			report.Error (589, lexer.Location, "Internal compiler error during parsing" + e);
		}
	}
}

void CheckToken (int error, int yyToken, string msg, Location loc)
{
	if (yyToken >= Token.FIRST_KEYWORD && yyToken <= Token.LAST_KEYWORD)
		report.Error (error, loc, "{0}: `{1}' is a keyword", msg, GetTokenName (yyToken));
	else
		report.Error (error, loc, msg);
}

string ConsumeStoredComment ()
{
	string s = tmpComment;
	tmpComment = null;
	Lexer.doc_state = XmlCommentState.Allowed;
	return s;
}

void FeatureIsNotAvailable (Location loc, string feature)
{
	report.FeatureIsNotAvailable (compiler, loc, feature);
}

Location GetLocation (object obj)
{
	var lt = obj as LocatedToken;
	if (lt != null)
		return lt.Location;
		
	var mn = obj as MemberName;
	if (mn != null)
		return mn.Location;
		
	var expr = obj as Expression;
	if (expr != null)
		return expr.Location;

	return lexer.Location;
}

/*
void start_block (Location loc)
{
	if (current_block == null) {
		current_block = new ToplevelBlock (compiler, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else if (parsing_anonymous_method) {
		current_block = new ParametersBlock (current_block, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else {
		current_block = new ExplicitBlock (current_block, loc, Location.Null);
	}
}

Block
end_block (Location loc)
{
	Block retval = current_block.Explicit;
	retval.SetEndLocation (loc);
	current_block = retval.Parent;
	return retval;
}
*/

void start_anonymous (bool isLambda, ParametersCompiled parameters, bool isAsync, Location loc)
{
	oob_stack.Push (current_anonymous_method);
	oob_stack.Push (current_local_parameters);
	oob_stack.Push (current_variable);
	oob_stack.Push (async_block);

	current_local_parameters = parameters;
	if (isLambda) {
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (loc, "lambda expressions");

		current_anonymous_method = new LambdaExpression (loc);
	} else {
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (loc, "anonymous methods");
			
		current_anonymous_method = new AnonymousMethodExpression (loc);
	}

	async_block = isAsync;
	// Force the next block to be created as a ToplevelBlock
	parsing_anonymous_method = true;
}

/*
 * Completes the anonymous method processing, if lambda_expr is null, this
 * means that we have a Statement instead of an Expression embedded 
 */
AnonymousMethodExpression end_anonymous (ParametersBlock anon_block)
{
	AnonymousMethodExpression retval;

	if (async_block)
		anon_block.IsAsync = true;

	current_anonymous_method.Block = anon_block;
	retval = current_anonymous_method;

	async_block = (bool) oob_stack.Pop ();
	current_variable = (BlockVariable) oob_stack.Pop ();
	current_local_parameters = (ParametersCompiled) oob_stack.Pop ();
	current_anonymous_method = (AnonymousMethodExpression) oob_stack.Pop ();

	return retval;
}

void Error_SyntaxError (int token)
{
	Error_SyntaxError (0, token);
}

void Error_SyntaxError (int error_code, int token)
{
	Error_SyntaxError (error_code, token, "Unexpected symbol");
}

void Error_SyntaxError (int error_code, int token, string msg)
{
	Lexer.CompleteOnEOF = false;

	// An error message has been reported by tokenizer
	if (token == Token.ERROR)
		return;
	
	// Avoid duplicit error message after unterminated string literals
	if (token == Token.LITERAL && lexer.Location.Column == 0)
		return;

	string symbol = GetSymbolName (token);
	string expecting = GetExpecting ();
	var loc = lexer.Location - symbol.Length;
	
	if (error_code == 0) {
		if (expecting == "`identifier'") {
			if (token > Token.FIRST_KEYWORD && token < Token.LAST_KEYWORD) {
				report.Error (1041, loc, "Identifier expected, `{0}' is a keyword", symbol);
				return;
			}
			
			error_code = 1001;
			expecting = "identifier";
		} else if (expecting == "`)'") {
			error_code = 1026;
		} else {
			error_code = 1525;
		}
	}
	
	if (string.IsNullOrEmpty (expecting))
		report.Error (error_code, loc, "{1} `{0}'", symbol, msg);
	else
		report.Error (error_code, loc, "{2} `{0}', expecting {1}", symbol, expecting, msg);	  
}

string GetExpecting ()
{
	int [] tokens = yyExpectingTokens (yyExpectingState);
	var names = new List<string> (tokens.Length);
	bool has_type = false;
	bool has_identifier = false;
	for (int i = 0; i < tokens.Length; i++){
		int token = tokens [i];
		has_identifier |= token == Token.IDENTIFIER;
		
		string name = GetTokenName (token);
		if (name == "<internal>")
			continue;
			
		has_type |= name == "type";
		if (names.Contains (name))
			continue;
		
		names.Add (name);
	}

	//
	// Too many tokens to enumerate
	//
	if (names.Count > 8)
		return null;

	if (has_type && has_identifier)
		names.Remove ("identifier");

	if (names.Count == 1)
		return "`" + GetTokenName (tokens [0]) + "'";
	
	StringBuilder sb = new StringBuilder ();
	names.Sort ();
	int count = names.Count;
	for (int i = 0; i < count; i++){
		bool last = i + 1 == count;
		if (last)
			sb.Append ("or ");
		sb.Append ('`');
		sb.Append (names [i]);
		sb.Append (last ? "'" : count < 3 ? "' " : "', ");
	}
	return sb.ToString ();
}


string GetSymbolName (int token)
{
	switch (token){
	case Token.LITERAL:
		return ((Constant)lexer.Value).GetValue ().ToString ();
	case Token.IDENTIFIER:
		return ((LocatedToken)lexer.Value).Value;

	case Token.BOOL:
		return "bool";
	case Token.BYTE:
		return "byte";
	case Token.CHAR:
		return "char";
	case Token.VOID:
		return "void";
	case Token.DECIMAL:
		return "decimal";
	case Token.DOUBLE:
		return "double";
	case Token.FLOAT:
		return "float";
	case Token.INT:
		return "int";
	case Token.LONG:
		return "long";
	case Token.SBYTE:
		return "sbyte";
	case Token.SHORT:
		return "short";
	case Token.STRING:
		return "string";
	case Token.UINT:
		return "uint";
	case Token.ULONG:
		return "ulong";
	case Token.USHORT:
		return "ushort";
	case Token.OBJECT:
		return "object";
		
	case Token.PLUS:
		return "+";
	case Token.UMINUS:
	case Token.MINUS:
		return "-";
	case Token.BANG:
		return "!";
	case Token.BITWISE_AND:
		return "&";
	case Token.BITWISE_OR:
		return "|";
	case Token.STAR:
		return "*";
	case Token.PERCENT:
		return "%";
	case Token.DIV:
		return "/";
	case Token.CARRET:
		return "^";
	case Token.OP_INC:
		return "++";
	case Token.OP_DEC:
		return "--";
	case Token.OP_SHIFT_LEFT:
		return "<<";
	case Token.OP_SHIFT_RIGHT:
		return ">>";
	case Token.OP_LT:
		return "<";
	case Token.OP_GT:
		return ">";
	case Token.OP_LE:
		return "<=";
	case Token.OP_GE:
		return ">=";
	case Token.OP_EQ:
		return "==";
	case Token.OP_NE:
		return "!=";
	case Token.OP_AND:
		return "&&";
	case Token.OP_OR:
		return "||";
	case Token.OP_PTR:
		return "->";
	case Token.OP_COALESCING:	
		return "??";
	case Token.OP_MULT_ASSIGN:
		return "*=";
	case Token.OP_DIV_ASSIGN:
		return "/=";
	case Token.OP_MOD_ASSIGN:
		return "%=";
	case Token.OP_ADD_ASSIGN:
		return "+=";
	case Token.OP_SUB_ASSIGN:
		return "-=";
	case Token.OP_SHIFT_LEFT_ASSIGN:
		return "<<=";
	case Token.OP_SHIFT_RIGHT_ASSIGN:
		return ">>=";
	case Token.OP_AND_ASSIGN:
		return "&=";
	case Token.OP_XOR_ASSIGN:
		return "^=";
	case Token.OP_OR_ASSIGN:
		return "|=";
	}

	return GetTokenName (token);
}

static string GetTokenName (int token)
{
	switch (token){
	
	//Added for Copper
	case Token.PORT:
		return "port";
	case Token.COMPONENT:
		return "component";
	case Token.CONNECT:
		return "connect";
	case Token.DISCONNECT:
		return "disconnect";
	case Token.MULTIPORT:
		return "multiport";
	case Token.WITH:
		return "with";
	
	case Token.ABSTRACT:
		return "abstract";
	case Token.AS:
		return "as";
	case Token.ADD:
		return "add";
	case Token.ASYNC:
		return "async";
	case Token.BASE:
		return "base";
	case Token.BREAK:
		return "break";
	case Token.CASE:
		return "case";
	case Token.CATCH:
		return "catch";
	case Token.CHECKED:
		return "checked";
	case Token.CLASS:
		return "class";
	case Token.CONST:
		return "const";
	case Token.CONTINUE:
		return "continue";
	case Token.DEFAULT:
		return "default";
	case Token.DELEGATE:
		return "delegate";
	case Token.DO:
		return "do";
	case Token.ELSE:
		return "else";
	case Token.ENUM:
		return "enum";
	case Token.EVENT:
		return "event";
	case Token.EXPLICIT:
		return "explicit";
	case Token.EXTERN:
	case Token.EXTERN_ALIAS:
		return "extern";
	case Token.FALSE:
		return "false";
	case Token.FINALLY:
		return "finally";
	case Token.FIXED:
		return "fixed";
	case Token.FOR:
		return "for";
	case Token.FOREACH:
		return "foreach";
	case Token.GOTO:
		return "goto";
	case Token.IF:
		return "if";
	case Token.IMPLICIT:
		return "implicit";
	case Token.IN:
		return "in";
	case Token.INTERFACE:
		return "interface";
	case Token.INTERNAL:
		return "internal";
	case Token.IS:
		return "is";
	case Token.LOCK:
		return "lock";
	case Token.NAMESPACE:
		return "namespace";
	case Token.NEW:
		return "new";
	case Token.NULL:
		return "null";
	case Token.OPERATOR:
		return "operator";
	case Token.OUT:
		return "out";
	case Token.OVERRIDE:
		return "override";
	case Token.PARAMS:
		return "params";
	case Token.PRIVATE:
		return "private";
	case Token.PROTECTED:
		return "protected";
	case Token.PUBLIC:
		return "public";
	case Token.READONLY:
		return "readonly";
	case Token.REF:
		return "ref";
	case Token.RETURN:
		return "return";
	case Token.REMOVE:
		return "remove";
	case Token.SEALED:
		return "sealed";
	case Token.SIZEOF:
		return "sizeof";
	case Token.STACKALLOC:
		return "stackalloc";
	case Token.STATIC:
		return "static";
	case Token.STRUCT:
		return "struct";
	case Token.SWITCH:
		return "switch";
	case Token.THIS:
		return "this";
	case Token.THROW:
		return "throw";
	case Token.TRUE:
		return "true";
	case Token.TRY:
		return "try";
	case Token.TYPEOF:
		return "typeof";
	case Token.UNCHECKED:
		return "unchecked";
	case Token.UNSAFE:
		return "unsafe";
	case Token.USING:
		return "using";
	case Token.VIRTUAL:
		return "virtual";
	case Token.VOLATILE:
		return "volatile";
	case Token.WHERE:
		return "where";
	case Token.WHILE:
		return "while";
	case Token.ARGLIST:
		return "__arglist";
	case Token.REFVALUE:
		return "__refvalue";
	case Token.REFTYPE:
		return "__reftype";
	case Token.MAKEREF:
		return "__makeref";
	case Token.PARTIAL:
		return "partial";
	case Token.ARROW:
		return "=>";
	case Token.FROM:
	case Token.FROM_FIRST:
		return "from";
	case Token.JOIN:
		return "join";
	case Token.ON:
		return "on";
	case Token.EQUALS:
		return "equals";
	case Token.SELECT:
		return "select";
	case Token.GROUP:
		return "group";
	case Token.BY:
		return "by";
	case Token.LET:
		return "let";
	case Token.ORDERBY:
		return "orderby";
	case Token.ASCENDING:
		return "ascending";
	case Token.DESCENDING:
		return "descending";
	case Token.INTO:
		return "into";
	case Token.GET:
		return "get";
	case Token.SET:
		return "set";
	case Token.OPEN_BRACE:
		return "{";
	case Token.CLOSE_BRACE:
		return "}";
	case Token.OPEN_BRACKET:
	case Token.OPEN_BRACKET_EXPR:
		return "[";
	case Token.CLOSE_BRACKET:
		return "]";
	case Token.OPEN_PARENS_CAST:
	case Token.OPEN_PARENS_LAMBDA:
	case Token.OPEN_PARENS:
		return "(";
	case Token.CLOSE_PARENS:
		return ")";
	case Token.DOT:
		return ".";
	case Token.COMMA:
		return ",";
	case Token.DEFAULT_COLON:
		return "default:";
	case Token.COLON:
		return ":";
	case Token.SEMICOLON:
		return ";";
	case Token.TILDE:
		return "~";
	case Token.WHEN:
		return "when";
	case Token.INTERPOLATED_STRING_END:
		return "}";
	case Token.INTERPOLATED_STRING:
		return "${";

	case Token.PLUS:
	case Token.UMINUS:
	case Token.MINUS:
	case Token.BANG:
	case Token.OP_LT:
	case Token.OP_GT:
	case Token.BITWISE_AND:
	case Token.BITWISE_OR:
	case Token.STAR:
	case Token.PERCENT:
	case Token.DIV:
	case Token.CARRET:
	case Token.OP_INC:
	case Token.OP_DEC:
	case Token.OP_SHIFT_LEFT:
	case Token.OP_SHIFT_RIGHT:
	case Token.OP_LE:
	case Token.OP_GE:
	case Token.OP_EQ:
	case Token.OP_NE:
	case Token.OP_AND:
	case Token.OP_OR:
	case Token.OP_PTR:
	case Token.OP_COALESCING:	
	case Token.OP_MULT_ASSIGN:
	case Token.OP_DIV_ASSIGN:
	case Token.OP_MOD_ASSIGN:
	case Token.OP_ADD_ASSIGN:
	case Token.OP_SUB_ASSIGN:
	case Token.OP_SHIFT_LEFT_ASSIGN:
	case Token.OP_SHIFT_RIGHT_ASSIGN:
	case Token.OP_AND_ASSIGN:
	case Token.OP_XOR_ASSIGN:
	case Token.OP_OR_ASSIGN:
	case Token.INTERR_OPERATOR:
		return "<operator>";

	case Token.BOOL:
	case Token.BYTE:
	case Token.CHAR:
	case Token.VOID:
	case Token.DECIMAL:
	case Token.DOUBLE:
	case Token.FLOAT:
	case Token.INT:
	case Token.LONG:
	case Token.SBYTE:
	case Token.SHORT:
	case Token.STRING:
	case Token.UINT:
	case Token.ULONG:
	case Token.USHORT:
	case Token.OBJECT:
		return "type";
	
	case Token.ASSIGN:
		return "=";
	case Token.OP_GENERICS_LT:
	case Token.GENERIC_DIMENSION:
		return "<";
	case Token.OP_GENERICS_GT:
		return ">";
	case Token.INTERR:
	case Token.INTERR_NULLABLE:
		return "?";
	case Token.DOUBLE_COLON:
		return "::";
	case Token.LITERAL:
		return "value";
	case Token.IDENTIFIER:
	case Token.AWAIT:
		return "identifier";

	case Token.EOF:
		return "end-of-file";

		// All of these are internal.
	case Token.NONE:
	case Token.ERROR:
	case Token.FIRST_KEYWORD:
	case Token.EVAL_COMPILATION_UNIT_PARSER:
	case Token.EVAL_USING_DECLARATIONS_UNIT_PARSER:
	case Token.EVAL_STATEMENT_PARSER:
	case Token.LAST_KEYWORD:
	case Token.GENERATE_COMPLETION:
	case Token.COMPLETE_COMPLETION:
		return "<internal>";

		// A bit more robust.
	default:
		return yyNames [token];
        }
}

/* end end end */
}
// }
#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 Console.Error.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int EOF = 257;
  public const int NONE = 258;
  public const int ERROR = 259;
  public const int COMPONENT = 260;
  public const int PORT = 261;
  public const int CONNECT = 262;
  public const int DISCONNECT = 263;
  public const int MULTIPORT = 264;
  public const int WITH = 265;
  public const int ATTACH = 266;
  public const int DETACH = 267;
  public const int EMBED = 268;
  public const int FIRST_KEYWORD = 269;
  public const int ABSTRACT = 270;
  public const int AS = 271;
  public const int ADD = 272;
  public const int BASE = 273;
  public const int BOOL = 274;
  public const int BREAK = 275;
  public const int BYTE = 276;
  public const int CASE = 277;
  public const int CATCH = 278;
  public const int CHAR = 279;
  public const int CHECKED = 280;
  public const int CLASS = 281;
  public const int CONST = 282;
  public const int CONTINUE = 283;
  public const int DECIMAL = 284;
  public const int DEFAULT = 285;
  public const int DELEGATE = 286;
  public const int DO = 287;
  public const int DOUBLE = 288;
  public const int ELSE = 289;
  public const int ENUM = 290;
  public const int EVENT = 291;
  public const int EXPLICIT = 292;
  public const int EXTERN = 293;
  public const int FALSE = 294;
  public const int FINALLY = 295;
  public const int FIXED = 296;
  public const int FLOAT = 297;
  public const int FOR = 298;
  public const int FOREACH = 299;
  public const int GOTO = 300;
  public const int IF = 301;
  public const int IMPLICIT = 302;
  public const int IN = 303;
  public const int INT = 304;
  public const int INTERFACE = 305;
  public const int INTERNAL = 306;
  public const int IS = 307;
  public const int LOCK = 308;
  public const int LONG = 309;
  public const int NAMESPACE = 310;
  public const int NEW = 311;
  public const int NULL = 312;
  public const int OBJECT = 313;
  public const int OPERATOR = 314;
  public const int OUT = 315;
  public const int OVERRIDE = 316;
  public const int PARAMS = 317;
  public const int PRIVATE = 318;
  public const int PROTECTED = 319;
  public const int PUBLIC = 320;
  public const int READONLY = 321;
  public const int REF = 322;
  public const int RETURN = 323;
  public const int REMOVE = 324;
  public const int SBYTE = 325;
  public const int SEALED = 326;
  public const int SHORT = 327;
  public const int SIZEOF = 328;
  public const int STACKALLOC = 329;
  public const int STATIC = 330;
  public const int STRING = 331;
  public const int STRUCT = 332;
  public const int SWITCH = 333;
  public const int THIS = 334;
  public const int THROW = 335;
  public const int TRUE = 336;
  public const int TRY = 337;
  public const int TYPEOF = 338;
  public const int UINT = 339;
  public const int ULONG = 340;
  public const int UNCHECKED = 341;
  public const int UNSAFE = 342;
  public const int USHORT = 343;
  public const int USING = 344;
  public const int VIRTUAL = 345;
  public const int VOID = 346;
  public const int VOLATILE = 347;
  public const int WHERE = 348;
  public const int WHILE = 349;
  public const int ARGLIST = 350;
  public const int PARTIAL = 351;
  public const int ARROW = 352;
  public const int FROM = 353;
  public const int FROM_FIRST = 354;
  public const int JOIN = 355;
  public const int ON = 356;
  public const int EQUALS = 357;
  public const int SELECT = 358;
  public const int GROUP = 359;
  public const int BY = 360;
  public const int LET = 361;
  public const int ORDERBY = 362;
  public const int ASCENDING = 363;
  public const int DESCENDING = 364;
  public const int INTO = 365;
  public const int INTERR_NULLABLE = 366;
  public const int EXTERN_ALIAS = 367;
  public const int REFVALUE = 368;
  public const int REFTYPE = 369;
  public const int MAKEREF = 370;
  public const int ASYNC = 371;
  public const int AWAIT = 372;
  public const int INTERR_OPERATOR = 373;
  public const int WHEN = 374;
  public const int INTERPOLATED_STRING = 375;
  public const int INTERPOLATED_STRING_END = 376;
  public const int GET = 377;
  public const int SET = 378;
  public const int LAST_KEYWORD = 379;
  public const int OPEN_BRACE = 380;
  public const int CLOSE_BRACE = 381;
  public const int OPEN_BRACKET = 382;
  public const int CLOSE_BRACKET = 383;
  public const int OPEN_PARENS = 384;
  public const int CLOSE_PARENS = 385;
  public const int DOT = 386;
  public const int COMMA = 387;
  public const int COLON = 388;
  public const int SEMICOLON = 389;
  public const int TILDE = 390;
  public const int PLUS = 391;
  public const int MINUS = 392;
  public const int BANG = 393;
  public const int ASSIGN = 394;
  public const int OP_LT = 395;
  public const int OP_GT = 396;
  public const int BITWISE_AND = 397;
  public const int BITWISE_OR = 398;
  public const int STAR = 399;
  public const int PERCENT = 400;
  public const int DIV = 401;
  public const int CARRET = 402;
  public const int INTERR = 403;
  public const int DOUBLE_COLON = 404;
  public const int OP_INC = 405;
  public const int OP_DEC = 406;
  public const int OP_SHIFT_LEFT = 407;
  public const int OP_SHIFT_RIGHT = 408;
  public const int OP_LE = 409;
  public const int OP_GE = 410;
  public const int OP_EQ = 411;
  public const int OP_NE = 412;
  public const int OP_AND = 413;
  public const int OP_OR = 414;
  public const int OP_MULT_ASSIGN = 415;
  public const int OP_DIV_ASSIGN = 416;
  public const int OP_MOD_ASSIGN = 417;
  public const int OP_ADD_ASSIGN = 418;
  public const int OP_SUB_ASSIGN = 419;
  public const int OP_SHIFT_LEFT_ASSIGN = 420;
  public const int OP_SHIFT_RIGHT_ASSIGN = 421;
  public const int OP_AND_ASSIGN = 422;
  public const int OP_XOR_ASSIGN = 423;
  public const int OP_OR_ASSIGN = 424;
  public const int OP_PTR = 425;
  public const int OP_COALESCING = 426;
  public const int OP_GENERICS_LT = 427;
  public const int OP_GENERICS_LT_DECL = 428;
  public const int OP_GENERICS_GT = 429;
  public const int LITERAL = 430;
  public const int IDENTIFIER = 431;
  public const int OPEN_PARENS_LAMBDA = 432;
  public const int OPEN_PARENS_CAST = 433;
  public const int GENERIC_DIMENSION = 434;
  public const int DEFAULT_COLON = 435;
  public const int OPEN_BRACKET_EXPR = 436;
  public const int EVAL_STATEMENT_PARSER = 437;
  public const int EVAL_COMPILATION_UNIT_PARSER = 438;
  public const int EVAL_USING_DECLARATIONS_UNIT_PARSER = 439;
  public const int DOC_SEE = 440;
  public const int GENERATE_COMPLETION = 441;
  public const int COMPLETE_COMPLETION = 442;
  public const int UMINUS = 443;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
